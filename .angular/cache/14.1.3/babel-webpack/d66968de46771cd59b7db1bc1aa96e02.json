{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core'; // Importe les décorateurs Component et OnInit d'Angular\n\nimport { Subscription } from 'rxjs';\nlet DetailsComponent = class DetailsComponent {\n  constructor( // Constructeur de la classe DetailsComponent\n  activatedRoute, // On injecte ActivatedRoute pour accéder aux paramètres de l'itinéraire\n  olympicService, // On injecte OlympicService pour accéder aux données et aux méthodes liées aux Jeux Olympiques\n  router) {\n    this.activatedRoute = activatedRoute;\n    this.olympicService = olympicService;\n    this.router = router; // On déclare les propriétés publiques de la classe avec des valeurs initiales\n\n    this.subscriptions = new Subscription(); // C'est une instance de Subscription de RxJS pour gérer les abonnements aux observables.\n\n    this.countryName = \"\"; // Je déclare, initialise à 0, stocke le nom du pays sélectionné\n\n    this.numberOfEntries = 0; // Je déclare, initialise à 0, stocke le compte du nombre de participations olympiques\n\n    this.totalNumberMedals = 0; // Je déclare, initialise à 0, stocke le compte du nombre total de médailles gagnées\n\n    this.totalNumberOfAthletes = 0; // Je déclare, initialise, stocke le compte du le nombre total d'athlètes\n\n    this.countryData = null; // On stocke les données détaillées du pays\n\n    this.chartData = []; // On stocke les données pour le graphique ngx-charts\n\n    this.xAxisLabels = []; // Labels pour l'axe X du graphique\n\n    this.allCountryNames = []; //C'est un tableau qui stockera les noms de tous les pays.\n\n    this.isLoading = false; // C'est un booléen indiquant si des données sont en cours de chargement.\n\n    this.errorMessage = null; // Il stocke un message d'erreur ou null s'il n'y a pas d'erreur.\n\n    this.chartView = [700, 400]; // C'est un tuple représentant la taille du graphique.\n  } // On injecte Router pour la navigation entre les différentes routes/pages de l'application\n\n\n  ngOnInit() {\n    this.isLoading = true; // Active le loader de chargement. Cela affiche le loader dans l'interface utilisateur.\n\n    this.updateChartSize(); // Appelle la méthode updateChartSize pour ajuster la taille du graphique basée sur la taille actuelle de la fenêtre du navigateur.\n\n    window.onresize = () => this.updateChartSize(); // Ajoute un gestionnaire d'événement pour redimensionner le graphique chaque fois que la taille de la fenêtre du navigateur change.\n\n\n    this.olympicService.getOlympics().subscribe({\n      next: countries => {\n        if (countries) {\n          // Vérifie si la liste des pays n'est pas vide.\n          this.allCountryNames = countries.map(country => country.country); // Transforme la liste des données des pays en une liste de noms de pays.\n\n          this.activatedRoute.params.subscribe(params => {\n            this.countryName = params['countryName']; // Récupère le nom du pays à partir des paramètres de l'itinéraire.\n\n            if (!this.isValidCountry(this.countryName)) {\n              // Vérifie si le nom du pays récupéré est valide en utilisant la méthode isValidCountry.\n              this.router.navigate(['/404']); // Si le pays n'est pas valide, redirige vers la page 404.\n            } else {\n              this.loadCountryData(); // Si le pays est valide, appelle la méthode loadCountryData pour charger les données spécifiques au pays.\n            }\n          });\n        }\n      },\n      error: error => {\n        console.error('Error loading data:', error); // Affiche l'erreur dans la console.\n\n        this.isLoading = false; // Désactive le drapeau de chargement en cas d'erreur.\n\n        this.errorMessage = 'Failed to load data: ' + (error.message || 'Unknown error'); // Définit un message d'erreur à afficher dans l'interface utilisateur.\n      }\n    });\n  }\n\n  updateChartSize() {\n    const maxWidth = 700; // Définit la largeur maximale du graphique à 700 pixels.\n\n    const widthRatio = 0.9; // Définit un ratio de 90% de la largeur de la fenêtre du navigateur pour le graphique.\n\n    const aspectRatio = 0.5; // Définit un ratio hauteur/largeur de 0.5 (ce qui signifie que la hauteur sera la moitié de la largeur).\n\n    const width = Math.min(window.innerWidth * widthRatio, maxWidth); // Calcule la largeur du graphique comme étant le plus petit entre 90% de la largeur de la fenêtre et 700 pixels.\n\n    const height = width * aspectRatio; // Calcule la hauteur du graphique en utilisant le ratio hauteur/largeur défini précédemment.\n\n    this.chartView = [width, height]; // Met à jour la propriété chartView avec les nouvelles dimensions du graphique.\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe(); // Appelle la méthode 'unsubscribe' sur l'objet 'subscriptions' pour annuler tous les abonnements actifs.\n  }\n\n  isValidCountry(countryName) {\n    return this.allCountryNames.includes(countryName); // Vérifie si le 'countryName' donné est présent dans la liste 'allCountryNames'.\n  }\n\n  navigateBackHome() {\n    this.router.navigate([\"/\"]); // J'utilise le service router pour naviguer vers la racine (\"/\")\n  }\n\n  ngAfterViewInit() {\n    this.olympicService.loadInitialData().subscribe(() => {\n      this.loadCountryData(); // On appelle loadCountryData pour charger et traiter les données du pays\n    });\n  }\n\n  loadCountryData() {\n    this.isLoading = true; // Indique le début du processus de chargement.\n\n    this.olympicService.getCountryData(this.countryName) // Appelle la méthode getCountryData du service OlympicService en passant le nom du pays sélectionné.\n    .subscribe({\n      next: data => {\n        if (data && data.participations && data.participations.length > 0) {\n          // Vérifie si les données du pays et ses participations sont disponibles et non vides.\n          this.countryData = data; // Met à jour la propriété countryData avec les données reçues.\n\n          this.numberOfEntries = data.participations.length; // Met à jour le nombre total de participations.\n\n          this.totalNumberMedals = data.participations.reduce((total, participation) => total + participation.medalsCount, 0); // Calcule le nombre total de médailles.\n\n          this.totalNumberOfAthletes = data.participations.reduce((total, participation) => total + participation.athleteCount, 0); // Calcule le nombre total d'athlètes.\n\n          this.calculateChartData(); // Appelle la méthode calculateChartData pour préparer les données du graphique.\n        } else {\n          // Si aucune donnée ou participation n'est trouvée pour le pays.\n          this.errorMessage = 'No data or participations found for ' + this.countryName; // Met à jour le message d'erreur.\n        }\n\n        this.isLoading = false; // Indique la fin du processus de chargement.\n      },\n      error: error => {\n        this.isLoading = false; // Désactive l'indicateur de chargement.\n\n        console.error('Error loading country data:', error); // Affiche l'erreur dans la console.\n\n        this.errorMessage = 'Failed to load data: ' + (error.message || 'Unknown error'); // Met à jour le message d'erreur avec les détails de l'erreur.\n      }\n    });\n  }\n\n  calculateChartData() {\n    if (this.countryData && this.countryData.participations) {\n      // Vérifie si les données du pays et ses participations sont disponibles.\n      const medalsByYear = {}; // Initialise un objet pour stocker le nombre de médailles par année.\n\n      this.countryData.participations.forEach(participation => {\n        const year = participation.year.toString(); // Convertit l'année en chaîne de caractères.\n\n        const medalsCount = participation.medalsCount; // Obtient le nombre de médailles pour cette participation.\n\n        if (!medalsByYear[year]) {\n          // Vérifie si l'année n'est pas déjà dans l'objet medalsByYear.\n          medalsByYear[year] = medalsCount; // Si ce n'est pas le cas, ajoute l'année avec le nombre de médailles.\n        } else {\n          // Si l'année est déjà présente,\n          medalsByYear[year] += medalsCount; // ajoute le nombre de médailles à l'année existante.\n        }\n      });\n      let series = Object.keys(medalsByYear).map(year => {\n        return {\n          name: year,\n          value: medalsByYear[year]\n        }; // Crée un objet pour chaque année avec son nom et le nombre de médailles.\n      });\n      this.chartData = [{\n        name: \"Médailles\",\n        series: series\n      }]; // Met à jour chartData avec les données formatées pour ngx-charts.\n\n      this.xAxisLabels = series.map(dataPoint => dataPoint.name); // Met à jour xAxisLabels avec les noms (années) des points de données.\n    } else {\n      this.chartData = []; // Si aucune donnée n'est disponible, initialise chartData à un tableau vide.\n    }\n  }\n\n};\nDetailsComponent = __decorate([Component({\n  selector: \"app-details\",\n  templateUrl: \"./details.component.html\",\n  styleUrls: [\"./details.component.scss\"] // Chemin(s) vers le(s) fichier(s) de styles pour ce composant\n\n})], DetailsComponent);\nexport { DetailsComponent };\n/*\n* Component, OnInit : Permettent d'utiliser les fonctionnalités de base des composants Angular et le hook de cycle de vie ngOnInit.\n* OlympicService : Service personnalisé pour gérer les opérations liées aux données olympiques.\n* OlympicCountry : Modèle de données définissant la structure d'un objet pays olympique.\n* ActivatedRoute, Router : Fournissent des fonctionnalités pour interagir avec les routes de l'application (par exemple, lire les paramètres d'URL ou naviguer vers une autre page).\n* Observable : Fait partie de RxJS, utilisé pour gérer des données asynchrones, comme les réponses des appels HTTP.\n* Décorateur @Component : Indique à Angular que la classe qui suit est un composant Angular.\n    Il fournit des métadonnées de configuration pour le composant, telles que son sélecteur, le fichier de template et les fichiers de style.\n\n* Constructeur : C'est une méthode spéciale qui est exécutée automatiquement lors de la création d'une instance de la classe. Dans Angular, il est couramment utilisé pour l'injection de dépendances.\n* .subscribe() : Cette méthode est utilisée pour s'abonner à un Observable. Les Observable sont au cœur de la programmation réactive et sont utilisés pour gérer des flux de données asynchrones, comme les réponses des requêtes HTTP dans Angular.\n* ngOnInit: Utilisé pour initialiser le composant. Ici, il récupère le nom du pays à partir des paramètres de l'URL et le stocke dans une propriété.\n* ngAfterViewInit: S'assure que les données initiales sont chargées après que la vue du composant soit complètement initialisée.\n\n* Utilisation de setTimeout : Dans ngOnInit, j'ai utilisé setTimeout pour retarder la vérification jusqu'à ce que les données des pays soient chargées. Cela est nécessaire car getOlympics() est asynchrone et peut ne pas avoir terminé de charger les données au moment où isValidCountry est appelée.\n*/\n\n/*\n * ngOnInit, plusieurs opérations clés sont effectuées.\n   Elle commence par initialiser l'état de chargement, gère la taille du graphique en fonction de la taille de la fenêtre, et utilise le service OlympicService pour récupérer les données des pays olympiques.\n   Ensuite, elle s'abonne aux changements de paramètres de route pour déterminer le pays spécifique à afficher.\n   Enfin, elle gère les erreurs qui pourraient survenir lors du chargement des données.\n\n\n\n\n*/","map":{"version":3,"mappings":"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","names":["Component","Subscription","DetailsComponent","constructor","activatedRoute","olympicService","router","ngOnInit","isLoading","updateChartSize","window","onresize","getOlympics","subscribe","next","countries","allCountryNames","map","country","params","countryName","isValidCountry","navigate","loadCountryData","error","console","errorMessage","message","maxWidth","widthRatio","aspectRatio","width","Math","min","innerWidth","height","chartView","ngOnDestroy","subscriptions","unsubscribe","includes","navigateBackHome","ngAfterViewInit","loadInitialData","getCountryData","data","participations","length","countryData","numberOfEntries","totalNumberMedals","reduce","total","participation","medalsCount","totalNumberOfAthletes","athleteCount","calculateChartData","medalsByYear","forEach","year","toString","series","Object","keys","name","value","chartData","xAxisLabels","dataPoint","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/details/details.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';           // Importe les décorateurs Component et OnInit d'Angular\nimport { Subscription } from 'rxjs';                    \nimport { OlympicService } from \"src/app/core/services/olympic.service\"; // Importe OlympicService de vos services\nimport { OlympicCountry } from \"src/app/core/models/Olympic\";           // Importe le modèle OlympicCountry\nimport { ActivatedRoute, Router } from \"@angular/router\";               // Importe ActivatedRoute et Router pour la gestion des routes\nimport { Observable } from \"rxjs\";                                      // Importe Observable de RxJS\nimport { ChartData } from 'src/app/core/models/chart-data.interface';\nimport { Participation } from 'src/app/core/models/Participation';\n\n@Component({                                       // Décorateur Component qui définit les métadonnées pour le composant DetailsComponent\n\tselector: \"app-details\",                       // Sélecteur CSS utilisé pour identifier ce composant dans le template HTML\n\ttemplateUrl: \"./details.component.html\",       // Chemin vers le fichier de template HTML pour ce composant\n\tstyleUrls: [\"./details.component.scss\"],       // Chemin(s) vers le(s) fichier(s) de styles pour ce composant\n})\nexport class DetailsComponent implements OnInit, OnDestroy {           // On va implémenter l'interface OnInit d'Angular\n\t                                                                   // On déclare les propriétés publiques de la classe avec des valeurs initiales\n    private subscriptions = new Subscription();                        // C'est une instance de Subscription de RxJS pour gérer les abonnements aux observables.\n    public countryName: string = \"\";                                   // Je déclare, initialise à 0, stocke le nom du pays sélectionné\n\tpublic numberOfEntries: number = 0;                                // Je déclare, initialise à 0, stocke le compte du nombre de participations olympiques\n\tpublic totalNumberMedals: number = 0;                              // Je déclare, initialise à 0, stocke le compte du nombre total de médailles gagnées\n\tpublic totalNumberOfAthletes: number = 0;                          // Je déclare, initialise, stocke le compte du le nombre total d'athlètes\n\tpublic countryData: OlympicCountry | null = null;                  // On stocke les données détaillées du pays\n\tpublic chartData: ChartData[] = [];                                // On stocke les données pour le graphique ngx-charts\n\tpublic olympics$: Observable<OlympicCountry[]> | undefined;        // Observable pour les données olympiques\n\tpublic xAxisLabels: string[] = [];                                 // Labels pour l'axe X du graphique\n\tpublic olympicCountry?: OlympicCountry;                            // Type facultatif pour les données du pays olympique\n    public allCountryNames: string[] = [];                             //C'est un tableau qui stockera les noms de tous les pays.\n\tpublic isLoading: boolean = false;                                 // C'est un booléen indiquant si des données sont en cours de chargement.\n\tpublic errorMessage: string | null = null;                         // Il stocke un message d'erreur ou null s'il n'y a pas d'erreur.\n\tpublic chartView: [number, number] = [700, 400];                   // C'est un tuple représentant la taille du graphique.\n\n\tconstructor(                                 // Constructeur de la classe DetailsComponent\n    private activatedRoute: ActivatedRoute,      // On injecte ActivatedRoute pour accéder aux paramètres de l'itinéraire\n    private olympicService: OlympicService,      // On injecte OlympicService pour accéder aux données et aux méthodes liées aux Jeux Olympiques\n    private router: Router) {}                   // On injecte Router pour la navigation entre les différentes routes/pages de l'application\n\n\tngOnInit(): void {\n\t\tthis.isLoading = true;                                                  // Active le loader de chargement. Cela affiche le loader dans l'interface utilisateur.\n\t\n\t\tthis.updateChartSize();                                                 // Appelle la méthode updateChartSize pour ajuster la taille du graphique basée sur la taille actuelle de la fenêtre du navigateur.\n\t\twindow.onresize = () => this.updateChartSize();                         // Ajoute un gestionnaire d'événement pour redimensionner le graphique chaque fois que la taille de la fenêtre du navigateur change.\n\t\n\t\tthis.olympicService.getOlympics().subscribe({                           // Démarre un abonnement à l'Observable retourné par getOlympics() de OlympicService.\n\t\t  next: (countries) => {                                                // Fonction 'next' appelée avec les données reçues (ici, la liste des pays olympiques).\n\t\t\tif (countries) {                                                    // Vérifie si la liste des pays n'est pas vide.\n\t\t\t  this.allCountryNames = countries.map(country => country.country); // Transforme la liste des données des pays en une liste de noms de pays.\n\t\n\t\t\t  this.activatedRoute.params.subscribe(params => {                  // S'abonne aux changements des paramètres de l'itinéraire actuel.\n\t\t\t\tthis.countryName = params['countryName'];                       // Récupère le nom du pays à partir des paramètres de l'itinéraire.\n\t\n\t\t\t\tif (!this.isValidCountry(this.countryName)) {                   // Vérifie si le nom du pays récupéré est valide en utilisant la méthode isValidCountry.\n\t\t\t\t  this.router.navigate(['/404']);                               // Si le pays n'est pas valide, redirige vers la page 404.\n\t\t\t\t} else {\n\t\t\t\t  this.loadCountryData();                                       // Si le pays est valide, appelle la méthode loadCountryData pour charger les données spécifiques au pays.\n\t\t\t\t}\n\t\t\t  });\n\t\t\t}\n\t\t  },\n\t\t  error: (error) => {                                                   // Fonction appelée en cas d'erreur lors de la récupération des données.\n\t\t\tconsole.error('Error loading data:', error);                        // Affiche l'erreur dans la console.\n\t\t\tthis.isLoading = false;                                             // Désactive le drapeau de chargement en cas d'erreur.\n\t\t\tthis.errorMessage = 'Failed to load data: ' + (error.message || 'Unknown error'); // Définit un message d'erreur à afficher dans l'interface utilisateur.\n\t\t  }\n\t\t});\n\t}\n\t  \n\tprivate updateChartSize() {\n\t\tconst maxWidth = 700;                                             // Définit la largeur maximale du graphique à 700 pixels.\n\t\tconst widthRatio = 0.9;                                           // Définit un ratio de 90% de la largeur de la fenêtre du navigateur pour le graphique.\n\t\tconst aspectRatio = 0.5;                                          // Définit un ratio hauteur/largeur de 0.5 (ce qui signifie que la hauteur sera la moitié de la largeur).\n\t\tconst width = Math.min(window.innerWidth * widthRatio, maxWidth); // Calcule la largeur du graphique comme étant le plus petit entre 90% de la largeur de la fenêtre et 700 pixels.\n\t\tconst height = width * aspectRatio;                               // Calcule la hauteur du graphique en utilisant le ratio hauteur/largeur défini précédemment.\n\t\tthis.chartView = [width, height];                                 // Met à jour la propriété chartView avec les nouvelles dimensions du graphique.\n\t}\n\t\n\n  ngOnDestroy(): void {                                         // Méthode pour nettoyer les ressources, notamment en désabonnant des observables.\n      this.subscriptions.unsubscribe();                         // Appelle la méthode 'unsubscribe' sur l'objet 'subscriptions' pour annuler tous les abonnements actifs.\n  }\n\nprivate isValidCountry(countryName: string): boolean {          //\n  return this.allCountryNames.includes(countryName);            // Vérifie si le 'countryName' donné est présent dans la liste 'allCountryNames'.\n}\n\n\tnavigateBackHome(): void {                                  // Méthode d'un bouton pour naviguer vers la page d'accueil\n\t\tthis.router.navigate([\"/\"]);                            // J'utilise le service router pour naviguer vers la racine (\"/\")\n\t}\n\n\tngAfterViewInit(): void {                                   // ngAfterViewInit est un hook du cycle de vie appelé après l'initialisation de la vue du composant\n\t\tthis.olympicService.loadInitialData().subscribe(() => { // Souscrit à la méthode loadInitialData de olympicService ???\n\t\t\tthis.loadCountryData();                             // On appelle loadCountryData pour charger et traiter les données du pays\n\t\t}\n\t\t);\n\t}\n\n\tprivate loadCountryData(): void {\n\t\tthis.isLoading = true;                                                           // Indique le début du processus de chargement.\n\t\n\t\tthis.olympicService.getCountryData(this.countryName)                             // Appelle la méthode getCountryData du service OlympicService en passant le nom du pays sélectionné.\n\t\t  .subscribe({                                                                   // Souscrit à l'Observable retourné par getCountryData.\n\t\t\tnext: (data: OlympicCountry | null) => {                                     // La fonction 'next' est exécutée avec les données reçues.\n\t\t\t  if (data && data.participations && data.participations.length > 0) {       // Vérifie si les données du pays et ses participations sont disponibles et non vides.\n\t\t\t\tthis.countryData = data;                                                 // Met à jour la propriété countryData avec les données reçues.\n\t\t\t\tthis.numberOfEntries = data.participations.length;                       // Met à jour le nombre total de participations.\n\t\t\t\tthis.totalNumberMedals = data.participations.reduce((total, participation) => total + participation.medalsCount, 0);      // Calcule le nombre total de médailles.\n\t\t\t\tthis.totalNumberOfAthletes = data.participations.reduce((total, participation) => total + participation.athleteCount, 0); // Calcule le nombre total d'athlètes.\n\t\t\t\tthis.calculateChartData();                                               // Appelle la méthode calculateChartData pour préparer les données du graphique.\n\t\t\t  } else {                                                                   // Si aucune donnée ou participation n'est trouvée pour le pays.\n\t\t\t\tthis.errorMessage = 'No data or participations found for ' + this.countryName; // Met à jour le message d'erreur.\n\t\t\t  }\n\t\t\t  this.isLoading = false;                                                    // Indique la fin du processus de chargement.\n\t\t\t},\n\t\t\terror: (error) => {                                                          // Fonction appelée en cas d'erreur lors du chargement des données.\n\t\t\t  this.isLoading = false;                                                    // Désactive l'indicateur de chargement.\n\t\t\t  console.error('Error loading country data:', error);                       // Affiche l'erreur dans la console.\n\t\t\t  this.errorMessage = 'Failed to load data: ' + (error.message || 'Unknown error'); // Met à jour le message d'erreur avec les détails de l'erreur.\n\t\t\t}\n\t\t  });\n\t}\n\t\n\tprivate calculateChartData(): void {\n\t\tif (this.countryData && this.countryData.participations) {             // Vérifie si les données du pays et ses participations sont disponibles.\n\t\t\tconst medalsByYear: { [year: string]: number } = {};               // Initialise un objet pour stocker le nombre de médailles par année.\n\t\n\t\t\tthis.countryData.participations.forEach((participation: Participation) => { // Parcourt chaque participation pour les données du pays.\n\t\t\t\tconst year = participation.year.toString();                    // Convertit l'année en chaîne de caractères.\n\t\t\t\tconst medalsCount = participation.medalsCount;                 // Obtient le nombre de médailles pour cette participation.\n\t\n\t\t\t\tif (!medalsByYear[year]) {                                     // Vérifie si l'année n'est pas déjà dans l'objet medalsByYear.\n\t\t\t\t\tmedalsByYear[year] = medalsCount;                          // Si ce n'est pas le cas, ajoute l'année avec le nombre de médailles.\n\t\t\t\t} else {                                                       // Si l'année est déjà présente,\n\t\t\t\t\tmedalsByYear[year] += medalsCount;                         // ajoute le nombre de médailles à l'année existante.\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tlet series = Object.keys(medalsByYear).map((year) => {             // Transforme medalsByYear en un tableau de séries pour ngx-charts.\n\t\t\t\treturn { name: year, value: medalsByYear[year] };              // Crée un objet pour chaque année avec son nom et le nombre de médailles.\n\t\t\t});\n\t\n\t\t\tthis.chartData = [{ name: \"Médailles\", series: series }];          // Met à jour chartData avec les données formatées pour ngx-charts.\n\t\t\tthis.xAxisLabels = series.map((dataPoint) => dataPoint.name);      // Met à jour xAxisLabels avec les noms (années) des points de données.\n\t\t} else {\n\t\t\tthis.chartData = [];                                               // Si aucune donnée n'est disponible, initialise chartData à un tableau vide.\n\t\t}\n\t}\n\t\n}\n\n/*\n* Component, OnInit : Permettent d'utiliser les fonctionnalités de base des composants Angular et le hook de cycle de vie ngOnInit.\n* OlympicService : Service personnalisé pour gérer les opérations liées aux données olympiques.\n* OlympicCountry : Modèle de données définissant la structure d'un objet pays olympique.\n* ActivatedRoute, Router : Fournissent des fonctionnalités pour interagir avec les routes de l'application (par exemple, lire les paramètres d'URL ou naviguer vers une autre page).\n* Observable : Fait partie de RxJS, utilisé pour gérer des données asynchrones, comme les réponses des appels HTTP.\n* Décorateur @Component : Indique à Angular que la classe qui suit est un composant Angular.\n    Il fournit des métadonnées de configuration pour le composant, telles que son sélecteur, le fichier de template et les fichiers de style.\n\n* Constructeur : C'est une méthode spéciale qui est exécutée automatiquement lors de la création d'une instance de la classe. Dans Angular, il est couramment utilisé pour l'injection de dépendances.\n* .subscribe() : Cette méthode est utilisée pour s'abonner à un Observable. Les Observable sont au cœur de la programmation réactive et sont utilisés pour gérer des flux de données asynchrones, comme les réponses des requêtes HTTP dans Angular.\n* ngOnInit: Utilisé pour initialiser le composant. Ici, il récupère le nom du pays à partir des paramètres de l'URL et le stocke dans une propriété.\n* ngAfterViewInit: S'assure que les données initiales sont chargées après que la vue du composant soit complètement initialisée.\n\n* Utilisation de setTimeout : Dans ngOnInit, j'ai utilisé setTimeout pour retarder la vérification jusqu'à ce que les données des pays soient chargées. Cela est nécessaire car getOlympics() est asynchrone et peut ne pas avoir terminé de charger les données au moment où isValidCountry est appelée.\n*/\n\n\n/*\n * ngOnInit, plusieurs opérations clés sont effectuées. \n   Elle commence par initialiser l'état de chargement, gère la taille du graphique en fonction de la taille de la fenêtre, et utilise le service OlympicService pour récupérer les données des pays olympiques. \n   Ensuite, elle s'abonne aux changements de paramètres de route pour déterminer le pays spécifique à afficher. \n   Enfin, elle gère les erreurs qui pourraient survenir lors du chargement des données.\n\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}