{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { map, finalize } from 'rxjs/operators';\nlet HomeComponent = class HomeComponent {\n  constructor(olympicService, router) {\n    this.olympicService = olympicService;\n    this.router = router;\n    this.chartData = [];\n    this.numberOfJOs = 0;\n    this.numberOfCountries = 0;\n    this.isLoading = false;\n\n    this.tooltipText = item => {\n      const label = item.data.name;\n      const val = item.data.value;\n      return `${label} ${val}`;\n    };\n  }\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.olympics$ = this.olympicService.getOlympics().pipe(map(countries => {\n      if (countries) {\n        this.numberOfJOs = this.calculateNumberOfJOs(countries);\n        this.numberOfCountries = countries.length;\n        this.chartData = countries.map(country => ({\n          name: country.country,\n          value: country.participations.reduce((total, participation) => total + participation.medalsCount, 0)\n        }));\n      }\n\n      return countries || [];\n    }), finalize(() => this.isLoading = false));\n  }\n\n  calculateNumberOfJOs(countries) {\n    const yearsOfJOs = [];\n    countries.forEach(olympic => {\n      olympic.participations.forEach(participation => {\n        if (!yearsOfJOs.includes(participation.year)) {\n          yearsOfJOs.push(participation.year);\n        }\n      });\n    });\n    return yearsOfJOs.length;\n  }\n\n  onChartClick(event) {\n    if (event && event.name) {\n      this.router.navigate([`/details/${event.name}`]);\n    }\n  }\n\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})], HomeComponent);\nexport { HomeComponent };\n/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\n* Le symbole $ après le nom olympics dans olympics$ est une convention de nommage couramment utilisée dans la communauté Angular et RxJS pour indiquer qu'une variable est un Observable.\n\n*\nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,QAAkC,eAAlC;AAIA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAQA,IAAaC,aAAa,GAA1B,MAAaA,aAAb,CAA0B;EAQxBC,YAAoBC,cAApB,EAA4DC,MAA5D,EAA0E;IAAtD;IAAwC;IANrD,iBAAmB,EAAnB;IAEA,mBAAsB,CAAtB;IACA,yBAA4B,CAA5B;IACP,iBAAqB,KAArB;;IAwCA,mBAAeC,IAAD,IAAsB;MAClC,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAL,CAAUC,IAAxB;MACA,MAAMC,GAAG,GAAGJ,IAAI,CAACE,IAAL,CAAUG,KAAtB;MACA,OAAO,GAAGJ,KAAK,IAAIG,GAAG,EAAtB;IACD,CAJD;EAtC8E;;EAE9EE,QAAQ;IACN,KAAKC,SAAL,GAAiB,IAAjB;IACA,KAAKC,SAAL,GAAiB,KAAKV,cAAL,CAAoBW,WAApB,GAAkCC,IAAlC,CACfhB,GAAG,CAAEiB,SAAD,IAAuC;MACzC,IAAIA,SAAJ,EAAe;QACb,KAAKC,WAAL,GAAmB,KAAKC,oBAAL,CAA0BF,SAA1B,CAAnB;QACA,KAAKG,iBAAL,GAAyBH,SAAS,CAACI,MAAnC;QACA,KAAKC,SAAL,GAAiBL,SAAS,CAACjB,GAAV,CAAcuB,OAAO,KAAK;UACzCd,IAAI,EAAEc,OAAO,CAACA,OAD2B;UAEzCZ,KAAK,EAAEY,OAAO,CAACC,cAAR,CAAuBC,MAAvB,CAA8B,CAACC,KAAD,EAAQC,aAAR,KAA0BD,KAAK,GAAGC,aAAa,CAACC,WAA9E,EAA2F,CAA3F;QAFkC,CAAL,CAArB,CAAjB;MAID;;MACD,OAAOX,SAAS,IAAI,EAApB;IACD,CAVE,CADY,EAYfhB,QAAQ,CAAC,MAAM,KAAKY,SAAL,GAAiB,KAAxB,CAZO,CAAjB;EAcD;;EAEOM,oBAAoB,CAACF,SAAD,EAA4B;IACtD,MAAMY,UAAU,GAAa,EAA7B;IACAZ,SAAS,CAACa,OAAV,CAAmBC,OAAD,IAAY;MAC5BA,OAAO,CAACP,cAAR,CAAuBM,OAAvB,CAAgCH,aAAD,IAAkB;QAC/C,IAAI,CAACE,UAAU,CAACG,QAAX,CAAoBL,aAAa,CAACM,IAAlC,CAAL,EAA8C;UAC5CJ,UAAU,CAACK,IAAX,CAAgBP,aAAa,CAACM,IAA9B;QACD;MACF,CAJD;IAKD,CAND;IAOA,OAAOJ,UAAU,CAACR,MAAlB;EACD;;EAEDc,YAAY,CAACC,KAAD,EAAW;IACrB,IAAIA,KAAK,IAAIA,KAAK,CAAC3B,IAAnB,EAAyB;MACvB,KAAKJ,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,YAAYD,KAAK,CAAC3B,IAAI,EAAvB,CAArB;IACD;EACF;;AA5CuB,CAA1B;AAAaP,aAAa,eALzBH,SAAS,CAAC;EACTuC,QAAQ,EAAE,UADD;EAETC,WAAW,EAAE,uBAFJ;EAGTC,SAAS,EAAE,CAAC,uBAAD;AAHF,CAAD,CAKgB,GAAbtC,aAAa,CAAb;SAAAA;AAqDb","names":["Component","map","finalize","HomeComponent","constructor","olympicService","router","item","label","data","name","val","value","ngOnInit","isLoading","olympics$","getOlympics","pipe","countries","numberOfJOs","calculateNumberOfJOs","numberOfCountries","length","chartData","country","participations","reduce","total","participation","medalsCount","yearsOfJOs","forEach","olympic","includes","year","push","onChartClick","event","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OlympicService } from 'src/app/core/services/olympic.service';\nimport { OlympicCountry } from 'src/app/core/models/Olympic';\nimport { map, finalize } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'],\n})\nexport class HomeComponent implements OnInit {\n  public olympics$: Observable<OlympicCountry[] | null> | undefined;\n  public chartData: any[] = [];\n  public tooltipTemplate: any;\n  public numberOfJOs: number = 0;\n  public numberOfCountries: number = 0;\n  isLoading: boolean = false;\n\n  constructor(private olympicService: OlympicService, private router: Router) {}\n\n  ngOnInit(): void {\n    this.isLoading = true;\n    this.olympics$ = this.olympicService.getOlympics().pipe(\n      map((countries: OlympicCountry[] | null) => {\n        if (countries) {\n          this.numberOfJOs = this.calculateNumberOfJOs(countries);\n          this.numberOfCountries = countries.length;\n          this.chartData = countries.map(country => ({\n            name: country.country,\n            value: country.participations.reduce((total, participation) => total + participation.medalsCount, 0),\n          }));\n        }\n        return countries || [];\n      }),\n      finalize(() => this.isLoading = false)\n    );\n  }\n\n  private calculateNumberOfJOs(countries: OlympicCountry[]): number {\n    const yearsOfJOs: number[] = [];\n    countries.forEach((olympic) => {\n      olympic.participations.forEach((participation) => {\n        if (!yearsOfJOs.includes(participation.year)) {\n          yearsOfJOs.push(participation.year);\n        }\n      });\n    });\n    return yearsOfJOs.length;\n  }\n  \n  onChartClick(event: any): void {\n    if (event && event.name) {\n      this.router.navigate([`/details/${event.name}`]);\n    }\n  }\n\n  tooltipText = (item: any): string => {\n    const label = item.data.name;\n    const val = item.data.value;\n    return `${label} ${val}`;\n  };\n}\n\n/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\n* Le symbole $ après le nom olympics dans olympics$ est une convention de nommage couramment utilisée dans la communauté Angular et RxJS pour indiquer qu'une variable est un Observable.\n\n* \nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/"]},"metadata":{},"sourceType":"module"}