{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport rfdc from 'rfdc';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { sankey, sankeyLeft, sankeyLinkHorizontal } from 'd3-sankey';\nimport { timeFormat } from 'd3-time-format';\n/**\n * Throttle a function\n *\n */\n\nconst _c0 = [\"caretElm\"];\n\nfunction TooltipContentComponent_span_4_ng_template_1_Template(rf, ctx) {}\n\nconst _c1 = function (a0) {\n  return {\n    model: a0\n  };\n};\n\nfunction TooltipContentComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, TooltipContentComponent_span_4_ng_template_1_Template, 0, 0, \"ng-template\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, ctx_r1.context));\n  }\n}\n\nfunction TooltipContentComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.title, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction LegendComponent_header_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"header\", 4)(1, \"span\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.title);\n  }\n}\n\nfunction LegendComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 6)(1, \"ngx-charts-legend-entry\", 7);\n    i0.ɵɵlistener(\"select\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.labelClick.emit($event));\n    })(\"activate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activate($event));\n    })(\"deactivate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const entry_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"label\", entry_r2.label)(\"formattedLabel\", entry_r2.formattedLabel)(\"color\", entry_r2.color)(\"isActive\", ctx_r1.isActive(entry_r2));\n  }\n}\n\nfunction ChartComponent_ngx_charts_scale_legend_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelement(0, \"ngx-charts-scale-legend\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r0.legendOptions && ctx_r0.legendOptions.position === ctx_r0.LegendPosition.Below)(\"valueRange\", ctx_r0.legendOptions.domain)(\"colors\", ctx_r0.legendOptions.colors)(\"height\", ctx_r0.view[1])(\"width\", ctx_r0.legendWidth);\n  }\n}\n\nfunction ChartComponent_ngx_charts_legend_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"ngx-charts-legend\", 5);\n    i0.ɵɵlistener(\"labelClick\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.legendLabelClick.emit($event));\n    })(\"labelActivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelActivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.legendLabelActivate.emit($event));\n    })(\"labelDeactivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelDeactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.legendLabelDeactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r1.legendOptions && ctx_r1.legendOptions.position === ctx_r1.LegendPosition.Below)(\"data\", ctx_r1.legendOptions.domain)(\"title\", ctx_r1.legendOptions.title)(\"colors\", ctx_r1.legendOptions.colors)(\"height\", ctx_r1.view[1])(\"width\", ctx_r1.legendWidth)(\"activeEntries\", ctx_r1.activeEntries);\n  }\n}\n\nconst _c2 = [\"*\"];\nconst _c3 = [\"ngx-charts-axis-label\", \"\"];\nconst _c4 = [\"ticksel\"];\nconst _c5 = [\"ngx-charts-x-axis-ticks\", \"\"];\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_tspan_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"tspan\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tickLine_r14 = ctx.$implicit;\n    const i_r15 = ctx.index;\n    i0.ɵɵattribute(\"y\", i_r15 * 12);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tickLine_r14, \" \");\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_tspan_1_Template, 2, 2, \"tspan\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickLines_r12 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", tickLines_r12);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtemplate(0, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template, 2, 1, \"ng-container\", 4);\n  }\n\n  if (rf & 2) {\n    const tick_r3 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.tickChunks(tick_r3));\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const tickFormatted_r5 = i0.ɵɵnextContext().ngIf;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r10.tickTrim(tickFormatted_r5), \" \");\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 5);\n    i0.ɵɵtemplate(4, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template, 1, 1, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(7, XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template, 1, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickFormatted_r5 = ctx.ngIf;\n\n    const _r7 = i0.ɵɵreference(6);\n\n    const _r9 = i0.ɵɵreference(8);\n\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tickFormatted_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"text-anchor\", ctx_r4.textAnchor)(\"transform\", ctx_r4.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.isWrapTicksSupported)(\"ngIfThen\", _r7)(\"ngIfElse\", _r9);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_2__svg_ng_container_1_Template, 9, 6, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.tickTransform(tick_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tickFormat(tick_r3));\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r19.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"y1\", -ctx_r19.gridLineHeight);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_3__svg_g_1_Template, 2, 2, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r18 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r2.tickTransform(tick_r18));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showGridLines);\n  }\n}\n\nconst _c6 = [\"ngx-charts-x-axis\", \"\"];\n\nfunction XAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function XAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.emitTicksHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"rotateTicks\", ctx_r0.rotateTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.xScale)(\"orient\", ctx_r0.xOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineHeight\", ctx_r0.dims.height)(\"width\", ctx_r0.dims.width)(\"tickValues\", ctx_r0.ticks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction XAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.orientation.Bottom)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c7 = [\"ngx-charts-y-axis-ticks\", \"\"];\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1__svg_tspan_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"tspan\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tickLine_r17 = ctx.$implicit;\n    const i_r18 = ctx.index;\n    const ctx_r16 = i0.ɵɵnextContext(6);\n    i0.ɵɵattribute(\"y\", i_r18 * (8 + ctx_r16.tickSpacing));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tickLine_r17, \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1__svg_tspan_1_Template, 2, 2, \"tspan\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickLines_r14 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", tickLines_r14);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1_Template, 2, 1, \"ng-container\", 10);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickLines_r14 = ctx.ngIf;\n    i0.ɵɵnextContext(2);\n\n    const _r11 = i0.ɵɵreference(8);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", tickLines_r14.length > 1)(\"ngIfElse\", _r11);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtemplate(0, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template, 2, 2, \"ng-container\", 5);\n  }\n\n  if (rf & 2) {\n    const tick_r5 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r10.tickChunks(tick_r5));\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const tickFormatted_r7 = i0.ɵɵnextContext().ngIf;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r12.tickTrim(tickFormatted_r7), \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2__svg_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 6);\n    i0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template, 1, 0, \"ng-container\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template, 1, 1, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(7, YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template, 1, 1, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tickFormatted_r7 = ctx.ngIf;\n\n    const _r9 = i0.ɵɵreference(6);\n\n    const _r11 = i0.ɵɵreference(8);\n\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tickFormatted_r7);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"font-size\", \"12px\");\n    i0.ɵɵattribute(\"dy\", ctx_r6.dy)(\"x\", ctx_r6.x1)(\"y\", ctx_r6.y1)(\"text-anchor\", ctx_r6.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.wrapTicks)(\"ngIfThen\", _r9)(\"ngIfElse\", _r11);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_2__svg_ng_container_1_Template, 9, 10, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transform(tick_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.tickFormat(tick_r5));\n  }\n}\n\nfunction YAxisTicksComponent__svg_path_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 13);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"d\", ctx_r2.referenceAreaPath)(\"transform\", ctx_r2.gridLineTransform());\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 15);\n  }\n\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", ctx_r24.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 15);\n  }\n\n  if (rf & 2) {\n    const ctx_r25 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", -ctx_r25.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template, 1, 1, \"line\", 14);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template, 1, 1, \"line\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r23.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r23.orient === ctx_r23.Orientation.Left);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r23.orient === ctx_r23.Orientation.Right);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1_Template, 3, 3, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r22 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r3.transform(tick_r22));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.showGridLines);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const refLine_r26 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r28 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r28.tickTrim(ctx_r28.tickFormat(refLine_r26.value)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"dy\", ctx_r28.dy)(\"y\", -6)(\"x\", ctx_r28.gridLineWidth)(\"text-anchor\", ctx_r28.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", refLine_r26.name, \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 16);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template, 5, 6, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const refLine_r26 = i0.ɵɵnextContext().$implicit;\n    const ctx_r27 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r27.transform(refLine_r26.value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x2\", ctx_r27.gridLineWidth)(\"transform\", ctx_r27.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r27.showRefLabels);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_5__svg_g_1_Template, 3, 4, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.showRefLines);\n  }\n}\n\nconst _c8 = [\"ngx-charts-y-axis\", \"\"];\n\nfunction YAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function YAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.emitTicksWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickValues\", ctx_r0.ticks)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.yScale)(\"orient\", ctx_r0.yOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineWidth\", ctx_r0.dims.width)(\"referenceLines\", ctx_r0.referenceLines)(\"showRefLines\", ctx_r0.showRefLines)(\"showRefLabels\", ctx_r0.showRefLabels)(\"height\", ctx_r0.dims.height)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction YAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.yOrient)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c9 = [\"ngx-charts-svg-linear-gradient\", \"\"];\n\nfunction SvgLinearGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c10 = [\"ngx-charts-circle\", \"\"];\nconst _c11 = [\"ngx-charts-circle-series\", \"\"];\n\nfunction CircleSeriesComponent__svg_g_0__svg_rect_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"x\", ctx_r1.circle.cx - ctx_r1.circle.radius)(\"y\", ctx_r1.circle.cy)(\"width\", ctx_r1.circle.radius * 2)(\"height\", ctx_r1.circle.height)(\"fill\", ctx_r1.gradientFill);\n  }\n}\n\nfunction CircleSeriesComponent__svg_g_0__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"x\", ctx_r2.circle.cx - ctx_r2.circle.radius)(\"y\", ctx_r2.circle.cy)(\"width\", ctx_r2.circle.radius * 2)(\"height\", ctx_r2.circle.height)(\"fill\", ctx_r2.gradientFill);\n  }\n}\n\nconst _c12 = function (a0) {\n  return {\n    name: a0\n  };\n};\n\nfunction CircleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"defs\");\n    i0.ɵɵelement(2, \"g\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, CircleSeriesComponent__svg_g_0__svg_rect_3_Template, 1, 6, \"rect\", 2);\n    i0.ɵɵtemplate(4, CircleSeriesComponent__svg_g_0__svg_rect_4_Template, 1, 5, \"rect\", 2);\n    i0.ɵɵelementStart(5, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CircleSeriesComponent__svg_g_0_Template__svg_g_select_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.onClick(ctx_r3.circle.data));\n    })(\"activate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_activate_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activateCircle());\n    })(\"deactivate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_deactivate_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivateCircle());\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.circle.gradientStops);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isSSR && ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSSR && ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"active\", ctx_r0.isActive(i0.ɵɵpureFunction1(20, _c12, ctx_r0.circle.seriesName)));\n    i0.ɵɵproperty(\"cx\", ctx_r0.circle.cx)(\"cy\", ctx_r0.circle.cy)(\"r\", ctx_r0.circle.radius)(\"fill\", ctx_r0.circle.color)(\"pointerEvents\", ctx_r0.circle.value === 0 ? \"none\" : \"all\")(\"data\", ctx_r0.circle.value)(\"classNames\", ctx_r0.circle.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(ctx_r0.circle))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", ctx_r0.circle.data);\n  }\n}\n\nconst _c13 = [\"ngx-charts-grid-panel\", \"\"];\nconst _c14 = [\"ngx-charts-grid-panel-series\", \"\"];\n\nfunction GridPanelSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 1);\n  }\n\n  if (rf & 2) {\n    const gridPanel_r1 = ctx.$implicit;\n    i0.ɵɵclassProp(\"grid-panel\", true)(\"odd\", gridPanel_r1.class === \"odd\")(\"even\", gridPanel_r1.class === \"even\");\n    i0.ɵɵproperty(\"height\", gridPanel_r1.height)(\"width\", gridPanel_r1.width)(\"x\", gridPanel_r1.x)(\"y\", gridPanel_r1.y);\n  }\n}\n\nconst _c15 = [\"ngx-charts-svg-radial-gradient\", \"\"];\n\nfunction SvgRadialGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c16 = [\"ngx-charts-area\", \"\"];\n\nfunction AreaComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c17 = [\"ngx-charts-count-up\", \"\"];\nconst _c18 = [\"tooltipAnchor\"];\nconst _c19 = [\"ngx-charts-tooltip-area\", \"\"];\n\nfunction TooltipArea__svg_ng_template_2__xhtml_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelement(1, \"span\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tooltipItem_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", tooltipItem_r5.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.getToolTipText(tooltipItem_r5), \" \");\n  }\n}\n\nfunction TooltipArea__svg_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, TooltipArea__svg_ng_template_2__xhtml_div_1_Template, 3, 3, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const model_r3 = ctx.model;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", model_r3);\n  }\n}\n\nconst _c20 = [\"ngx-charts-timeline\", \"\"];\n\nfunction AdvancedLegendComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", ctx_r0.roundedTotal)(\"valueFormatting\", ctx_r0.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.valueFormatting ? ctx_r1.valueFormatting(ctx_r1.roundedTotal) : ctx_r1.defaultValueFormatting(ctx_r1.roundedTotal), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", legendItem_r3._value)(\"valueFormatting\", ctx_r4.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.valueFormatting ? ctx_r5.valueFormatting(legendItem_r3.value) : ctx_r5.defaultValueFormatting(legendItem_r3.value), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 18);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", legendItem_r3.percentage)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", legendItem_r3.percentage.toLocaleString(), \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mouseenter\", function AdvancedLegendComponent_div_7_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.activate.emit(legendItem_r3.data));\n    })(\"mouseleave\", function AdvancedLegendComponent_div_7_Template_div_mouseleave_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.deactivate.emit(legendItem_r3.data));\n    })(\"click\", function AdvancedLegendComponent_div_7_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.select.emit(legendItem_r3.data));\n    });\n    i0.ɵɵelement(1, \"div\", 10);\n    i0.ɵɵtemplate(2, AdvancedLegendComponent_div_7_div_2_Template, 1, 2, \"div\", 11);\n    i0.ɵɵtemplate(3, AdvancedLegendComponent_div_7_div_3_Template, 2, 1, \"div\", 12);\n    i0.ɵɵelementStart(4, \"div\", 13);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AdvancedLegendComponent_div_7_div_6_Template, 1, 2, \"div\", 14);\n    i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_div_7_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border-left-color\", legendItem_r3.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(legendItem_r3.displayLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n  }\n}\n\nconst _c21 = [\"ngx-charts-area-series\", \"\"];\nconst _c22 = [\"tooltipTemplate\"];\nconst _c23 = [\"seriesTooltipTemplate\"];\n\nfunction AreaChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"baseValue\", ctx_r2.baseValue)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClick($event, series_r11));\n    })(\"activate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onActivate($event));\n    })(\"deactivate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"baseValue\", ctx_r19.baseValue)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nconst _c24 = function (a0, a1) {\n  return [a0, a1];\n};\n\nfunction AreaChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, AreaChartComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"activeEntries\", ctx_r2.activeEntries)(\"gradient\", ctx_r2.gradient)(\"normalized\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClick($event, series_r11));\n    })(\"activate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onActivate($event));\n    })(\"deactivate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"showPercentage\", true)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"normalized\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartNormalizedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c25 = \".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\";\n\nfunction AreaChartStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"activeEntries\", ctx_r2.activeEntries)(\"stacked\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 12);\n    i0.ɵɵlistener(\"select\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onClick($event, series_r11));\n    })(\"activate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onActivate($event));\n    })(\"deactivate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r16.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r18.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartStackedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"stacked\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 13);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartStackedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r21.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, AreaChartStackedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c26 = [\"ngx-charts-bar\", \"\"];\n\nfunction BarComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c27 = [\"ngx-charts-bar-label\", \"\"];\nconst _c28 = [\"ngx-charts-series-horizontal\", \"\"];\n\nfunction SeriesHorizontal__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesHorizontal__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.click($event));\n    })(\"activate\", function SeriesHorizontal__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activate.emit($event));\n    })(\"deactivate\", function SeriesHorizontal__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", ctx_r0.barOrientation.Horizontal)(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"ariaLabel\", bar_r2.ariaLabel)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesHorizontal__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const i_r9 = restoredCtx.index;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.dataLabelWidthChanged.emit({\n        size: $event,\n        index: i_r9\n      }));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", ctx_r7.barOrientation.Horizontal);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.valueScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.groupScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxWidthChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r8.valueScale)(\"activeEntries\", ctx_r8.activeEntries)(\"yScale\", ctx_r8.innerScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"roundEdges\", ctx_r8.roundEdges)(\"animations\", ctx_r8.animations)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontal2DComponent__svg_g_5__svg_g_1_Template, 2, 17, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_6__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxWidthChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r16.valueScale)(\"activeEntries\", ctx_r16.activeEntries)(\"yScale\", ctx_r16.innerScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"seriesName\", group_r17.name)(\"roundEdges\", ctx_r16.roundEdges)(\"animations\", ctx_r16.animations)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontal2DComponent__svg_g_6__svg_g_1_Template, 2, 16, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onClick($event, group_r9));\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onActivate($event, group_r9));\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event, group_r9));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Normalized)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template, 2, 15, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event, group_r15));\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event, group_r15));\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event, group_r15));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r14.groupTransform(group_r15));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r14.barChartType.Normalized)(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"activeEntries\", ctx_r14.activeEntries)(\"colors\", ctx_r14.colors)(\"series\", group_r15.series)(\"dims\", ctx_r14.dims)(\"gradient\", ctx_r14.gradient)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate)(\"seriesName\", group_r15.name)(\"animations\", ctx_r14.animations)(\"noBarWhenZero\", ctx_r14.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template, 2, 14, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxWidthChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Stacked)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"activeEntries\", ctx_r8.activeEntries)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template, 2, 17, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxWidthChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r16.barChartType.Stacked)(\"xScale\", ctx_r16.xScale)(\"yScale\", ctx_r16.yScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"activeEntries\", ctx_r16.activeEntries)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"seriesName\", group_r17.name)(\"animations\", ctx_r16.animations)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template, 2, 16, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nconst _c29 = [\"ngx-charts-series-vertical\", \"\"];\n\nfunction SeriesVerticalComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.onClick($event));\n    })(\"activate\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.activate.emit($event));\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx_r3.animations)(\"width\", bar_r4.width)(\"height\", bar_r4.height)(\"x\", bar_r4.x)(\"y\", bar_r4.y)(\"fill\", bar_r4.color)(\"stops\", bar_r4.gradientStops)(\"data\", bar_r4.data)(\"orientation\", ctx_r3.barOrientation.Vertical)(\"roundEdges\", bar_r4.roundEdges)(\"gradient\", ctx_r3.gradient)(\"ariaLabel\", bar_r4.ariaLabel)(\"isActive\", ctx_r3.isActive(bar_r4.data))(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipPlacement\", ctx_r3.tooltipPlacement)(\"tooltipType\", ctx_r3.tooltipType)(\"tooltipTitle\", ctx_r3.tooltipTemplate ? undefined : bar_r4.tooltipText)(\"tooltipTemplate\", ctx_r3.tooltipTemplate)(\"tooltipContext\", bar_r4.data)(\"noBarWhenZero\", ctx_r3.noBarWhenZero)(\"animations\", ctx_r3.animations);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_0__svg_g_1_Template, 1, 22, \"g\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.bars)(\"ngForTrackBy\", ctx_r0.trackBy);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event));\n    })(\"activate\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.activate.emit($event));\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"width\", bar_r10.width)(\"height\", bar_r10.height)(\"x\", bar_r10.x)(\"y\", bar_r10.y)(\"fill\", bar_r10.color)(\"stops\", bar_r10.gradientStops)(\"data\", bar_r10.data)(\"orientation\", ctx_r9.barOrientation.Vertical)(\"roundEdges\", bar_r10.roundEdges)(\"gradient\", ctx_r9.gradient)(\"ariaLabel\", bar_r10.ariaLabel)(\"isActive\", ctx_r9.isActive(bar_r10.data))(\"tooltipDisabled\", ctx_r9.tooltipDisabled)(\"tooltipPlacement\", ctx_r9.tooltipPlacement)(\"tooltipType\", ctx_r9.tooltipType)(\"tooltipTitle\", ctx_r9.tooltipTemplate ? undefined : bar_r10.tooltipText)(\"tooltipTemplate\", ctx_r9.tooltipTemplate)(\"tooltipContext\", bar_r10.data)(\"noBarWhenZero\", ctx_r9.noBarWhenZero)(\"animations\", ctx_r9.animations);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1__svg_g_1_Template, 1, 20, \"g\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.bars)(\"ngForTrackBy\", ctx_r1.trackBy);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_2__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesVerticalComponent__svg_g_2__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const i_r17 = restoredCtx.index;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.dataLabelHeightChanged.emit({\n        size: $event,\n        index: i_r17\n      }));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r16 = ctx.$implicit;\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r16.x)(\"barY\", b_r16.y)(\"barWidth\", b_r16.width)(\"barHeight\", b_r16.height)(\"value\", b_r16.total)(\"valueFormatting\", ctx_r15.dataLabelFormatting)(\"orientation\", ctx_r15.barOrientation.Vertical);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_2__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.barsForDataLabels)(\"ngForTrackBy\", ctx_r2.trackDataLabelBy);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.groupScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.valueScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxHeightChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"activeEntries\", ctx_r8.activeEntries)(\"xScale\", ctx_r8.innerScale)(\"yScale\", ctx_r8.valueScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"seriesName\", group_r9.name)(\"roundEdges\", ctx_r8.roundEdges)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVertical2DComponent__svg_g_5__svg_g_1_Template, 1, 17, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_6__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxHeightChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"activeEntries\", ctx_r16.activeEntries)(\"xScale\", ctx_r16.innerScale)(\"yScale\", ctx_r16.valueScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"seriesName\", group_r17.name)(\"roundEdges\", ctx_r16.roundEdges)(\"animations\", ctx_r16.animations)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVertical2DComponent__svg_g_6__svg_g_1_Template, 1, 16, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onClick($event, group_r9));\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onActivate($event, group_r9));\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event, group_r9));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Normalized)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template, 2, 15, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event, group_r15));\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event, group_r15));\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event, group_r15));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r14.groupTransform(group_r15));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r14.barChartType.Normalized)(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"activeEntries\", ctx_r14.activeEntries)(\"colors\", ctx_r14.colors)(\"series\", group_r15.series)(\"dims\", ctx_r14.dims)(\"gradient\", ctx_r14.gradient)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate)(\"seriesName\", group_r15.name)(\"animations\", ctx_r14.animations)(\"noBarWhenZero\", ctx_r14.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template, 2, 14, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.onClick($event, group_r9));\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onActivate($event, group_r9));\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onDeactivate($event, group_r9));\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r15.onDataLabelMaxHeightChanged($event, index_r10));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Stacked)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalStackedComponent__svg_g_4__svg_g_1_Template, 2, 17, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onClick($event, group_r17));\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r21.onActivate($event, group_r17));\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onDeactivate($event, group_r17));\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDataLabelMaxHeightChanged($event, index_r18));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r16.barChartType.Stacked)(\"xScale\", ctx_r16.xScale)(\"yScale\", ctx_r16.yScale)(\"activeEntries\", ctx_r16.activeEntries)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"seriesName\", group_r17.name)(\"animations\", ctx_r16.animations)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalStackedComponent__svg_g_5__svg_g_1_Template, 2, 16, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nconst _c30 = [\"ngx-charts-box\", \"\"];\n\nfunction BoxComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.BarOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction BoxComponent__svg_line_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 6);\n  }\n\n  if (rf & 2) {\n    const line_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"hidden\", ctx_r1.hideBar);\n    i0.ɵɵattribute(\"x1\", line_r2.v1.x)(\"y1\", line_r2.v1.y)(\"x2\", line_r2.v2.x)(\"y2\", line_r2.v2.y)(\"stroke\", ctx_r1.strokeColor)(\"stroke-width\", i_r3 === 2 ? ctx_r1.medianLineWidth : ctx_r1.whiskerStrokeWidth)(\"mask\", i_r3 ? undefined : ctx_r1.maskLine);\n  }\n}\n\nconst _c31 = [\"ngx-charts-box-series\", \"\"];\n\nfunction BoxChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 5);\n    i0.ɵɵlistener(\"activate\", function BoxChartComponent__svg_g_5_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onActivate($event));\n    })(\"deactivate\", function BoxChartComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onDeactivate($event));\n    })(\"select\", function BoxChartComponent__svg_g_5_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.onClick($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const result_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"yScale\", ctx_r0.yScale)(\"colors\", ctx_r0.colors)(\"roundEdges\", ctx_r0.roundEdges)(\"strokeColor\", ctx_r0.strokeColor)(\"strokeWidth\", ctx_r0.strokeWidth)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"series\", result_r1)(\"dims\", ctx_r0.dims)(\"animations\", ctx_r0.animations)(\"gradient\", ctx_r0.gradient);\n  }\n}\n\nconst _c32 = [\"ngx-charts-bubble-series\", \"\"];\n\nfunction BubbleSeriesComponent__svg_g_0__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_select_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick(circle_r1.data));\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_activate_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.activateCircle(circle_r1));\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_deactivate_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.deactivateCircle(circle_r1));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    i0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipPlacement\", ctx_r2.placementTypes.Top)(\"tooltipType\", ctx_r2.styleTypes.tooltip)(\"tooltipTitle\", ctx_r2.tooltipTemplate ? undefined : ctx_r2.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\n\nfunction BubbleSeriesComponent__svg_g_0__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_select_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onClick(circle_r1.data));\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_activate_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r15.activateCircle(circle_r1));\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_deactivate_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r17.deactivateCircle(circle_r1));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    i0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    i0.ɵɵproperty(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipPlacement\", ctx_r3.placementTypes.Top)(\"tooltipType\", ctx_r3.styleTypes.tooltip)(\"tooltipTitle\", ctx_r3.tooltipTemplate ? undefined : ctx_r3.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r3.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\n\nfunction BubbleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\");\n    i0.ɵɵtemplate(2, BubbleSeriesComponent__svg_g_0__svg_g_2_Template, 1, 18, \"g\", 1);\n    i0.ɵɵtemplate(3, BubbleSeriesComponent__svg_g_0__svg_g_3_Template, 1, 17, \"g\", 1);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"transform\", circle_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isSSR);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSSR);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r0.showGridLines)(\"dims\", ctx_r0.dims)(\"xScale\", ctx_r0.xScale)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r1.showGridLines)(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const series_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.onClick($event, series_r9));\n    })(\"activate\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onActivate($event));\n    })(\"deactivate\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"rScale\", ctx_r8.rScale)(\"xScaleType\", ctx_r8.xScaleType)(\"yScaleType\", ctx_r8.yScaleType)(\"xAxisLabel\", ctx_r8.xAxisLabel)(\"yAxisLabel\", ctx_r8.yAxisLabel)(\"colors\", ctx_r8.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r8.activeEntries)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BubbleChartComponent__svg_g_8__svg_g_1_Template, 2, 13, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"clip-path\", ctx_r2.clipPath);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.data)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const series_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event, series_r15));\n    })(\"activate\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event));\n    })(\"deactivate\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"rScale\", ctx_r14.rScale)(\"xScaleType\", ctx_r14.xScaleType)(\"yScaleType\", ctx_r14.yScaleType)(\"xAxisLabel\", ctx_r14.xAxisLabel)(\"yAxisLabel\", ctx_r14.yAxisLabel)(\"colors\", ctx_r14.colors)(\"data\", series_r15)(\"activeEntries\", ctx_r14.activeEntries)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BubbleChartComponent__svg_g_9__svg_g_1_Template, 2, 12, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"clip-path\", ctx_r3.clipPath);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.data)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nconst _c33 = [\"ngx-charts-heat-map-cell\", \"\"];\n\nfunction HeatMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c34 = [\"ngx-charts-heat-map-cell-series\", \"\"];\n\nconst _c35 = function (a0, a1, a2) {\n  return {\n    series: a0,\n    name: a1,\n    value: a2\n  };\n};\n\nfunction HeatCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClick(c_r1.cell));\n    })(\"activate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.activate.emit(c_r1.cell));\n    })(\"deactivate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deactivate.emit(c_r1.cell));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"data\", c_r1.data)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", i0.ɵɵpureFunction3(14, _c35, c_r1.series, c_r1.label, c_r1.data));\n  }\n}\n\nfunction HeatMapComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\");\n  }\n\n  if (rf & 2) {\n    const rect_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"x\", rect_r7.x)(\"y\", rect_r7.y)(\"rx\", rect_r7.rx)(\"width\", rect_r7.width)(\"height\", rect_r7.height)(\"fill\", rect_r7.fill);\n  }\n}\n\nconst _c36 = [\"ngx-charts-line\", \"\"];\n\nfunction LineComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"path\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"d\", ctx_r0.initialPath)(\"fill\", ctx_r0.fill)(\"stroke\", ctx_r0.stroke);\n  }\n}\n\nfunction LineComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"path\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", ctx_r1.initialPath)(\"fill\", ctx_r1.fill)(\"stroke\", ctx_r1.stroke);\n  }\n}\n\nconst _c37 = [\"ngx-charts-line-series\", \"\"];\n\nfunction LineSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction LineSeriesComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", ctx_r1.isActive(ctx_r1.data))(\"inactive\", ctx_r1.isInactive(ctx_r1.data));\n    i0.ɵɵproperty(\"data\", ctx_r1.data)(\"path\", ctx_r1.outerPath)(\"fill\", ctx_r1.hasGradient ? ctx_r1.gradientUrl : ctx_r1.colors.getColor(ctx_r1.data.name))(\"opacity\", ctx_r1.rangeFillOpacity)(\"animations\", ctx_r1.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.updateXAxisHeight($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"wrapTicks\", ctx_r0.wrapTicks);\n  }\n}\n\nfunction LineChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"referenceLines\", ctx_r1.referenceLines)(\"showRefLines\", ctx_r1.showRefLines)(\"showRefLabels\", ctx_r1.showRefLabels)(\"wrapTicks\", ctx_r1.wrapTicks);\n  }\n}\n\nfunction LineChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"data\", series_r11)(\"activeEntries\", ctx_r10.activeEntries)(\"scaleType\", ctx_r10.scaleType)(\"curve\", ctx_r10.curve)(\"rangeFillOpacity\", ctx_r10.rangeFillOpacity)(\"hasRange\", ctx_r10.hasRange)(\"animations\", ctx_r10.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_8__svg_g_1_Template, 2, 11, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction LineChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r12.xScale)(\"yScale\", ctx_r12.yScale)(\"colors\", ctx_r12.colors)(\"data\", series_r13)(\"activeEntries\", ctx_r12.activeEntries)(\"scaleType\", ctx_r12.scaleType)(\"curve\", ctx_r12.curve)(\"rangeFillOpacity\", ctx_r12.rangeFillOpacity)(\"hasRange\", ctx_r12.hasRange)(\"animations\", ctx_r12.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_9__svg_g_1_Template, 2, 10, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction LineChartComponent__svg_g_10__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 14);\n    i0.ɵɵlistener(\"select\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onClick($event));\n    })(\"activate\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r18.onActivate($event));\n    })(\"deactivate\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r19.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"colors\", ctx_r14.colors)(\"data\", series_r15)(\"scaleType\", ctx_r14.scaleType)(\"visibleValue\", ctx_r14.hoveredVertical)(\"activeEntries\", ctx_r14.activeEntries)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate);\n  }\n}\n\nfunction LineChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 11);\n    i0.ɵɵlistener(\"mouseleave\", function LineChartComponent__svg_g_10_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r20.hideCircles());\n    });\n    i0.ɵɵelementStart(1, \"g\", 12);\n    i0.ɵɵlistener(\"hover\", function LineChartComponent__svg_g_10_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r22.updateHoveredVertical($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, LineChartComponent__svg_g_10__svg_g_2_Template, 2, 9, \"g\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r4.dims)(\"xSet\", ctx_r4.xSet)(\"xScale\", ctx_r4.xScale)(\"yScale\", ctx_r4.yScale)(\"results\", ctx_r4.results)(\"colors\", ctx_r4.colors)(\"tooltipDisabled\", ctx_r4.tooltipDisabled)(\"tooltipTemplate\", ctx_r4.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results);\n  }\n}\n\nfunction LineChartComponent__svg_g_11__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r24 = ctx.$implicit;\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r23.timelineXScale)(\"yScale\", ctx_r23.timelineYScale)(\"colors\", ctx_r23.colors)(\"data\", series_r24)(\"scaleType\", ctx_r23.scaleType)(\"curve\", ctx_r23.curve)(\"hasRange\", ctx_r23.hasRange)(\"animations\", ctx_r23.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 15);\n    i0.ɵɵlistener(\"onDomainChange\", function LineChartComponent__svg_g_11_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r25.updateDomain($event));\n    });\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_11__svg_g_1_Template, 2, 8, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r5.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r5.timelineWidth, ctx_r5.height))(\"height\", ctx_r5.timelineHeight)(\"scheme\", ctx_r5.scheme)(\"customColors\", ctx_r5.customColors)(\"scaleType\", ctx_r5.scaleType)(\"legend\", ctx_r5.legend);\n    i0.ɵɵattribute(\"transform\", ctx_r5.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.results)(\"ngForTrackBy\", ctx_r5.trackBy);\n  }\n}\n\nconst _c38 = [\"ngx-charts-pie-label\", \"\"];\nconst _c39 = [\"ngx-charts-polar-series\", \"\"];\n\nfunction PolarSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r0.seriesColor)(\"name\", ctx_r0.gradientId)(\"startOpacity\", 0.25)(\"endOpacity\", 1)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction PolarSeriesComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function PolarSeriesComponent__svg_g_4_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.select.emit(circle_r2.data));\n    })(\"activate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.activate.emit({\n        name: circle_r2.data.series\n      }));\n    })(\"deactivate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.deactivate.emit({\n        name: circle_r2.data.series\n      }));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", ctx_r1.inactive ? 0.2 : 1);\n    i0.ɵɵproperty(\"cx\", circle_r2.cx)(\"cy\", circle_r2.cy)(\"r\", ctx_r1.circleRadius)(\"fill\", circle_r2.color)(\"tooltipDisabled\", ctx_r1.tooltipDisabled)(\"tooltipPlacement\", ctx_r1.placementTypes.Top)(\"tooltipType\", ctx_r1.styleTypes.tooltip)(\"tooltipTitle\", ctx_r1.tooltipTemplate ? undefined : ctx_r1.tooltipText(circle_r2))(\"tooltipTemplate\", ctx_r1.tooltipTemplate)(\"tooltipContext\", circle_r2.data);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 7);\n  }\n\n  if (rf & 2) {\n    const r_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"r\", r_r7);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_4__svg_circle_1_Template, 1, 1, \"circle\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.radiusTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 9);\n  }\n\n  if (rf & 2) {\n    const tick_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"data\", tick_r9)(\"radius\", ctx_r8.outerRadius)(\"label\", tick_r9.label)(\"max\", ctx_r8.outerRadius)(\"value\", ctx_r8.showGridLines ? 1 : ctx_r8.outerRadius)(\"explodeSlices\", true)(\"animations\", ctx_r8.animations)(\"labelTrim\", ctx_r8.labelTrim)(\"labelTrimSize\", ctx_r8.labelTrimSize);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_5__svg_g_1_Template, 1, 9, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.thetaTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"dimensionsChanged\", function PolarChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.updateYAxisWidth($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r2.yAxisScale)(\"dims\", ctx_r2.yAxisDims)(\"showGridLines\", ctx_r2.showGridLines)(\"showLabel\", ctx_r2.showYAxisLabel)(\"labelText\", ctx_r2.yAxisLabel)(\"trimTicks\", ctx_r2.trimYAxisTicks)(\"maxTickLength\", ctx_r2.maxYAxisTickLength)(\"tickFormatting\", ctx_r2.yAxisTickFormatting)(\"wrapTicks\", ctx_r2.wrapTicks);\n    i0.ɵɵattribute(\"transform\", ctx_r2.transformYAxis);\n  }\n}\n\nfunction PolarChartComponent__svg_g_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 11);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r3.xAxisLabel)(\"offset\", ctx_r3.labelOffset)(\"orient\", ctx_r3.orientation.Bottom)(\"height\", ctx_r3.dims.height)(\"width\", ctx_r3.dims.width);\n  }\n}\n\nfunction PolarChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r14.onClick($event));\n    })(\"activate\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r16.onActivate($event));\n    })(\"deactivate\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r17.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"gradient\", ctx_r12.gradient)(\"xScale\", ctx_r12.xScale)(\"yScale\", ctx_r12.yScale)(\"colors\", ctx_r12.colors)(\"data\", series_r13)(\"activeEntries\", ctx_r12.activeEntries)(\"scaleType\", ctx_r12.scaleType)(\"curve\", ctx_r12.curve)(\"rangeFillOpacity\", ctx_r12.rangeFillOpacity)(\"animations\", ctx_r12.animations)(\"tooltipDisabled\", ctx_r12.tooltipDisabled)(\"tooltipTemplate\", ctx_r12.tooltipTemplate);\n  }\n}\n\nfunction PolarChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_8__svg_g_1_Template, 2, 13, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r4.transformPlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nfunction PolarChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r20.onClick($event));\n    })(\"activate\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r22.onActivate($event));\n    })(\"deactivate\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r23.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const series_r19 = ctx.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"gradient\", ctx_r18.gradient)(\"xScale\", ctx_r18.xScale)(\"yScale\", ctx_r18.yScale)(\"colors\", ctx_r18.colors)(\"data\", series_r19)(\"activeEntries\", ctx_r18.activeEntries)(\"scaleType\", ctx_r18.scaleType)(\"curve\", ctx_r18.curve)(\"rangeFillOpacity\", ctx_r18.rangeFillOpacity)(\"animations\", ctx_r18.animations)(\"tooltipDisabled\", ctx_r18.tooltipDisabled)(\"tooltipTemplate\", ctx_r18.tooltipTemplate);\n  }\n}\n\nfunction PolarChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_9__svg_g_1_Template, 2, 12, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r5.transformPlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.results)(\"ngForTrackBy\", ctx_r5.trackBy);\n  }\n}\n\nconst _c40 = [\"ngx-charts-pie-arc\", \"\"];\n\nfunction PieArcComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"color\", ctx_r0.fill)(\"name\", ctx_r0.radialGradientId)(\"startOpacity\", ctx_r0.startOpacity);\n  }\n}\n\nconst _c41 = [\"ngx-charts-pie-series\", \"\"];\n\nfunction PieSeriesComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const arc_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", arc_r1)(\"radius\", ctx_r2.outerRadius)(\"color\", ctx_r2.color(arc_r1))(\"label\", ctx_r2.labelText(arc_r1))(\"labelTrim\", ctx_r2.trimLabels)(\"labelTrimSize\", ctx_r2.maxLabelLength)(\"max\", ctx_r2.max)(\"value\", arc_r1.value)(\"explodeSlices\", ctx_r2.explodeSlices)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction PieSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PieSeriesComponent__svg_g_0__svg_g_1_Template, 1, 10, \"g\", 1);\n    i0.ɵɵelementStart(2, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieSeriesComponent__svg_g_0_Template__svg_g_select_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    })(\"activate\", function PieSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.activate.emit($event));\n    })(\"deactivate\", function PieSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.deactivate.emit($event));\n    })(\"dblclick\", function PieSeriesComponent__svg_g_0_Template__svg_g_dblclick_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.dblclick.emit($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.labelVisible(arc_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"gradient\", ctx_r0.gradient)(\"data\", arc_r1.data)(\"max\", ctx_r0.max)(\"explodeSlices\", ctx_r0.explodeSlices)(\"isActive\", ctx_r0.isActive(arc_r1.data))(\"animate\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.getTooltipTitle(arc_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", arc_r1.data);\n  }\n}\n\nconst _c42 = \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\";\nconst _c43 = [\"ngx-charts-pie-grid-series\", \"\"];\n\nfunction PieGridSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClick($event));\n    })(\"activate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.activate.emit($event));\n    })(\"deactivate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.deactivate.emit($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"data\", arc_r1.data)(\"gradient\", false)(\"pointerEvents\", arc_r1.pointerEvents)(\"animate\", arc_r1.animate);\n    i0.ɵɵattribute(\"class\", arc_r1.class);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 10);\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", series_r1.percent)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.percent.toLocaleString(), \" \");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 12);\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", series_r1.total)(\"countPrefix\", ctx_r4.label + \": \");\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r5.label, \": \", series_r1.total.toLocaleString(), \" \");\n  }\n}\n\nconst _c44 = function (a0) {\n  return {\n    data: a0\n  };\n};\n\nfunction PieGridComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3)(1, \"g\", 4);\n    i0.ɵɵlistener(\"select\", function PieGridComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onClick($event));\n    })(\"activate\", function PieGridComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.onActivate($event));\n    })(\"deactivate\", function PieGridComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, PieGridComponent__svg_g_2__svg_text_2_Template, 1, 2, \"text\", 5);\n    i0.ɵɵtemplate(3, PieGridComponent__svg_g_2__svg_text_3_Template, 2, 1, \"text\", 6);\n    i0.ɵɵelementStart(4, \"text\", 7);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, PieGridComponent__svg_g_2__svg_text_6_Template, 1, 3, \"text\", 8);\n    i0.ɵɵtemplate(7, PieGridComponent__svg_g_2__svg_text_7_Template, 2, 3, \"text\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", series_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"colors\", series_r1.colors)(\"data\", series_r1.data)(\"innerRadius\", series_r1.innerRadius)(\"outerRadius\", series_r1.outerRadius)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(i0.ɵɵpureFunction1(17, _c44, series_r1)))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", series_r1.data[0].data);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n  }\n}\n\nconst _c45 = [\"textEl\"];\nconst _c46 = [\"ngx-charts-card\", \"\"];\n\nfunction CardComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"fill\", ctx_r0.bandColor)(\"transform\", ctx_r0.transformBand)(\"d\", ctx_r0.bandPath);\n  }\n}\n\nconst _c47 = [\"ngx-charts-card-series\", \"\"];\n\nfunction CardSeriesComponent__svg_rect_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 2);\n  }\n\n  if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"fill\", ctx_r0.emptyColor);\n    i0.ɵɵattribute(\"x\", c_r2.x)(\"y\", c_r2.y)(\"width\", c_r2.width)(\"height\", c_r2.height);\n  }\n}\n\nfunction CardSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CardSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r3.x)(\"y\", c_r3.y)(\"width\", c_r3.width)(\"height\", c_r3.height)(\"color\", c_r3.color)(\"bandColor\", c_r3.bandColor)(\"textColor\", c_r3.textColor)(\"data\", c_r3.data)(\"label\", c_r3.label)(\"medianSize\", ctx_r1.medianSize)(\"valueFormatting\", ctx_r1.valueFormatting)(\"labelFormatting\", ctx_r1.labelFormatting)(\"animations\", ctx_r1.animations);\n  }\n}\n\nconst _c48 = [\"ngx-charts-tree-map-cell\", \"\"];\n\nfunction TreeMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"countTo\", ctx_r2.value)(\"valueFormatting\", ctx_r2.valueFormatting);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.formattedValue, \" \");\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"foreignObject\", 4);\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵelement(2, \"span\", 5)(3, \"br\");\n    i0.ɵɵtemplate(4, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template, 1, 2, \"span\", 6);\n    i0.ɵɵtemplate(5, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template, 2, 1, \"span\", 7);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"pointer-events\", \"none\");\n    i0.ɵɵattribute(\"x\", ctx_r1.x)(\"y\", ctx_r1.y)(\"width\", ctx_r1.width)(\"height\", ctx_r1.height);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"color\", ctx_r1.getTextColor())(\"height\", ctx_r1.height + \"px\")(\"width\", ctx_r1.width + \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.formattedLabel, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.animations);\n  }\n}\n\nconst _c49 = [\"ngx-charts-tree-map-cell-series\", \"\"];\n\nfunction TreeMapCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function TreeMapCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.onClick($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", c_r1.data)(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"label\", c_r1.label)(\"value\", c_r1.value)(\"valueFormatting\", ctx_r0.valueFormatting)(\"labelFormatting\", ctx_r0.labelFormatting)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", c_r1.data);\n  }\n}\n\nconst _c50 = [\"valueTextEl\"];\nconst _c51 = [\"unitsTextEl\"];\n\nfunction LinearGaugeComponent__svg_line_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.transformLine)(\"stroke\", ctx_r0.colors.getColor(ctx_r0.units));\n  }\n}\n\nfunction LinearGaugeComponent__svg_line_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 11);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transformLine)(\"stroke\", ctx_r1.colors.getColor(ctx_r1.units));\n  }\n}\n\nconst _c52 = function () {\n  return {};\n};\n\nconst _c53 = [\"ngx-charts-gauge-arc\", \"\"];\nconst _c54 = [\"ngx-charts-gauge-axis\", \"\"];\n\nfunction GaugeAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r3.line);\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2)(1, \"text\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const tick_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"text-anchor\", tick_r4.textAnchor);\n    i0.ɵɵattribute(\"transform\", tick_r4.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tick_r4.text, \" \");\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r5.line);\n  }\n}\n\nfunction GaugeComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\")(1, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function GaugeComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onClick($event));\n    })(\"activate\", function GaugeComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onActivate($event));\n    })(\"deactivate\", function GaugeComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.onDeactivate($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const arc_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.rotation);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"backgroundArc\", arc_r3.backgroundArc)(\"valueArc\", arc_r3.valueArc)(\"cornerRadius\", ctx_r0.cornerRadius)(\"colors\", ctx_r0.colors)(\"isActive\", ctx_r0.isActive(arc_r3.valueArc.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"valueFormatting\", ctx_r0.valueFormatting)(\"animations\", ctx_r0.animations);\n  }\n}\n\nfunction GaugeComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"bigSegments\", ctx_r1.bigSegments)(\"smallSegments\", ctx_r1.smallSegments)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"radius\", ctx_r1.outerRadius)(\"angleSpan\", ctx_r1.angleSpan)(\"valueScale\", ctx_r1.valueScale)(\"startAngle\", ctx_r1.startAngle)(\"tickFormatting\", ctx_r1.axisTickFormatting);\n  }\n}\n\nfunction GaugeComponent__svg_text_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 7, 8)(2, \"tspan\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"tspan\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.textTransform);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.displayValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.units);\n  }\n}\n\nfunction SankeyComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5)(1, \"defs\")(2, \"linearGradient\", 6);\n    i0.ɵɵelement(3, \"stop\", 7)(4, \"stop\", 8);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(5, \"path\", 9);\n    i0.ɵɵlistener(\"click\", function SankeyComponent__svg_g_2_Template__svg_path_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const link_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.select.emit(link_r3.data));\n    })(\"mouseenter\", function SankeyComponent__svg_g_2_Template__svg_path_mouseenter_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const link_r3 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.activate.emit(link_r3.data));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const link_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipPlacement\", \"top\")(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : link_r3.tooltip)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", link_r3.data);\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"id\", link_r3.id)(\"x1\", link_r3.source.x1)(\"x2\", link_r3.target.x0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"stop-color\", link_r3.startColor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"stop-color\", link_r3.endColor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", link_r3.path)(\"stroke\", link_r3.gradientFill)(\"stroke-width\", link_r3.strokeWidth);\n  }\n}\n\nfunction SankeyComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10)(1, \"rect\", 11);\n    i0.ɵɵlistener(\"click\", function SankeyComponent__svg_g_3_Template__svg_rect_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const rect_r7 = restoredCtx.$implicit;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.select.emit(rect_r7.data));\n    })(\"mouseenter\", function SankeyComponent__svg_g_3_Template__svg_rect_mouseenter_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r9);\n      const rect_r7 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.activate.emit(rect_r7.data));\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const rect_r7 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", rect_r7.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"tooltipDisabled\", ctx_r1.tooltipDisabled)(\"tooltipType\", ctx_r1.styleTypes.tooltip)(\"tooltipPlacement\", \"top\")(\"tooltipTitle\", ctx_r1.tooltipTemplate ? undefined : rect_r7.tooltip)(\"tooltipTemplate\", ctx_r1.tooltipTemplate)(\"tooltipContext\", rect_r7.data);\n    i0.ɵɵattribute(\"x\", 0)(\"y\", 0)(\"width\", rect_r7.width)(\"height\", rect_r7.height)(\"fill\", rect_r7.fill);\n  }\n}\n\nfunction SankeyComponent__svg_g_4__svg_text_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const rect_r11 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵattribute(\"x\", rect_r11.width + 5)(\"y\", rect_r11.height / 2)(\"text-anchor\", rect_r11.labelAnchor)(\"dx\", rect_r11.labelAnchor === \"end\" ? -25 : 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", rect_r11.label, \" \");\n  }\n}\n\nfunction SankeyComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SankeyComponent__svg_g_4__svg_text_1_Template, 2, 5, \"text\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const rect_r11 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", rect_r11.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showLabels && rect_r11.height > 15);\n  }\n}\n\nfunction throttle(func, wait, options) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this; // eslint-disable-next-line prefer-rest-params\n\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\n\n\nfunction throttleable(duration, options) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n        return this[key];\n      }\n    };\n  };\n}\n\nvar PlacementTypes;\n\n(function (PlacementTypes) {\n  PlacementTypes[\"Top\"] = \"top\";\n  PlacementTypes[\"Bottom\"] = \"bottom\";\n  PlacementTypes[\"Left\"] = \"left\";\n  PlacementTypes[\"Right\"] = \"right\";\n  PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Top) {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Bottom) {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Left) {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Right) {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\n\n\nclass PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === PlacementTypes.Top) {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Bottom) {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === PlacementTypes.Left) {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Right) {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n    let flip = false;\n\n    if (placement === PlacementTypes.Right) {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Left) {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Top) {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Bottom) {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static determinePlacement(placement, elmDim, hostDim, spacing) {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.Right) {\n        return PlacementTypes.Left;\n      } else if (placement === PlacementTypes.Left) {\n        return PlacementTypes.Right;\n      } else if (placement === PlacementTypes.Top) {\n        return PlacementTypes.Bottom;\n      } else if (placement === PlacementTypes.Bottom) {\n        return PlacementTypes.Top;\n      }\n    }\n\n    return placement;\n  }\n\n}\n\nclass TooltipContentComponent {\n  constructor(element, renderer, platformId) {\n    this.element = element;\n    this.renderer = renderer;\n    this.platformId = platformId;\n  }\n\n  get cssClasses() {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  ngAfterViewInit() {\n    setTimeout(this.position.bind(this));\n  }\n\n  position() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect(); // if no dims were found, never show\n\n    if (!hostDim.height && !hostDim.width) return;\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    } // animate its entry\n\n\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim) {\n    const {\n      top,\n      left\n    } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim) {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const {\n      top,\n      left\n    } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim) {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  onWindowResize() {\n    this.position();\n  }\n\n}\n\nTooltipContentComponent.ɵfac = function TooltipContentComponent_Factory(t) {\n  return new (t || TooltipContentComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nTooltipContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipContentComponent,\n  selectors: [[\"ngx-tooltip-content\"]],\n  viewQuery: function TooltipContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.caretElm = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function TooltipContentComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function TooltipContentComponent_resize_HostBindingHandler() {\n        return ctx.onWindowResize();\n      }, false, i0.ɵɵresolveWindow);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClasses);\n    }\n  },\n  inputs: {\n    host: \"host\",\n    showCaret: \"showCaret\",\n    type: \"type\",\n    placement: \"placement\",\n    alignment: \"alignment\",\n    spacing: \"spacing\",\n    cssClass: \"cssClass\",\n    title: \"title\",\n    template: \"template\",\n    context: \"context\"\n  },\n  decls: 6,\n  vars: 6,\n  consts: [[3, \"hidden\"], [\"caretElm\", \"\"], [1, \"tooltip-content\"], [4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n  template: function TooltipContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"span\", 0, 1);\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, TooltipContentComponent_span_4_Template, 2, 4, \"span\", 3);\n      i0.ɵɵtemplate(5, TooltipContentComponent_span_5_Template, 1, 1, \"span\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMapInterpolate1(\"tooltip-caret position-\", ctx.placement, \"\");\n      i0.ɵɵproperty(\"hidden\", !ctx.showCaret);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.title);\n    }\n  },\n  dependencies: [i2.NgIf, i2.NgTemplateOutlet],\n  styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"],\n  encapsulation: 2\n});\n\n__decorate([throttleable(100)], TooltipContentComponent.prototype, \"onWindowResize\", null);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-tooltip-content',\n      template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    host: [{\n      type: Input\n    }],\n    showCaret: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    placement: [{\n      type: Input\n    }],\n    alignment: [{\n      type: Input\n    }],\n    spacing: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    caretElm: [{\n      type: ViewChild,\n      args: ['caretElm']\n    }],\n    cssClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    onWindowResize: [{\n      type: HostListener,\n      args: ['window:resize']\n    }]\n  });\n})();\n\nclass InjectionRegisteryService {\n  constructor(injectionService) {\n    this.injectionService = injectionService;\n    this.defaults = {};\n    this.components = new Map();\n  }\n\n  getByType(type = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings) {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type, bindings) {\n    bindings = this.assignDefaults(bindings);\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n    return component;\n  }\n\n  destroy(instance) {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll() {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type) {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  injectComponent(type, bindings) {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  assignDefaults(bindings) {\n    const inputs = { ...this.defaults.inputs\n    };\n    const outputs = { ...this.defaults.outputs\n    };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = {\n        inputs: bindings\n      };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs,\n        ...bindings.inputs\n      };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs,\n        ...bindings.outputs\n      };\n    }\n\n    return bindings;\n  }\n\n  register(type, component) {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n\n}\n\nfunction isViewContainerRef(x) {\n  return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n\n\nclass InjectionService {\n  constructor(applicationRef, componentFactoryResolver, injector) {\n    this.applicationRef = applicationRef;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.injector = injector;\n  }\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n\n\n  static setGlobalRootViewContainer(container) {\n    InjectionService.globalRootViewContainer = container;\n  }\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getRootViewContainer() {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n    throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n  }\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n\n\n  setRootViewContainer(container) {\n    this._container = container;\n  }\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getComponentRootNode(component) {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n\n    if (component.hostView && component.hostView.rootNodes.length > 0) {\n      return component.hostView.rootNodes[0];\n    } // the top most component root node has no `hostView`\n\n\n    return component.location.nativeElement;\n  }\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getRootViewContainerNode(component) {\n    return this.getComponentRootNode(component);\n  }\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n\n\n  projectComponentBindings(component, bindings) {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n\n\n  appendComponent(componentClass, bindings = {}, location) {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n    const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n    const portal = new ComponentPortal(componentClass);\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n\n}\n\nInjectionService.globalRootViewContainer = null;\n\nInjectionService.ɵfac = function InjectionService_Factory(t) {\n  return new (t || InjectionService)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector));\n};\n\nInjectionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InjectionService,\n  factory: InjectionService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InjectionService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.ApplicationRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\nclass TooltipService extends InjectionRegisteryService {\n  constructor(injectionService) {\n    super(injectionService);\n    this.type = TooltipContentComponent;\n  }\n\n}\n\nTooltipService.ɵfac = function TooltipService_Factory(t) {\n  return new (t || TooltipService)(i0.ɵɵinject(InjectionService));\n};\n\nTooltipService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TooltipService,\n  factory: TooltipService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: InjectionService\n    }];\n  }, null);\n})();\n\nvar LegendPosition;\n\n(function (LegendPosition) {\n  LegendPosition[\"Right\"] = \"right\";\n  LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\n\nvar LegendType;\n\n(function (LegendType) {\n  LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n  LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n\n(function (ScaleType) {\n  ScaleType[\"Time\"] = \"time\";\n  ScaleType[\"Linear\"] = \"linear\";\n  ScaleType[\"Ordinal\"] = \"ordinal\";\n  ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n  constructor() {\n    this.horizontal = false;\n  }\n\n  ngOnChanges(changes) {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n  }\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n\n\n  gradientString(colors, splits) {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n    return pairs.join(', ');\n  }\n\n}\n\nScaleLegendComponent.ɵfac = function ScaleLegendComponent_Factory(t) {\n  return new (t || ScaleLegendComponent)();\n};\n\nScaleLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ScaleLegendComponent,\n  selectors: [[\"ngx-charts-scale-legend\"]],\n  inputs: {\n    valueRange: \"valueRange\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    horizontal: \"horizontal\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 10,\n  consts: [[1, \"scale-legend\"], [1, \"scale-legend-label\"], [1, \"scale-legend-wrap\"]],\n  template: function ScaleLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(4, \"div\", 2);\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"span\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.horizontal ? undefined : ctx.height, \"px\")(\"width\", ctx.width, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[1].toLocaleString());\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background\", ctx.gradient);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[0].toLocaleString());\n    }\n  },\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScaleLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-scale-legend',\n      template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"]\n    }]\n  }], null, {\n    valueRange: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\n\n\nfunction formatLabel(label) {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\n\n\nfunction escapeLabel(label) {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n\nclass LegendEntryComponent {\n  constructor() {\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.toggle = new EventEmitter();\n  }\n\n  get trimmedLabel() {\n    return this.formattedLabel || '(empty)';\n  }\n\n  onMouseEnter() {\n    this.activate.emit({\n      name: this.label\n    });\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit({\n      name: this.label\n    });\n  }\n\n}\n\nLegendEntryComponent.ɵfac = function LegendEntryComponent_Factory(t) {\n  return new (t || LegendEntryComponent)();\n};\n\nLegendEntryComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendEntryComponent,\n  selectors: [[\"ngx-charts-legend-entry\"]],\n  hostBindings: function LegendEntryComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function LegendEntryComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function LegendEntryComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    color: \"color\",\n    label: \"label\",\n    formattedLabel: \"formattedLabel\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    toggle: \"toggle\"\n  },\n  decls: 4,\n  vars: 6,\n  consts: [[\"tabindex\", \"-1\", 3, \"title\", \"click\"], [1, \"legend-label-color\", 3, \"click\"], [1, \"legend-label-text\"]],\n  template: function LegendEntryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_0_listener() {\n        return ctx.select.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementStart(1, \"span\", 1);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_1_listener() {\n        return ctx.toggle.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵproperty(\"title\", ctx.formattedLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background-color\", ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.trimmedLabel, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendEntryComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend-entry',\n      template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    formattedLabel: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    toggle: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass LegendComponent {\n  constructor(cd) {\n    this.cd = cd;\n    this.horizontal = false;\n    this.labelClick = new EventEmitter();\n    this.labelActivate = new EventEmitter();\n    this.labelDeactivate = new EventEmitter();\n    this.legendEntries = [];\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries() {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nLegendComponent.ɵfac = function LegendComponent_Factory(t) {\n  return new (t || LegendComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendComponent,\n  selectors: [[\"ngx-charts-legend\"]],\n  inputs: {\n    data: \"data\",\n    title: \"title\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    activeEntries: \"activeEntries\",\n    horizontal: \"horizontal\"\n  },\n  outputs: {\n    labelClick: \"labelClick\",\n    labelActivate: \"labelActivate\",\n    labelDeactivate: \"labelDeactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 9,\n  consts: [[\"class\", \"legend-title\", 4, \"ngIf\"], [1, \"legend-wrap\"], [1, \"legend-labels\"], [\"class\", \"legend-label\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"legend-title\"], [1, \"legend-title-text\"], [1, \"legend-label\"], [3, \"label\", \"formattedLabel\", \"color\", \"isActive\", \"select\", \"activate\", \"deactivate\"]],\n  template: function LegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtemplate(1, LegendComponent_header_1_Template, 3, 1, \"header\", 0);\n      i0.ɵɵelementStart(2, \"div\", 1)(3, \"ul\", 2);\n      i0.ɵɵtemplate(4, LegendComponent_li_4_Template, 2, 4, \"li\", 3);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.title == null ? null : ctx.title.length) > 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"max-height\", ctx.height - 45, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendEntries)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [LegendEntryComponent, i2.NgIf, i2.NgForOf],\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend',\n      template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }],\n    labelClick: [{\n      type: Output\n    }],\n    labelActivate: [{\n      type: Output\n    }],\n    labelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ChartComponent {\n  constructor() {\n    this.showLegend = false;\n    this.animations = true;\n    this.legendLabelClick = new EventEmitter();\n    this.legendLabelActivate = new EventEmitter();\n    this.legendLabelDeactivate = new EventEmitter();\n    this.LegendPosition = LegendPosition;\n    this.LegendType = LegendType;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    let legendColumns = 0;\n\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n        if (this.legendType === LegendType.ScaleLegend) {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n    this.chartWidth = Math.floor(this.view[0] * chartColumns / 12.0);\n    this.legendWidth = !this.legendOptions || this.legendOptions.position === LegendPosition.Right ? Math.floor(this.view[0] * legendColumns / 12.0) : this.chartWidth;\n  }\n\n  getLegendType() {\n    return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n  }\n\n}\n\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)();\n};\n\nChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"ngx-charts-chart\"]],\n  inputs: {\n    view: \"view\",\n    showLegend: \"showLegend\",\n    legendOptions: \"legendOptions\",\n    legendType: \"legendType\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    legendLabelClick: \"legendLabelClick\",\n    legendLabelActivate: \"legendLabelActivate\",\n    legendLabelDeactivate: \"legendLabelDeactivate\"\n  },\n  features: [i0.ɵɵProvidersFeature([TooltipService]), i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 5,\n  vars: 8,\n  consts: [[1, \"ngx-charts-outer\"], [1, \"ngx-charts\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\", 4, \"ngIf\"], [1, \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\"], [1, \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"svg\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, ChartComponent_ngx_charts_scale_legend_3_Template, 1, 5, \"ngx-charts-scale-legend\", 2);\n      i0.ɵɵtemplate(4, ChartComponent_ngx_charts_legend_4_Template, 1, 7, \"ngx-charts-legend\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.view[0], \"px\")(\"height\", ctx.view[1], \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.chartWidth)(\"height\", ctx.view[1]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.ScaleLegend);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.Legend);\n    }\n  },\n  dependencies: [ScaleLegendComponent, LegendComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartComponent, [{\n    type: Component,\n    args: [{\n      providers: [TooltipService],\n      selector: 'ngx-charts-chart',\n      template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    view: [{\n      type: Input\n    }],\n    showLegend: [{\n      type: Input\n    }],\n    legendOptions: [{\n      type: Input\n    }],\n    legendType: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    legendLabelClick: [{\n      type: Output\n    }],\n    legendLabelActivate: [{\n      type: Output\n    }],\n    legendLabelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Visibility Observer\n */\n\n\nclass VisibilityObserver {\n  constructor(element, zone) {\n    this.element = element;\n    this.zone = zone;\n    this.visible = new EventEmitter();\n    this.isVisible = false;\n    this.runCheck();\n  }\n\n  destroy() {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange() {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck() {\n    const check = () => {\n      if (!this.element) {\n        return;\n      } // https://davidwalsh.name/offsetheight-visibility\n\n\n      const {\n        offsetHeight,\n        offsetWidth\n      } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n\n}\n\nVisibilityObserver.ɵfac = function VisibilityObserver_Factory(t) {\n  return new (t || VisibilityObserver)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nVisibilityObserver.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: VisibilityObserver,\n  selectors: [[\"visibility-observer\"]],\n  outputs: {\n    visible: \"visible\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(VisibilityObserver, [{\n    type: Directive,\n    args: [{\n      selector: 'visibility-observer'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    visible: [{\n      type: Output\n    }]\n  });\n})();\n\nfunction isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n  constructor(chartElement, zone, cd, platformId) {\n    this.chartElement = chartElement;\n    this.zone = zone;\n    this.cd = cd;\n    this.platformId = platformId;\n    this.scheme = 'cool';\n    this.schemeType = ScaleType.Ordinal;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.animations = false;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.bindWindowResizeEvent(); // listen for visibility of the element for hidden by default scenario\n\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy() {\n    this.unbindEvents();\n\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    } // default values if width or height are 0 or undefined\n\n\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims() {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return {\n        width,\n        height\n      };\n    }\n\n    return null;\n  }\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n\n\n  formatDates() {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n\n      if (isDate(g.label)) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n\n          if (isDate(d.label)) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  unbindEvents() {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  bindWindowResizeEvent() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const source = fromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n\n\n  cloneData(data) {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {};\n\n      if (item['name'] !== undefined) {\n        copy['name'] = item['name'];\n      }\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      if (item['source'] !== undefined) {\n        copy['source'] = item['source'];\n      }\n\n      if (item['target'] !== undefined) {\n        copy['target'] = item['target'];\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n\n}\n\nBaseChartComponent.ɵfac = function BaseChartComponent_Factory(t) {\n  return new (t || BaseChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nBaseChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BaseChartComponent,\n  selectors: [[\"base-chart\"]],\n  inputs: {\n    results: \"results\",\n    view: \"view\",\n    scheme: \"scheme\",\n    schemeType: \"schemeType\",\n    customColors: \"customColors\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 0,\n  template: function BaseChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'base-chart',\n      template: ` <div></div> `\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    results: [{\n      type: Input\n    }],\n    view: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[\"Top\"] = \"top\";\n  Orientation[\"Bottom\"] = \"bottom\";\n  Orientation[\"Left\"] = \"left\";\n  Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n  constructor(element) {\n    this.textHeight = 25;\n    this.margin = 5;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n\n      case Orientation.Bottom:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n\n      case Orientation.Left:\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n\n      case Orientation.Right:\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n\n      default:\n    }\n  }\n\n}\n\nAxisLabelComponent.ɵfac = function AxisLabelComponent_Factory(t) {\n  return new (t || AxisLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nAxisLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AxisLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-axis-label\", \"\"]],\n  inputs: {\n    orient: \"orient\",\n    label: \"label\",\n    offset: \"offset\",\n    width: \"width\",\n    height: \"height\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c3,\n  decls: 2,\n  vars: 6,\n  template: function AxisLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"stroke-width\", ctx.strokeWidth)(\"x\", ctx.x)(\"y\", ctx.y)(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxisLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-axis-label]',\n      template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    orient: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }]\n  });\n})();\n\nfunction trimLabel(s, max = 16) {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n\nfunction getTickLines(label, maxLength, maxLines) {\n  const labelString = (label || '').toString();\n  let totalLines = [];\n\n  if (/\\s/.test(labelString)) {\n    totalLines = labelString.split(/\\s+/).reduce((lines, line) => {\n      const last = (lines.pop() || '') + ' ';\n      return last.length + line.length > maxLength ? [...lines, last.trim(), line.trim()] : [...lines, last + line];\n    }, []);\n  } else {\n    let startIndex = 0;\n\n    while (startIndex < labelString.length) {\n      totalLines.push(labelString.substring(startIndex, startIndex + maxLength));\n      startIndex += maxLength;\n    }\n  }\n\n  if (totalLines.length > maxLines) {\n    totalLines = totalLines.splice(0, maxLines);\n    totalLines[totalLines.length - 1] += '...';\n  }\n\n  return totalLines;\n}\n\nvar TextAnchor;\n\n(function (TextAnchor) {\n  TextAnchor[\"Start\"] = \"start\";\n  TextAnchor[\"Middle\"] = \"middle\";\n  TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.rotateTicks = true;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.verticalSpacing = 20;\n    this.rotateLabels = false;\n    this.innerTickSize = 6;\n    this.outerTickSize = 6;\n    this.tickPadding = 3;\n    this.textAnchor = TextAnchor.Middle;\n    this.maxTicksLength = 0;\n    this.maxAllowedLength = 16;\n    this.height = 0;\n    this.approxHeight = 10;\n    this.maxPossibleLengthForTickIfWrapped = 16;\n  }\n\n  get isWrapTicksSupported() {\n    return this.wrapTicks && this.scale.step;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.dimensionsChanged.emit({\n        height: this.approxHeight\n      });\n      return;\n    }\n\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({\n        height: this.height\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update() {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      // eslint-disable-next-line prefer-spread\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n    this.adjustedScale = this.scale.bandwidth ? function (d) {\n      return this.scale(d) + this.scale.bandwidth() * 0.5;\n    } : this.scale;\n    this.textTransform = '';\n\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = TextAnchor.End;\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = TextAnchor.Middle;\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks) {\n    let angle = 0;\n    this.maxTicksLength = 0;\n\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 7; // need to measure this\n\n    const wordWidth = len * charWidth;\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length); // calculate optimal angle\n\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    let labelHeight = 14;\n\n    if (this.isWrapTicksSupported) {\n      const longestTick = this.ticks.reduce((earlier, current) => current.length > earlier.length ? current : earlier, '');\n      const tickLines = this.tickChunks(longestTick);\n      labelHeight = 14 * (tickLines.length || 1);\n      this.maxPossibleLengthForTickIfWrapped = this.getMaxPossibleLengthForTick(longestTick);\n    }\n\n    const requiredHeight = angle !== 0 ? Math.max(Math.abs(Math.sin(angle * Math.PI / 180)) * this.maxTickLength * charWidth, 10) : labelHeight;\n    this.approxHeight = Math.min(requiredHeight, 200);\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth) {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick) {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform() {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getMaxPossibleLengthForTick(longestLabel) {\n    if (this.scale.bandwidth) {\n      const averageCharacterWidth = 7; // approximate char width\n\n      const maxCharacters = Math.floor(this.scale.bandwidth() / averageCharacterWidth);\n      const truncatedText = longestLabel.slice(0, maxCharacters);\n      return Math.max(truncatedText.length, this.maxTickLength);\n    }\n\n    return this.maxTickLength;\n  }\n\n  tickChunks(label) {\n    if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n      const maxAllowedLines = 5;\n      let maxLines = this.rotateTicks ? Math.floor(this.scale.step() / 14) : maxAllowedLines;\n\n      if (maxLines <= 1) {\n        return [this.tickTrim(label)];\n      }\n\n      let possibleStringLength = Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength);\n\n      if (!isPlatformBrowser(this.platformId)) {\n        possibleStringLength = Math.floor(Math.min(this.approxHeight / maxAllowedLines, Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength)));\n      }\n\n      maxLines = Math.min(maxLines, maxAllowedLines);\n      const lines = getTickLines(label, possibleStringLength, maxLines < 1 ? 1 : maxLines);\n      return lines;\n    }\n\n    return [this.tickTrim(label)];\n  }\n\n}\n\nXAxisTicksComponent.ɵfac = function XAxisTicksComponent_Factory(t) {\n  return new (t || XAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nXAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis-ticks\", \"\"]],\n  viewQuery: function XAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineHeight: \"gridLineHeight\",\n    width: \"width\",\n    rotateTicks: \"rotateTicks\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c5,\n  decls: 4,\n  vars: 2,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [4, \"ngIf\"], [\"stroke-width\", \"0.01\", \"font-size\", \"12px\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"tmplMultilineTick\", \"\"], [\"tmplSinglelineTick\", \"\"], [\"x\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"x\", \"0\"], [\"y2\", \"0\", 1, \"gridline-path\", \"gridline-path-vertical\"]],\n  template: function XAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, XAxisTicksComponent__svg_g_2_Template, 2, 2, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, XAxisTicksComponent__svg_g_3_Template, 2, 2, \"g\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineHeight: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nclass XAxisComponent {\n  constructor() {\n    this.rotateTicks = true;\n    this.showGridLines = false;\n    this.xOrient = Orientation.Bottom;\n    this.xAxisOffset = 0;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.xAxisClassName = 'x axis';\n    this.labelOffset = 0;\n    this.fill = 'none';\n    this.stroke = 'stroke';\n    this.tickStroke = '#ccc';\n    this.strokeWidth = 'none';\n    this.padding = 5;\n    this.orientation = Orientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({\n    height\n  }) {\n    const newLabelOffset = height + 25 + 5;\n\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          height\n        });\n      }, 0);\n    }\n  }\n\n}\n\nXAxisComponent.ɵfac = function XAxisComponent_Factory(t) {\n  return new (t || XAxisComponent)();\n};\n\nXAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis\", \"\"]],\n  viewQuery: function XAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(XAxisTicksComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    xScale: \"xScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    rotateTicks: \"rotateTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    ticks: \"ticks\",\n    xAxisTickCount: \"xAxisTickCount\",\n    xOrient: \"xOrient\",\n    xAxisOffset: \"xAxisOffset\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c6,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function XAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, XAxisComponent__svg_g_1_Template, 1, 13, \"g\", 0);\n      i0.ɵɵtemplate(2, XAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.xAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  dependencies: [XAxisTicksComponent, AxisLabelComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis]',\n      template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    xScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    xAxisTickCount: [{\n      type: Input\n    }],\n    xOrient: [{\n      type: Input\n    }],\n    xAxisOffset: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [XAxisTicksComponent]\n    }]\n  });\n})();\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\n\n\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n  let retval = '';\n  w = Math.floor(w);\n  h = Math.floor(h);\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n  return retval;\n}\n\nclass YAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.showRefLabels = false;\n    this.showRefLines = false;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.innerTickSize = 6;\n    this.tickPadding = 3;\n    this.verticalSpacing = 20;\n    this.textAnchor = TextAnchor.Middle;\n    this.width = 0;\n    this.outerTickSize = 6;\n    this.rotateLabels = false;\n    this.referenceLineLength = 0;\n    this.Orientation = Orientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.width = this.getApproximateAxisWidth();\n      this.dimensionsChanged.emit({\n        width: this.width\n      });\n      return;\n    }\n\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({\n        width\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update() {\n    const scale = this.scale;\n    const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      // eslint-disable-next-line prefer-spread\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth ? d => {\n      // position the tick to middle considering number of lines of the tick\n      const positionMiddle = scale(d) + scale.bandwidth() * 0.5;\n\n      if (this.wrapTicks && d.toString().length > this.maxTickLength) {\n        const chunksLength = this.tickChunks(d).length;\n\n        if (chunksLength === 1) {\n          return positionMiddle;\n        }\n\n        const bandWidth = scale.bandwidth();\n        const heightOfLines = chunksLength * 8;\n        const availableFreeSpace = bandWidth * 0.5 - heightOfLines * 0.5;\n        return scale(d) + availableFreeSpace;\n      }\n\n      return positionMiddle;\n    } : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n\n      case Orientation.Bottom:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n\n      case Orientation.Left:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n\n        this.textAnchor = TextAnchor.End;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n\n      case Orientation.Right:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n\n        this.textAnchor = TextAnchor.Start;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n\n      default:\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines() {\n    this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n    this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n    this.referenceLineLength = this.referenceLines.length;\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [false, false, false, false]);\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight) {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick) {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform() {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getApproximateAxisWidth() {\n    const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n    const charWidth = 7;\n    return maxChars * charWidth;\n  }\n\n  tickChunks(label) {\n    if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n      // for y-axis the width of the tick is fixed\n      const preferredWidth = this.maxTickLength;\n      const maxLines = Math.floor(this.scale.bandwidth() / 15);\n\n      if (maxLines <= 1) {\n        return [this.tickTrim(label)];\n      }\n\n      return getTickLines(label, preferredWidth, Math.min(maxLines, 5));\n    }\n\n    return [this.tickFormat(label)];\n  }\n\n}\n\nYAxisTicksComponent.ɵfac = function YAxisTicksComponent_Factory(t) {\n  return new (t || YAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nYAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis-ticks\", \"\"]],\n  viewQuery: function YAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineWidth: \"gridLineWidth\",\n    height: \"height\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    showRefLines: \"showRefLines\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c7,\n  decls: 6,\n  vars: 4,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"reference-area\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [4, \"ngIf\"], [\"stroke-width\", \"0.01\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"tmplMultilineTick\", \"\"], [\"tmplSinglelineTick\", \"\"], [4, \"ngIf\", \"ngIfElse\"], [\"x\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"x\", \"0\"], [1, \"reference-area\"], [\"class\", \"gridline-path gridline-path-horizontal\", \"x1\", \"0\", 4, \"ngIf\"], [\"x1\", \"0\", 1, \"gridline-path\", \"gridline-path-horizontal\"], [\"x1\", \"0\", 1, \"refline-path\", \"gridline-path-horizontal\"], [1, \"refline-label\"]],\n  template: function YAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_2_Template, 2, 2, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, YAxisTicksComponent__svg_path_3_Template, 1, 2, \"path\", 2);\n      i0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_4_Template, 2, 2, \"g\", 3);\n      i0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.referenceLineLength > 1 && ctx.refMax && ctx.refMin && ctx.showRefLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.referenceLines);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineWidth: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nclass YAxisComponent {\n  constructor() {\n    this.showGridLines = false;\n    this.yOrient = Orientation.Left;\n    this.yAxisOffset = 0;\n    this.wrapTicks = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.yAxisClassName = 'y axis';\n    this.labelOffset = 15;\n    this.fill = 'none';\n    this.stroke = '#CCC';\n    this.tickStroke = '#CCC';\n    this.strokeWidth = 1;\n    this.padding = 5;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.offset = -(this.yAxisOffset + this.padding);\n\n    if (this.yOrient === Orientation.Right) {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({\n    width\n  }) {\n    if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    }\n  }\n\n}\n\nYAxisComponent.ɵfac = function YAxisComponent_Factory(t) {\n  return new (t || YAxisComponent)();\n};\n\nYAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis\", \"\"]],\n  viewQuery: function YAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(YAxisTicksComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    yScale: \"yScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    ticks: \"ticks\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    yAxisTickCount: \"yAxisTickCount\",\n    yOrient: \"yOrient\",\n    referenceLines: \"referenceLines\",\n    showRefLines: \"showRefLines\",\n    showRefLabels: \"showRefLabels\",\n    yAxisOffset: \"yAxisOffset\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c8,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function YAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, YAxisComponent__svg_g_1_Template, 1, 15, \"g\", 0);\n      i0.ɵɵtemplate(2, YAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.yAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  dependencies: [YAxisTicksComponent, AxisLabelComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis]',\n      template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    yScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    yAxisTickCount: [{\n      type: Input\n    }],\n    yOrient: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    yAxisOffset: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [YAxisTicksComponent]\n    }]\n  });\n})();\n\nclass AxesModule {}\n\nAxesModule.ɵfac = function AxesModule_Factory(t) {\n  return new (t || AxesModule)();\n};\n\nAxesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AxesModule\n});\nAxesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n      exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n    }]\n  }], null, null);\n})();\n\nvar StyleTypes;\n\n(function (StyleTypes) {\n  StyleTypes[\"popover\"] = \"popover\";\n  StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n\n(function (ShowTypes) {\n  ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n  ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n  ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n  constructor(tooltipService, viewContainerRef, renderer) {\n    this.tooltipService = tooltipService;\n    this.viewContainerRef = viewContainerRef;\n    this.renderer = renderer;\n    this.tooltipCssClass = '';\n    this.tooltipAppendToBody = true;\n    this.tooltipSpacing = 10;\n    this.tooltipDisabled = false;\n    this.tooltipShowCaret = true;\n    this.tooltipPlacement = PlacementTypes.Top;\n    this.tooltipAlignment = PlacementTypes.Center;\n    this.tooltipType = StyleTypes.popover;\n    this.tooltipCloseOnClickOutside = true;\n    this.tooltipCloseOnMouseLeave = true;\n    this.tooltipHideTimeout = 300;\n    this.tooltipShowTimeout = 100;\n    this.tooltipShowEvent = ShowTypes.all;\n    this.tooltipImmediateExit = false;\n    this.show = new EventEmitter();\n    this.hide = new EventEmitter();\n  }\n\n  get listensForFocus() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  get listensForHover() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  ngOnDestroy() {\n    this.hideTooltip(true);\n  }\n\n  onFocus() {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  onBlur() {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  onMouseEnter() {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  onMouseLeave(target) {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate) {\n    if (this.component || this.tooltipDisabled) return;\n    const time = immediate ? 0 : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 400 : 0);\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options); // add a tiny timeout to avoid event re-triggers\n\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip) {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    }); // content mouse leave listener\n\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    } // content close on click outside\n\n\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate = false) {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent(); // emit events\n\n      this.hide.emit(true); // destroy component\n\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  createBoundOptions() {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n\n}\n\nTooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n  return new (t || TooltipDirective)(i0.ɵɵdirectiveInject(TooltipService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nTooltipDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TooltipDirective,\n  selectors: [[\"\", \"ngx-tooltip\", \"\"]],\n  hostBindings: function TooltipDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function TooltipDirective_focusin_HostBindingHandler() {\n        return ctx.onFocus();\n      })(\"blur\", function TooltipDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"mouseenter\", function TooltipDirective_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function TooltipDirective_mouseleave_HostBindingHandler($event) {\n        return ctx.onMouseLeave($event.target);\n      })(\"click\", function TooltipDirective_click_HostBindingHandler() {\n        return ctx.onMouseClick();\n      });\n    }\n  },\n  inputs: {\n    tooltipCssClass: \"tooltipCssClass\",\n    tooltipTitle: \"tooltipTitle\",\n    tooltipAppendToBody: \"tooltipAppendToBody\",\n    tooltipSpacing: \"tooltipSpacing\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipShowCaret: \"tooltipShowCaret\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipAlignment: \"tooltipAlignment\",\n    tooltipType: \"tooltipType\",\n    tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\",\n    tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\",\n    tooltipHideTimeout: \"tooltipHideTimeout\",\n    tooltipShowTimeout: \"tooltipShowTimeout\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipShowEvent: \"tooltipShowEvent\",\n    tooltipContext: \"tooltipContext\",\n    tooltipImmediateExit: \"tooltipImmediateExit\"\n  },\n  outputs: {\n    show: \"show\",\n    hide: \"hide\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-tooltip]'\n    }]\n  }], function () {\n    return [{\n      type: TooltipService\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    tooltipCssClass: [{\n      type: Input\n    }],\n    tooltipTitle: [{\n      type: Input\n    }],\n    tooltipAppendToBody: [{\n      type: Input\n    }],\n    tooltipSpacing: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipShowCaret: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipAlignment: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    tooltipCloseOnClickOutside: [{\n      type: Input\n    }],\n    tooltipCloseOnMouseLeave: [{\n      type: Input\n    }],\n    tooltipHideTimeout: [{\n      type: Input\n    }],\n    tooltipShowTimeout: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipShowEvent: [{\n      type: Input\n    }],\n    tooltipContext: [{\n      type: Input\n    }],\n    tooltipImmediateExit: [{\n      type: Input\n    }],\n    show: [{\n      type: Output\n    }],\n    hide: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focusin']\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave', ['$event.target']]\n    }],\n    onMouseClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\nclass TooltipModule {}\n\nTooltipModule.ɵfac = function TooltipModule_Factory(t) {\n  return new (t || TooltipModule)();\n};\n\nTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TooltipModule\n});\nTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [InjectionService, TooltipService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TooltipContentComponent, TooltipDirective],\n      providers: [InjectionService, TooltipService],\n      exports: [TooltipContentComponent, TooltipDirective],\n      imports: [CommonModule],\n      entryComponents: [TooltipContentComponent]\n    }]\n  }], null, null);\n})();\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\n\nfunction id() {\n  let newId = ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4); // append a 'a' because neo gets mad\n\n  newId = `a${newId}`; // ensure not already used\n\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n\nvar BarOrientation;\n\n(function (BarOrientation) {\n  BarOrientation[\"Vertical\"] = \"vertical\";\n  BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n  constructor() {\n    this.orientation = BarOrientation.Vertical;\n  }\n\n  ngOnChanges(changes) {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === BarOrientation.Horizontal) {\n      this.x2 = '100%';\n    } else if (this.orientation === BarOrientation.Vertical) {\n      this.y1 = '100%';\n    }\n  }\n\n}\n\nSvgLinearGradientComponent.ɵfac = function SvgLinearGradientComponent_Factory(t) {\n  return new (t || SvgLinearGradientComponent)();\n};\n\nSvgLinearGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgLinearGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-linear-gradient\", \"\"]],\n  inputs: {\n    orientation: \"orientation\",\n    name: \"name\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c9,\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgLinearGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"linearGradient\", 0);\n      i0.ɵɵtemplate(1, SvgLinearGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"x1\", ctx.x1)(\"y1\", ctx.y1)(\"x2\", ctx.x2)(\"y2\", ctx.y2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgLinearGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-linear-gradient]',\n      template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    orientation: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\n\nclass CircleComponent {\n  constructor() {\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes) {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n\n}\n\nCircleComponent.ɵfac = function CircleComponent_Factory(t) {\n  return new (t || CircleComponent)();\n};\n\nCircleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleComponent,\n  selectors: [[\"g\", \"ngx-charts-circle\", \"\"]],\n  hostBindings: function CircleComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CircleComponent_click_HostBindingHandler() {\n        return ctx.onClick();\n      })(\"mouseenter\", function CircleComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function CircleComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    cx: \"cx\",\n    cy: \"cy\",\n    r: \"r\",\n    fill: \"fill\",\n    stroke: \"stroke\",\n    data: \"data\",\n    classNames: \"classNames\",\n    circleOpacity: \"circleOpacity\",\n    pointerEvents: \"pointerEvents\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c10,\n  decls: 1,\n  vars: 8,\n  template: function CircleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"circle\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke)(\"opacity\", ctx.circleOpacity)(\"class\", ctx.classNames)(\"pointer-events\", ctx.pointerEvents);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle]',\n      template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    r: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    classNames: [{\n      type: Input\n    }],\n    circleOpacity: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nvar SeriesType;\n\n(function (SeriesType) {\n  SeriesType[\"Standard\"] = \"standard\";\n  SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\n\nclass CircleSeriesComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.type = SeriesType.Standard;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barVisible = false;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges() {\n    this.update();\n  }\n\n  update() {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle() {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d, i) {\n    const seriesName = this.data.name;\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n    let cx;\n\n    if (this.scaleType === ScaleType.Time) {\n      cx = this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n    let color;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      if (this.type === SeriesType.Standard) {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({\n    tooltipLabel,\n    value,\n    seriesName,\n    min,\n    max\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min, max) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n\n        result += min.toLocaleString();\n\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [{\n      offset: 0,\n      color,\n      opacity: 0.2\n    }, {\n      offset: 100,\n      color,\n      opacity: 1\n    }];\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle() {\n    this.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n\n  deactivateCircle() {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n\n}\n\nCircleSeriesComponent.ɵfac = function CircleSeriesComponent_Factory(t) {\n  return new (t || CircleSeriesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nCircleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-circle-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    type: \"type\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c11,\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"class\", \"tooltip-bar\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [1, \"tooltip-bar\"]],\n  template: function CircleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CircleSeriesComponent__svg_g_0_Template, 6, 22, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.circle);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, CircleComponent, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 1\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle-series]',\n      template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 1\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GridPanelComponent {}\n\nGridPanelComponent.ɵfac = function GridPanelComponent_Factory(t) {\n  return new (t || GridPanelComponent)();\n};\n\nGridPanelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel\", \"\"]],\n  inputs: {\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\"\n  },\n  attrs: _c13,\n  decls: 1,\n  vars: 4,\n  consts: [[\"stroke\", \"none\", 1, \"gridpanel\"]],\n  template: function GridPanelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"rect\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"height\", ctx.height)(\"width\", ctx.width)(\"x\", ctx.x)(\"y\", ctx.y);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel]',\n      template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ClassEnum;\n\n(function (ClassEnum) {\n  ClassEnum[\"Odd\"] = \"odd\";\n  ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\n\nclass GridPanelSeriesComponent {\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels() {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = ClassEnum.Odd;\n\n      if (this.orient === BarOrientation.Vertical) {\n        const position = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === BarOrientation.Horizontal) {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n\n}\n\nGridPanelSeriesComponent.ɵfac = function GridPanelSeriesComponent_Factory(t) {\n  return new (t || GridPanelSeriesComponent)();\n};\n\nGridPanelSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    orient: \"orient\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c14,\n  decls: 1,\n  vars: 1,\n  consts: [[\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\", \"grid-panel\", \"odd\", \"even\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\"]],\n  template: function GridPanelSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, GridPanelSeriesComponent__svg_g_0_Template, 1, 10, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.gridPanels);\n    }\n  },\n  dependencies: [GridPanelComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel-series]',\n      template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }]\n  });\n})();\n\nclass SvgRadialGradientComponent {\n  constructor() {\n    this.endOpacity = 1;\n    this.cx = 0;\n    this.cy = 0;\n  }\n\n  get stops() {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value) {\n    this.stopsInput = value;\n  }\n\n  ngOnChanges(changes) {\n    this.r = '30%';\n\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [{\n        offset: 0,\n        color: this.color,\n        opacity: this.startOpacity\n      }, {\n        offset: 100,\n        color: this.color,\n        opacity: this.endOpacity\n      }];\n    }\n  }\n\n}\n\nSvgRadialGradientComponent.ɵfac = function SvgRadialGradientComponent_Factory(t) {\n  return new (t || SvgRadialGradientComponent)();\n};\n\nSvgRadialGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgRadialGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-radial-gradient\", \"\"]],\n  inputs: {\n    color: \"color\",\n    name: \"name\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    cx: \"cx\",\n    cy: \"cy\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c15,\n  decls: 2,\n  vars: 5,\n  consts: [[\"gradientUnits\", \"userSpaceOnUse\", 3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgRadialGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"radialGradient\", 0);\n      i0.ɵɵtemplate(1, SvgRadialGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgRadialGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-radial-gradient]',\n      template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\n\nclass AreaComponent {\n  constructor(element) {\n    this.opacity = 1;\n    this.startOpacity = 0.5;\n    this.endOpacity = 1;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.animationsLoaded = false;\n    this.hasGradient = false;\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges() {\n    this.update();\n\n    if (!this.animationsLoaded) {\n      this.loadAnimation();\n      this.animationsLoaded = true;\n    }\n  }\n\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation() {\n    this.areaPath = this.startingPath;\n    setTimeout(this.updatePathEl.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: this.endOpacity\n    }];\n  }\n\n}\n\nAreaComponent.ɵfac = function AreaComponent_Factory(t) {\n  return new (t || AreaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaComponent,\n  selectors: [[\"g\", \"ngx-charts-area\", \"\"]],\n  inputs: {\n    data: \"data\",\n    path: \"path\",\n    startingPath: \"startingPath\",\n    fill: \"fill\",\n    opacity: \"opacity\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    gradient: \"gradient\",\n    stops: \"stops\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c16,\n  decls: 2,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [1, \"area\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function AreaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AreaComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(1, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"opacity\", ctx.opacity);\n      i0.ɵɵattribute(\"d\", ctx.areaPath)(\"fill\", ctx.gradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area]',\n      template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    startingPath: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})(); // Robert Penner's easeOutExpo\n\n\nfunction easeOutExpo(t, b, c, d) {\n  return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\n\n\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\n\n\nfunction decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n\n\nclass CountUpDirective {\n  constructor(cd, element) {\n    this.cd = cd;\n    this.countDuration = 1;\n    this.countPrefix = '';\n    this.countSuffix = '';\n    this.countChange = new EventEmitter();\n    this.countFinish = new EventEmitter();\n    this.value = '';\n    this._countDecimals = 0;\n    this._countTo = 0;\n    this._countFrom = 0;\n    this.nativeElement = element.nativeElement;\n  }\n\n  set countDecimals(val) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals() {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo() {\n    return this._countTo;\n  }\n\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom() {\n    return this._countFrom;\n  }\n\n  ngOnDestroy() {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start() {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({\n      value,\n      progress,\n      finished\n    }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({\n        value: this.value,\n        progress\n      });\n      if (finished) this.countFinish.emit({\n        value: this.value,\n        progress\n      });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n\n}\n\nCountUpDirective.ɵfac = function CountUpDirective_Factory(t) {\n  return new (t || CountUpDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCountUpDirective.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CountUpDirective,\n  selectors: [[\"\", \"ngx-charts-count-up\", \"\"]],\n  inputs: {\n    countDuration: \"countDuration\",\n    countPrefix: \"countPrefix\",\n    countSuffix: \"countSuffix\",\n    valueFormatting: \"valueFormatting\",\n    countDecimals: \"countDecimals\",\n    countTo: \"countTo\",\n    countFrom: \"countFrom\"\n  },\n  outputs: {\n    countChange: \"countChange\",\n    countFinish: \"countFinish\"\n  },\n  attrs: _c17,\n  decls: 1,\n  vars: 1,\n  template: function CountUpDirective_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountUpDirective, [{\n    type: Component,\n    args: [{\n      selector: '[ngx-charts-count-up]',\n      template: ` {{ value }} `\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    countDuration: [{\n      type: Input\n    }],\n    countPrefix: [{\n      type: Input\n    }],\n    countSuffix: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    countDecimals: [{\n      type: Input\n    }],\n    countTo: [{\n      type: Input\n    }],\n    countFrom: [{\n      type: Input\n    }],\n    countChange: [{\n      type: Output\n    }],\n    countFinish: [{\n      type: Output\n    }]\n  });\n})(); // If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\n\n\nlet root;\n\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} // tslint:disable-next-line:variable-name\n\n\nconst MouseEvent = root.MouseEvent;\n\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, {\n      bubbles,\n      cancelable\n    });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n\nclass TooltipArea {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.anchorOpacity = 0;\n    this.anchorPos = -1;\n    this.anchorValues = [];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.showPercentage = false;\n    this.tooltipDisabled = false;\n    this.hover = new EventEmitter();\n  }\n\n  getValues(xVal) {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n\n        let color;\n\n        if (this.colors.scaleType === ScaleType.Linear) {\n          let v = val;\n\n          if (item.d1) {\n            v = item.d1;\n          }\n\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n    this.anchorValues = this.getValues(closestPoint);\n\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = (minIndex + maxIndex) / 2 | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip() {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip() {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem) {\n    let result = '';\n\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n\n    result += ': ';\n\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n\n        result += tooltipItem.min.toLocaleString();\n\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n\n      result += ')';\n    }\n\n    return result;\n  }\n\n}\n\nTooltipArea.ɵfac = function TooltipArea_Factory(t) {\n  return new (t || TooltipArea)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nTooltipArea.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipArea,\n  selectors: [[\"g\", \"ngx-charts-tooltip-area\", \"\"]],\n  viewQuery: function TooltipArea_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c18, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipAnchor = _t.first);\n    }\n  },\n  inputs: {\n    dims: \"dims\",\n    xSet: \"xSet\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    results: \"results\",\n    colors: \"colors\",\n    showPercentage: \"showPercentage\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    hover: \"hover\"\n  },\n  attrs: _c19,\n  decls: 6,\n  vars: 18,\n  consts: [[\"y\", \"0\", 1, \"tooltip-area\", 2, \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mousemove\", \"mouseleave\"], [\"defaultTooltipTemplate\", \"\"], [\"y\", \"0\", \"ngx-tooltip\", \"\", 1, \"tooltip-anchor\", 3, \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipSpacing\", \"tooltipTemplate\", \"tooltipContext\", \"tooltipImmediateExit\"], [\"tooltipAnchor\", \"\"], [1, \"area-tooltip-container\"], [\"class\", \"tooltip-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"tooltip-item\"], [1, \"tooltip-item-color\"]],\n  template: function TooltipArea_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\")(1, \"rect\", 0);\n      i0.ɵɵlistener(\"mousemove\", function TooltipArea_Template__svg_rect_mousemove_1_listener($event) {\n        return ctx.mouseMove($event);\n      })(\"mouseleave\", function TooltipArea_Template__svg_rect_mouseleave_1_listener() {\n        return ctx.hideTooltip();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, TooltipArea__svg_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelement(4, \"rect\", 2, 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(3);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", 0)(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(3);\n      i0.ɵɵstyleProp(\"opacity\", ctx.anchorOpacity)(\"pointer-events\", \"none\");\n      i0.ɵɵproperty(\"@animationState\", ctx.anchorOpacity !== 0 ? \"active\" : \"inactive\")(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Right)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipSpacing\", 15)(\"tooltipTemplate\", ctx.tooltipTemplate ? ctx.tooltipTemplate : _r0)(\"tooltipContext\", ctx.anchorValues)(\"tooltipImmediateExit\", true);\n      i0.ɵɵattribute(\"x\", ctx.anchorPos)(\"width\", 1)(\"height\", ctx.dims.height);\n    }\n  },\n  dependencies: [i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition('inactive => active', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 0.7\n    }))]), transition('active => inactive', [style({\n      opacity: 0.7\n    }), animate(250, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipArea, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tooltip-area]',\n      template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition('inactive => active', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 0.7\n      }))]), transition('active => inactive', [style({\n        opacity: 0.7\n      }), animate(250, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    dims: [{\n      type: Input\n    }],\n    xSet: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    showPercentage: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    hover: [{\n      type: Output\n    }],\n    tooltipAnchor: [{\n      type: ViewChild,\n      args: ['tooltipAnchor', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass Timeline {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.height = 50;\n    this.select = new EventEmitter();\n    this.onDomainChange = new EventEmitter();\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update() {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n    this.cd.markForCheck();\n  }\n\n  getXDomain() {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush() {\n    if (this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush = brushX().extent([[0, 0], [width, height]]).on('brush end', ({\n      selection\n    }) => {\n      const newSelection = selection || this.xScale.range();\n      const newDomain = newSelection.map(this.xScale.invert);\n      this.onDomainChange.emit(newDomain);\n      this.cd.markForCheck();\n    });\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush() {\n    if (!this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush.extent([[0, 0], [width, height]]);\n    select(this.element).select('.brush').call(this.brush); // clear hardcoded properties so they can be defined by CSS\n\n    select(this.element).select('.selection').attr('fill', undefined).attr('stroke', undefined).attr('fill-opacity', undefined);\n    this.cd.markForCheck();\n  }\n\n  getDims() {\n    const width = this.view[0];\n    const dims = {\n      width,\n      height: this.height\n    };\n    return dims;\n  }\n\n}\n\nTimeline.ɵfac = function Timeline_Factory(t) {\n  return new (t || Timeline)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTimeline.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: Timeline,\n  selectors: [[\"g\", \"ngx-charts-timeline\", \"\"]],\n  inputs: {\n    view: \"view\",\n    results: \"results\",\n    scheme: \"scheme\",\n    customColors: \"customColors\",\n    legend: \"legend\",\n    autoScale: \"autoScale\",\n    scaleType: \"scaleType\",\n    height: \"height\"\n  },\n  outputs: {\n    select: \"select\",\n    onDomainChange: \"onDomainChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c20,\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[1, \"timeline\"], [\"in\", \"SourceGraphic\", \"type\", \"matrix\", \"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"], [1, \"embedded-chart\"], [\"x\", \"0\", \"y\", \"0\", 1, \"brush-background\"], [1, \"brush\"]],\n  template: function Timeline_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0)(1, \"filter\");\n      i0.ɵɵelement(2, \"feColorMatrix\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 2);\n      i0.ɵɵprojection(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"rect\", 3)(6, \"g\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.filterId);\n      i0.ɵɵadvance(4);\n      i0.ɵɵattribute(\"width\", ctx.view[0])(\"height\", ctx.height);\n    }\n  },\n  styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Timeline, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-timeline]',\n      template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    view: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    onDomainChange: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AdvancedLegendComponent {\n  constructor() {\n    this.label = 'Total';\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.legendItems = [];\n\n    this.labelFormatting = label => label;\n\n    this.percentageFormatting = percentage => percentage;\n\n    this.defaultValueFormatting = value => value.toLocaleString();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getTotal() {\n    return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n  }\n\n  update() {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems() {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? value / this.total * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nAdvancedLegendComponent.ɵfac = function AdvancedLegendComponent_Factory(t) {\n  return new (t || AdvancedLegendComponent)();\n};\n\nAdvancedLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedLegendComponent,\n  selectors: [[\"ngx-charts-advanced-legend\"]],\n  inputs: {\n    width: \"width\",\n    data: \"data\",\n    colors: \"colors\",\n    label: \"label\",\n    animations: \"animations\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 7,\n  consts: [[1, \"advanced-pie-legend\"], [\"class\", \"total-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"total-value\", 4, \"ngIf\"], [1, \"total-label\"], [1, \"legend-items-container\"], [1, \"legend-items\"], [\"tabindex\", \"-1\", \"class\", \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-count-up\", \"\", 1, \"total-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"total-value\"], [\"tabindex\", \"-1\", 1, \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\"], [1, \"item-color\"], [\"class\", \"item-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"item-value\", 4, \"ngIf\"], [1, \"item-label\"], [\"class\", \"item-percent\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"item-percent\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"item-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"item-value\"], [\"ngx-charts-count-up\", \"\", 1, \"item-percent\", 3, \"countTo\", \"countSuffix\"], [1, \"item-percent\"]],\n  template: function AdvancedLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, AdvancedLegendComponent_div_1_Template, 1, 2, \"div\", 1);\n      i0.ɵɵtemplate(2, AdvancedLegendComponent_div_2_Template, 2, 1, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"div\", 5);\n      i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_Template, 8, 7, \"div\", 6);\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendItems)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [CountUpDirective, i2.NgIf, i2.NgForOf],\n  styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-legend',\n      template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"]\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nconst COMPONENTS = [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent];\n\nclass ChartCommonModule {}\n\nChartCommonModule.ɵfac = function ChartCommonModule_Factory(t) {\n  return new (t || ChartCommonModule)();\n};\n\nChartCommonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ChartCommonModule\n});\nChartCommonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartCommonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, AxesModule, TooltipModule],\n      declarations: [...COMPONENTS, VisibilityObserver],\n      exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n    }]\n  }], null, null);\n})();\n\nfunction calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = ScaleType.Ordinal,\n  legendPosition = LegendPosition.Right,\n  columns = 12\n}) {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === LegendPosition.Right) {\n    if (legendType === ScaleType.Ordinal) {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = chartWidth * columns / 12;\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n\nconst colorSets = [{\n  name: 'vivid',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#647c8a', '#3f51b5', '#2196f3', '#00b862', '#afdf0a', '#a7b61a', '#f3e562', '#ff9800', '#ff5722', '#ff4514']\n}, {\n  name: 'natural',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#bf9d76', '#e99450', '#d89f59', '#f2dfa7', '#a5d7c6', '#7794b1', '#afafaf', '#707160', '#ba9383', '#d9d5c3']\n}, {\n  name: 'cool',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#a8385d', '#7aa3e5', '#a27ea8', '#aae3f5', '#adcded', '#a95963', '#8796c0', '#7ed3ed', '#50abcc', '#ad6886']\n}, {\n  name: 'fire',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n}, {\n  name: 'solar',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00']\n}, {\n  name: 'air',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b']\n}, {\n  name: 'aqua',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064']\n}, {\n  name: 'flame',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#A10A28', '#D3342D', '#EF6D49', '#FAAD67', '#FDDE90', '#DBED91', '#A9D770', '#6CBA67', '#2C9653', '#146738']\n}, {\n  name: 'ocean',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#1D68FB', '#33C0FC', '#4AFFFE', '#AFFFFF', '#FFFC63', '#FDBD2D', '#FC8A25', '#FA4F1E', '#FA141B', '#BA38D1']\n}, {\n  name: 'forest',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#55C22D', '#C1F33D', '#3CC099', '#AFFFFF', '#8CFC9D', '#76CFFA', '#BA60FB', '#EE6490', '#C42A1C', '#FC9F32']\n}, {\n  name: 'horizon',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2597FB', '#65EBFD', '#99FDD0', '#FCEE4B', '#FEFCFA', '#FDD6E3', '#FCB1A8', '#EF6F7B', '#CB96E8', '#EFDEE0']\n}, {\n  name: 'neons',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FF3333', '#FF33FF', '#CC33FF', '#0000FF', '#33CCFF', '#33FFFF', '#33FF66', '#CCFF33', '#FFCC00', '#FF6600']\n}, {\n  name: 'picnic',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FAC51D', '#66BD6D', '#FAA026', '#29BB9C', '#E96B56', '#55ACD2', '#B7332F', '#2C83C9', '#9166B8', '#92E7E8']\n}, {\n  name: 'night',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2B1B5A', '#501356', '#183356', '#28203F', '#391B3C', '#1E2B3C', '#120634', '#2D0432', '#051932', '#453080', '#75267D', '#2C507D', '#4B3880', '#752F7D', '#35547D']\n}, {\n  name: 'nightLights',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#4e31a5', '#9c25a7', '#3065ab', '#57468b', '#904497', '#46648b', '#32118d', '#a00fb3', '#1052a2', '#6e51bd', '#b63cc3', '#6c97cb', '#8671c1', '#b455be', '#7496c3']\n}];\n\nclass ColorHelper {\n  constructor(scheme, type, domain, customColors) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    let colorScale;\n\n    switch (type) {\n      case ScaleType.Quantile:\n        colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n        break;\n\n      case ScaleType.Ordinal:\n        colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n        break;\n\n      case ScaleType.Linear:\n        {\n          const colorDomain = [...scheme.domain];\n\n          if (colorDomain.length === 1) {\n            colorDomain.push(colorDomain[0]);\n            this.colorDomain = colorDomain;\n          }\n\n          const points = range(0, 1, 1.0 / colorDomain.length);\n          colorScale = scaleLinear().range(colorDomain).domain(points);\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n\n    if (this.scaleType === ScaleType.Linear) {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found; // todo type customColors\n\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n    const endColor = this.getColor(value); // generate the stops\n\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = (s.offset - startVal) / (endVal - startVal) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n\n}\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\n\n\nfunction getUniqueXDomainValues(results) {\n  const valueSet = new Set();\n\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n\n  return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\n\n\nfunction getScaleType(values, checkDateType = true) {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n\n    if (allDates) {\n      return ScaleType.Time;\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n\n  if (allNumbers) {\n    return ScaleType.Linear;\n  }\n\n  return ScaleType.Ordinal;\n}\n\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n  const scaleType = getScaleType(values);\n  let xSet = [];\n  let domain = [];\n\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n  }\n\n  let min;\n  let max;\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const mappedValues = values.map(v => Number(v));\n    min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n    max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n  }\n\n  if (scaleType === ScaleType.Time) {\n    domain = [new Date(min), new Date(max)];\n    xSet = [...values].sort((a, b) => {\n      const aDate = a.getTime();\n      const bDate = b.getTime();\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    });\n  } else if (scaleType === ScaleType.Linear) {\n    domain = [min, max]; // Use compare function to sort numbers numerically\n\n    xSet = [...values].sort((a, b) => a - b);\n  } else {\n    domain = values;\n    xSet = values;\n  }\n\n  return {\n    domain,\n    xSet,\n    scaleType\n  };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nfunction sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n\nclass AreaSeriesComponent {\n  constructor() {\n    this.baseValue = 'auto';\n    this.stacked = false;\n    this.normalized = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradient();\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area().x(xProperty).y0((d, i) => this.yScale(d.d0)).y1((d, i) => this.yScale(d.d1));\n      startingArea = area().x(xProperty).y0(d => this.yScale.range()[0]).y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area().x(xProperty).y0(() => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.yScale(d.value));\n      startingArea = area().x(xProperty).y0(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n    this.opacity = 0.8;\n    let data = this.data.series;\n\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n}\n\nAreaSeriesComponent.ɵfac = function AreaSeriesComponent_Factory(t) {\n  return new (t || AreaSeriesComponent)();\n};\n\nAreaSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-area-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    baseValue: \"baseValue\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    stacked: \"stacked\",\n    normalized: \"normalized\",\n    gradient: \"gradient\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c21,\n  decls: 1,\n  vars: 12,\n  consts: [[\"ngx-charts-area\", \"\", 1, \"area-series\", 3, \"data\", \"path\", \"fill\", \"stops\", \"startingPath\", \"opacity\", \"gradient\", \"animations\"]],\n  template: function AreaSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"fill\", ctx.colors.getColor(ctx.data.name))(\"stops\", ctx.gradientStops)(\"startingPath\", ctx.startingPath)(\"opacity\", ctx.opacity)(\"gradient\", ctx.gradient || ctx.hasGradient)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [AreaComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area-series]',\n      template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    stacked: [{\n      type: Input\n    }],\n    normalized: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AreaChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.baseValue = 'auto';\n    this.autoScale = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values) {\n    let date = true;\n    let num = true;\n\n    for (const value of values) {\n      if (isDate(value)) {\n        date = false;\n      }\n\n      if (isNumber(value)) {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return ScaleType.Time;\n    }\n\n    if (num) {\n      return ScaleType.Linear;\n    }\n\n    return ScaleType.Ordinal;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartComponent_BaseFactory;\n  return function AreaChartComponent_Factory(t) {\n    return (ɵAreaChartComponent_BaseFactory || (ɵAreaChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartComponent)))(t || AreaChartComponent);\n  };\n}();\n\nAreaChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartComponent,\n  selectors: [[\"ngx-charts-area-chart\"]],\n  contentQueries: function AreaChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    baseValue: \"baseValue\",\n    autoScale: \"autoScale\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"gradient\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n  template: function AreaChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, AreaChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showXAxisLabel = false;\n    this.showYAxisLabel = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.yDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.seriesType = SeriesType;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      let total = 0;\n\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = d.d0 * 100 / total;\n          d.d1 = d.d1 * 100 / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartNormalizedComponent_BaseFactory;\n  return function AreaChartNormalizedComponent_Factory(t) {\n    return (ɵAreaChartNormalizedComponent_BaseFactory || (ɵAreaChartNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartNormalizedComponent)))(t || AreaChartNormalizedComponent);\n  };\n}();\n\nAreaChartNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartNormalizedComponent,\n  selectors: [[\"ngx-charts-area-chart-normalized\"]],\n  contentQueries: function AreaChartNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartNormalizedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"activeEntries\", \"gradient\", \"normalized\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"normalized\", \"curve\", \"animations\"]],\n  template: function AreaChartNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartNormalizedComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartNormalizedComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartNormalizedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartNormalizedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, AreaChartNormalizedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.seriesType = SeriesType;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartStackedComponent_BaseFactory;\n  return function AreaChartStackedComponent_Factory(t) {\n    return (ɵAreaChartStackedComponent_BaseFactory || (ɵAreaChartStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartStackedComponent)))(t || AreaChartStackedComponent);\n  };\n}();\n\nAreaChartStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartStackedComponent,\n  selectors: [[\"ngx-charts-area-chart-stacked\"]],\n  contentQueries: function AreaChartStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartStackedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"activeEntries\", \"stacked\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"stacked\", \"curve\", \"animations\"]],\n  template: function AreaChartStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartStackedComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartStackedComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartStackedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartStackedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(10, AreaChartStackedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartModule {}\n\nAreaChartModule.ɵfac = function AreaChartModule_Factory(t) {\n  return new (t || AreaChartModule)();\n};\n\nAreaChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AreaChartModule\n});\nAreaChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n      exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass BarComponent {\n  constructor(element) {\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n\n    this.update();\n  }\n\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation() {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === BarOrientation.Vertical) {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius() {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n\n    return edges;\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && (this.orientation === BarOrientation.Vertical && this.height === 0 || this.orientation === BarOrientation.Horizontal && this.width === 0);\n  }\n\n}\n\nBarComponent.ɵfac = function BarComponent_Factory(t) {\n  return new (t || BarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarComponent,\n  selectors: [[\"g\", \"ngx-charts-bar\", \"\"]],\n  hostBindings: function BarComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BarComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BarComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    orientation: \"orientation\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    stops: \"stops\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c26,\n  decls: 2,\n  vars: 8,\n  consts: [[4, \"ngIf\"], [\"stroke\", \"none\", \"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function BarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BarComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"path\", 1);\n      i0.ɵɵlistener(\"click\", function BarComponent_Template__svg_path_click_1_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar]',\n      template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nvar BarChartType;\n\n(function (BarChartType) {\n  BarChartType[\"Standard\"] = \"standard\";\n  BarChartType[\"Normalized\"] = \"normalized\";\n  BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n\n(function (D0Types) {\n  D0Types[\"positive\"] = \"positive\";\n  D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n  constructor(element) {\n    this.dimensionsChanged = new EventEmitter();\n    this.horizontalPadding = 2;\n    this.verticalPadding = 5;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getSize() {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return {\n      height: h,\n      width: w,\n      negative: this.value < 0\n    };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update() {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth; // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n\n}\n\nBarLabelComponent.ɵfac = function BarLabelComponent_Factory(t) {\n  return new (t || BarLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nBarLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-bar-label\", \"\"]],\n  inputs: {\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    barX: \"barX\",\n    barY: \"barY\",\n    barWidth: \"barWidth\",\n    barHeight: \"barHeight\",\n    orientation: \"orientation\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c27,\n  decls: 2,\n  vars: 5,\n  consts: [[\"alignment-baseline\", \"middle\", 1, \"textDataLabel\"]],\n  template: function BarLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.formatedValue, \" \");\n    }\n  },\n  styles: [\".textDataLabel[_ngcontent-%COMP%]{font-size:11px}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar-label]',\n      template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".textDataLabel{font-size:11px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    barX: [{\n      type: Input\n    }],\n    barY: [{\n      type: Input\n    }],\n    barWidth: [{\n      type: Input\n    }],\n    barHeight: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass SeriesHorizontal {\n  constructor() {\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelWidthChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type;\n    d0Type = D0Types.positive;\n    let total;\n\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n    this.bars = this.series.map(d => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === BarChartType.Standard) {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n\n        bar.y = this.yScale(label);\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0; // if total is positive then we show it on the right, otherwise on the left\n\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section = {};\n        section.series = this.seriesName ?? d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data) {\n    this.select.emit(data);\n  }\n\n}\n\nSeriesHorizontal.ɵfac = function SeriesHorizontal_Factory(t) {\n  return new (t || SeriesHorizontal)();\n};\n\nSeriesHorizontal.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesHorizontal,\n  selectors: [[\"g\", \"ngx-charts-series-horizontal\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelWidthChanged: \"dataLabelWidthChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c28,\n  decls: 2,\n  vars: 3,\n  consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesHorizontal_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesHorizontal__svg_g_0_Template, 1, 21, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1_Template, 2, 2, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  dependencies: [BarComponent, BarLabelComponent, i2.NgForOf, TooltipDirective, i2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesHorizontal, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-horizontal]',\n      template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelWidthChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BarHorizontalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain() {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalComponent_BaseFactory;\n  return function BarHorizontalComponent_Factory(t) {\n    return (ɵBarHorizontalComponent_BaseFactory || (ɵBarHorizontalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalComponent)))(t || BarHorizontalComponent);\n  };\n}();\n\nBarHorizontalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalComponent,\n  selectors: [[\"ngx-charts-bar-horizontal\"]],\n  contentQueries: function BarHorizontalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    xScaleMin: \"xScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"activeEntries\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"]],\n  template: function BarHorizontalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"select\", function BarHorizontalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BarHorizontalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarHorizontalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"dataLabelWidthChanged\", function BarHorizontalComponent_Template__svg_g_dataLabelWidthChanged_4_listener($event) {\n        return ctx.onDataLabelMaxWidthChanged($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barOrientation = BarOrientation;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n\n  getInnerScale() {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontal2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontal2DComponent_BaseFactory;\n  return function BarHorizontal2DComponent_Factory(t) {\n    return (ɵBarHorizontal2DComponent_BaseFactory || (ɵBarHorizontal2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontal2DComponent)))(t || BarHorizontal2DComponent);\n  };\n}();\n\nBarHorizontal2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontal2DComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-2d\"]],\n  contentQueries: function BarHorizontal2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"activeEntries\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontal2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontal2DComponent__svg_g_3_Template, 1, 11, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontal2DComponent__svg_g_4_Template, 1, 10, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontal2DComponent__svg_g_5_Template, 2, 2, \"g\", 5);\n      i0.ɵɵtemplate(6, BarHorizontal2DComponent__svg_g_6_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.valueScale)(\"yScale\", ctx.groupScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, GridPanelSeriesComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontal2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.barChartType = BarChartType;\n    this.isSSR = false;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalNormalizedComponent_BaseFactory;\n  return function BarHorizontalNormalizedComponent_Factory(t) {\n    return (ɵBarHorizontalNormalizedComponent_BaseFactory || (ɵBarHorizontalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalNormalizedComponent)))(t || BarHorizontalNormalizedComponent);\n  };\n}();\n\nBarHorizontalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-normalized\"]],\n  contentQueries: function BarHorizontalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarHorizontalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalNormalizedComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalNormalizedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalNormalizedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontalNormalizedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.barChartType = BarChartType;\n    this.isSSR = false;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalStackedComponent_BaseFactory;\n  return function BarHorizontalStackedComponent_Factory(t) {\n    return (ɵBarHorizontalStackedComponent_BaseFactory || (ɵBarHorizontalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalStackedComponent)))(t || BarHorizontalStackedComponent);\n  };\n}();\n\nBarHorizontalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalStackedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-stacked\"]],\n  contentQueries: function BarHorizontalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"series\", \"activeEntries\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalStackedComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalStackedComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalStackedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontalStackedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesHorizontal, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass SeriesVerticalComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelHeightChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    let width;\n\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n    let total;\n\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === BarChartType.Standard) {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section = {};\n        section.series = this.seriesName ?? d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n}\n\nSeriesVerticalComponent.ɵfac = function SeriesVerticalComponent_Factory(t) {\n  return new (t || SeriesVerticalComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nSeriesVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesVerticalComponent,\n  selectors: [[\"g\", \"ngx-charts-series-vertical\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelHeightChanged: \"dataLabelHeightChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c29,\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesVerticalComponent__svg_g_0_Template, 2, 2, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1_Template, 2, 2, \"g\", 0);\n      i0.ɵɵtemplate(2, SeriesVerticalComponent__svg_g_2_Template, 2, 2, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  dependencies: [BarComponent, BarLabelComponent, i2.NgIf, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-vertical]',\n      template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelHeightChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BarVerticalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain() {\n    const values = this.results.map(d => d.value);\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n\n    return [min, max];\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalComponent_BaseFactory;\n  return function BarVerticalComponent_Factory(t) {\n    return (ɵBarVerticalComponent_BaseFactory || (ɵBarVerticalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalComponent)))(t || BarVerticalComponent);\n  };\n}();\n\nBarVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalComponent,\n  selectors: [[\"ngx-charts-bar-vertical\"]],\n  contentQueries: function BarVerticalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"activeEntries\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"activate\", \"deactivate\", \"select\", \"dataLabelHeightChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"]],\n  template: function BarVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalComponent__svg_g_2_Template, 1, 12, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"activate\", function BarVerticalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarVerticalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"select\", function BarVerticalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"dataLabelHeightChanged\", function BarVerticalComponent_Template__svg_g_dataLabelHeightChanged_4_listener($event) {\n        return ctx.onDataLabelMaxHeightChanged($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVertical2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.scaleType = ScaleType.Ordinal;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barOrientation = BarOrientation;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n\n  getInnerScale() {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVertical2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVertical2DComponent_BaseFactory;\n  return function BarVertical2DComponent_Factory(t) {\n    return (ɵBarVertical2DComponent_BaseFactory || (ɵBarVertical2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVertical2DComponent)))(t || BarVertical2DComponent);\n  };\n}();\n\nBarVertical2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVertical2DComponent,\n  selectors: [[\"ngx-charts-bar-vertical-2d\"]],\n  contentQueries: function BarVertical2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    scaleType: \"scaleType\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVertical2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVertical2DComponent__svg_g_3_Template, 1, 11, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVertical2DComponent__svg_g_4_Template, 1, 10, \"g\", 4);\n      i0.ɵɵtemplate(5, BarVertical2DComponent__svg_g_5_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, BarVertical2DComponent__svg_g_6_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.groupScale)(\"yScale\", ctx.valueScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Vertical);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, GridPanelSeriesComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVertical2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.isSSR = false;\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalNormalizedComponent_BaseFactory;\n  return function BarVerticalNormalizedComponent_Factory(t) {\n    return (ɵBarVerticalNormalizedComponent_BaseFactory || (ɵBarVerticalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalNormalizedComponent)))(t || BarVerticalNormalizedComponent);\n  };\n}();\n\nBarVerticalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-normalized\"]],\n  contentQueries: function BarVerticalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarVerticalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalNormalizedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalNormalizedComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalNormalizedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarVerticalNormalizedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalStackedComponent_BaseFactory;\n  return function BarVerticalStackedComponent_Factory(t) {\n    return (ɵBarVerticalStackedComponent_BaseFactory || (ɵBarVerticalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalStackedComponent)))(t || BarVerticalStackedComponent);\n  };\n}();\n\nBarVerticalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalStackedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-stacked\"]],\n  contentQueries: function BarVerticalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVerticalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalStackedComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalStackedComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalStackedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, BarVerticalStackedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, SeriesVerticalComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarChartModule {}\n\nBarChartModule.ɵfac = function BarChartModule_Factory(t) {\n  return new (t || BarChartModule)();\n};\n\nBarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BarChartModule\n});\nBarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent],\n      exports: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent]\n    }]\n  }], null, null);\n})();\n\nconst cloneDeep = rfdc();\n\nclass BoxComponent {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.BarOrientation = BarOrientation;\n    this.initialized = false;\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.nativeElm = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update() {\n    this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n    this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n    this.medianLineWidth = 1.5 * this.strokeWidth;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updateLineEl();\n    this.updatePathEl();\n    this.checkToHideBar();\n    this.maskLineId = 'mask' + id().toString();\n    this.maskLine = `url(#${this.maskLineId})`;\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  loadAnimation() {\n    this.boxPath = this.oldPath = this.getStartingPath();\n    this.oldLineCoordinates = this.getStartingLineCoordinates();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const nodeBar = select(this.nativeElm).selectAll('.bar');\n    const path = this.getPath();\n\n    if (this.animations) {\n      nodeBar.attr('d', this.oldPath).transition().ease(easeSinInOut).duration(500).attrTween('d', this.pathTween(path, 4));\n    } else {\n      nodeBar.attr('d', path);\n    }\n\n    this.oldPath = path;\n  }\n\n  updateLineEl() {\n    const lineEl = select(this.nativeElm).selectAll('.bar-line');\n    const lineCoordinates = this.lineCoordinates;\n    const oldLineCoordinates = this.oldLineCoordinates;\n\n    if (this.animations) {\n      lineEl.attr('x1', (_, index) => oldLineCoordinates[index].v1.x).attr('y1', (_, index) => oldLineCoordinates[index].v1.y).attr('x2', (_, index) => oldLineCoordinates[index].v2.x).attr('y2', (_, index) => oldLineCoordinates[index].v2.y).transition().ease(easeSinInOut).duration(500).attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    } else {\n      lineEl.attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    }\n\n    this.oldLineCoordinates = [...lineCoordinates];\n  }\n  /**\n   * See [D3 Selections](https://www.d3indepth.com/selections/)\n   * @param d The joined data.\n   * @param index The index of the element within the selection\n   * @param node The node element (Line).\n   */\n\n\n  lineTween(attr, d, index, node) {\n    const nodeLineEl = node[index];\n    return nodeLineEl[attr].baseVal.value;\n  } // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n\n\n  pathTween(d1, precision) {\n    return function () {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const path0 = this;\n      const path1 = this.cloneNode();\n      path1.setAttribute('d', d1);\n      const n0 = path0?.getTotalLength();\n      const n1 = path1?.getTotalLength(); // Uniform sampling of distance based on specified precision.\n\n      const distances = [0];\n      let i = 0;\n      const dt = precision / Math.max(n0, n1);\n\n      while (i < 1) {\n        distances.push(i);\n        i += dt;\n      }\n\n      distances.push(1); // Compute point-interpolators at each distance.\n\n      const points = distances.map(t => {\n        const p0 = path0.getPointAtLength(t * n0);\n        const p1 = path1.getPointAtLength(t * n1);\n        return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n      }); // 't': T is the fraction of time (between 0 and 1) since the transition began.\n\n      return t => {\n        return t < 1 ? 'M' + points.map(p => p(t)).join('L') : d1;\n      };\n    };\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    const radius = this.roundEdges ? 1 : 0;\n    const {\n      x,\n      y\n    } = this.lineCoordinates[2].v1;\n    return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n  }\n\n  getPath() {\n    const radius = this.getRadius();\n    let path = '';\n    path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n    return path;\n  }\n\n  getStartingLineCoordinates() {\n    if (!this.animations) {\n      return [...this.lineCoordinates];\n    }\n\n    const lineCoordinates = cloneDeep(this.lineCoordinates);\n    lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y = lineCoordinates[2].v1.y;\n    return lineCoordinates;\n  }\n\n  getRadius() {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getGradient() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n\n    if (this.roundEdges) {\n      edges = [true, true, true, true];\n    }\n\n    return edges;\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && this.height === 0;\n  }\n\n}\n\nBoxComponent.ɵfac = function BoxComponent_Factory(t) {\n  return new (t || BoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxComponent,\n  selectors: [[\"g\", \"ngx-charts-box\", \"\"]],\n  hostBindings: function BoxComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BoxComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BoxComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    lineCoordinates: \"lineCoordinates\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    gradientStops: \"gradientStops\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c30,\n  decls: 9,\n  vars: 13,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"height\", \"100%\", \"width\", \"100%\", \"fill\", \"white\", \"fill-opacity\", \"1\"], [\"fill\", \"black\", \"fill-opacity\", \"1\", 1, \"bar\"], [\"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"class\", \"bar-line\", \"fill\", \"none\", 3, \"hidden\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"fill\", \"none\", 1, \"bar-line\"]],\n  template: function BoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"defs\");\n      i0.ɵɵtemplate(1, BoxComponent__svg_g_1_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementStart(2, \"mask\")(3, \"g\");\n      i0.ɵɵelement(4, \"rect\", 1)(5, \"path\", 2);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"g\")(7, \"path\", 3);\n      i0.ɵɵlistener(\"click\", function BoxComponent_Template__svg_path_click_7_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, BoxComponent__svg_line_8_Template, 1, 9, \"line\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.maskLineId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵattribute(\"d\", ctx.boxPath);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.boxPath)(\"stroke\", ctx.strokeColor)(\"stroke-width\", ctx.boxStrokeWidth)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.lineCoordinates);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box]',\n      template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    lineCoordinates: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    gradientStops: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass BoxSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n    const seriesName = this.series.name; // Calculate Quantile and Whiskers for each box serie.\n\n    this.counts = this.series.series;\n    const mappedCounts = this.counts.map(serie => Number(serie.value));\n    this.whiskers = [min(mappedCounts), max(mappedCounts)]; // We get the group count and must sort it in order to retrieve quantiles.\n\n    const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n    this.quartiles = this.getBoxQuantiles(groupCounts);\n    this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n    const value = this.quartiles[1];\n    const formattedLabel = formatLabel(seriesName);\n    const box = {\n      value,\n      data: this.counts,\n      label: seriesName,\n      formattedLabel,\n      width,\n      height: 0,\n      x: 0,\n      y: 0,\n      roundEdges: this.roundEdges,\n      quartiles: this.quartiles,\n      lineCoordinates: this.lineCoordinates\n    };\n    box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n    box.x = this.xScale(seriesName.toString());\n    box.y = this.yScale(this.quartiles[2]);\n    box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n\n    if (this.colors.scaleType === ScaleType.Ordinal) {\n      box.color = this.colors.getColor(seriesName);\n    } else {\n      box.color = this.colors.getColor(this.quartiles[1]);\n      box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n    }\n\n    const tooltipLabel = formattedLabel;\n    const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n    box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n    this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n    this.box = box;\n  }\n\n  getBoxQuantiles(inputData) {\n    return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n  }\n\n  getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n    // The X value is not being centered, so had to sum half the width to align it.\n    const commonX = this.xScale(seriesName);\n    const offsetX = commonX + barWidth / 2;\n    const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n    const whiskerLineWidth = Math.max(barWidth / 3, 1);\n    const whiskerZero = this.yScale(whiskers[0]);\n    const whiskerOne = this.yScale(whiskers[1]);\n    const median = this.yScale(quartiles[1]);\n    const topLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerZero\n      }\n    };\n    const medianLine = {\n      v1: {\n        x: offsetX + medianLineWidth / 2,\n        y: median\n      },\n      v2: {\n        x: offsetX - medianLineWidth / 2,\n        y: median\n      }\n    };\n    const bottomLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerOne\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerOne\n      }\n    };\n    const verticalLine = {\n      v1: {\n        x: offsetX,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX,\n        y: whiskerOne\n      }\n    };\n    return [verticalLine, topLine, medianLine, bottomLine];\n  }\n\n  updateTooltipSettings() {\n    if (this.tooltipDisabled) {\n      this.tooltipPlacement = undefined;\n      this.tooltipType = undefined;\n    } else {\n      if (!this.tooltipPlacement) {\n        this.tooltipPlacement = PlacementTypes.Top;\n      }\n\n      if (!this.tooltipType) {\n        this.tooltipType = StyleTypes.tooltip;\n      }\n    }\n  }\n\n}\n\nBoxSeriesComponent.ɵfac = function BoxSeriesComponent_Factory(t) {\n  return new (t || BoxSeriesComponent)();\n};\n\nBoxSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-box-series\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    animations: \"animations\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipType: \"tooltipType\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c31,\n  decls: 1,\n  vars: 22,\n  consts: [[\"ngx-charts-box\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"roundEdges\", \"fill\", \"gradientStops\", \"strokeColor\", \"strokeWidth\", \"data\", \"lineCoordinates\", \"gradient\", \"ariaLabel\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"animations\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BoxSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"select\", function BoxSeriesComponent_Template__svg_g_select_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BoxSeriesComponent_Template__svg_g_activate_0_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function BoxSeriesComponent_Template__svg_g_deactivate_0_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx.animations)(\"width\", ctx.box.width)(\"height\", ctx.box.height)(\"x\", ctx.box.x)(\"y\", ctx.box.y)(\"roundEdges\", ctx.box.roundEdges)(\"fill\", ctx.box.color)(\"gradientStops\", ctx.box.gradientStops)(\"strokeColor\", ctx.strokeColor)(\"strokeWidth\", ctx.strokeWidth)(\"data\", ctx.box.data)(\"lineCoordinates\", ctx.box.lineCoordinates)(\"gradient\", ctx.gradient)(\"ariaLabel\", ctx.box.ariaLabel)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.tooltipPlacement)(\"tooltipType\", ctx.tooltipType)(\"tooltipTitle\", ctx.tooltipTitle)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.box.data)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [BoxComponent, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box-series]',\n      template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BoxChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    /** Show or hide the legend. */\n\n    this.legend = false;\n    this.legendPosition = LegendPosition.Right;\n    this.legendTitle = 'Legend';\n    this.showGridLines = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showXAxisLabel = true;\n    this.showYAxisLabel = true;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.strokeColor = '#FFFFFF';\n    this.strokeWidth = 2;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    /** Chart Margins (For each side, counterclock wise). */\n\n    this.margin = [10, 20, 10, 20];\n    /** Chart X axis dimension. */\n\n    this.xAxisHeight = 0;\n    /** Chart Y axis dimension. */\n\n    this.yAxisWidth = 0;\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  setColors() {\n    let domain = [];\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  setScales() {\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n  }\n\n  getXScale(domain, width) {\n    const scale = scaleBand().domain(domain.map(d => d.toString())).rangeRound([0, width]).padding(0.5);\n    return scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().domain(domain).range([height, 0]);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getUniqueBoxChartXDomainValues(results) {\n    const valueSet = new Set();\n\n    for (const result of results) {\n      valueSet.add(result.name);\n    }\n\n    return Array.from(valueSet);\n  }\n\n  getXDomain() {\n    let domain = [];\n    const values = this.getUniqueBoxChartXDomainValues(this.results);\n    let min;\n    let max;\n\n    if (typeof values[0] === 'string') {\n      domain = values.map(val => val.toString());\n    } else if (typeof values[0] === 'number') {\n      const mappedValues = values.map(v => Number(v));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [min, max];\n    } else {\n      const mappedValues = values.map(v => Number(new Date(v)));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [new Date(min), new Date(max)];\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    const mappedValues = values.map(v => Number(v));\n    const min = Math.min(...mappedValues);\n    const max = Math.max(...mappedValues);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => `${d.name}`);\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  onActivate(data) {\n    this.activate.emit(data);\n  }\n\n  onDeactivate(data) {\n    this.deactivate.emit(data);\n  }\n\n  getLegendOptions() {\n    const legendOpts = {\n      scaleType: this.schemeType,\n      colors: this.colors,\n      domain: [],\n      position: this.legendPosition,\n      title: this.legendTitle\n    };\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      legendOpts.domain = this.xDomain;\n      legendOpts.colors = this.colors;\n    } else {\n      legendOpts.domain = this.yDomain;\n      legendOpts.colors = this.colors.scale;\n    }\n\n    return legendOpts;\n  }\n\n}\n\nBoxChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBoxChartComponent_BaseFactory;\n  return function BoxChartComponent_Factory(t) {\n    return (ɵBoxChartComponent_BaseFactory || (ɵBoxChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BoxChartComponent)))(t || BoxChartComponent);\n  };\n}();\n\nBoxChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxChartComponent,\n  selectors: [[\"ngx-charts-box-chart\"]],\n  contentQueries: function BoxChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendPosition: \"legendPosition\",\n    legendTitle: \"legendTitle\",\n    legendOptionsConfig: \"legendOptionsConfig\",\n    showGridLines: \"showGridLines\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    roundDomains: \"roundDomains\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    roundEdges: \"roundEdges\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 23,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"box-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"dims\", \"yScale\", \"showLabel\", \"labelText\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-box-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"roundEdges\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"series\", \"dims\", \"animations\", \"gradient\", \"activate\", \"deactivate\", \"select\"]],\n  template: function BoxChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_2_listener($event) {\n        return ctx.updateXAxisHeight($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 3);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_3_listener($event) {\n        return ctx.updateYAxisWidth($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\");\n      i0.ɵɵtemplate(5, BoxChartComponent__svg_g_5_Template, 2, 12, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(20, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"xScale\", ctx.xScale)(\"showLabel\", ctx.showXAxisLabel)(\"labelText\", ctx.xAxisLabel)(\"wrapTicks\", ctx.wrapTicks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"yScale\", ctx.yScale)(\"showLabel\", ctx.showYAxisLabel)(\"labelText\", ctx.yAxisLabel)(\"wrapTicks\", ctx.wrapTicks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, BoxSeriesComponent, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-box-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendOptionsConfig: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass BoxChartModule {}\n\nBoxChartModule.ɵfac = function BoxChartModule_Factory(t) {\n  return new (t || BoxChartModule)();\n};\n\nBoxChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BoxChartModule\n});\nBoxChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n      exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n    }]\n  }], null, null);\n})();\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n  let domain = [];\n\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const min = minVal || minVal === 0 ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nfunction getScale(domain, range, scaleType, roundDomains) {\n  switch (scaleType) {\n    case ScaleType.Time:\n      return scaleTime().range(range).domain(domain);\n\n    case ScaleType.Linear:\n      {\n        const scale = scaleLinear().range(range).domain(domain);\n\n        if (roundDomains) {\n          return scale.nice();\n        }\n\n        return scale;\n      }\n\n    case ScaleType.Ordinal:\n      return scalePoint().range([range[0], range[1]]).domain(domain.map(r => r.toString()));\n\n    default:\n      return undefined;\n  }\n}\n\nclass BubbleSeriesComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.circles = this.getCircles();\n  }\n\n  getCircles() {\n    const seriesName = this.data.name;\n    return this.data.series.map((d, i) => {\n      if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n        const y = d.y;\n        const x = d.x;\n        const r = d.r;\n        const radius = this.rScale(r || 1);\n        const tooltipLabel = formatLabel(d.name);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n        const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n        const isActive = !this.activeEntries.length ? true : this.isActive({\n          name: seriesName\n        });\n        const opacity = isActive ? 1 : 0.3;\n        const data = Object.assign({}, d, {\n          series: seriesName,\n          name: d.name,\n          value: d.y,\n          x: d.x,\n          radius: d.r\n        });\n        return {\n          data,\n          x,\n          y,\n          r,\n          classNames: [`circle-data-${i}`],\n          value: y,\n          label: x,\n          cx,\n          cy,\n          radius,\n          tooltipLabel,\n          color,\n          opacity,\n          seriesName,\n          isActive,\n          transform: `translate(${cx},${cy})`\n        };\n      }\n    }).filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle) {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name = hasSeriesName && hasTooltipLabel ? `${circle.seriesName} • ${circle.tooltipLabel}` : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle) {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({\n        name: circle.seriesName\n      });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle) {\n    circle.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n\n  deactivateCircle(circle) {\n    circle.barVisible = false;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n\n  trackBy(index, circle) {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n\n}\n\nBubbleSeriesComponent.ɵfac = function BubbleSeriesComponent_Factory(t) {\n  return new (t || BubbleSeriesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nBubbleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-bubble-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    rScale: \"rScale\",\n    xScaleType: \"xScaleType\",\n    yScaleType: \"yScaleType\",\n    colors: \"colors\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c32,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"active\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BubbleSeriesComponent__svg_g_0_Template, 4, 3, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [CircleComponent, i2.NgForOf, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }), animate(250, style({\n      opacity: 1,\n      transform: 'scale(1)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bubble-series]',\n      template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }), animate(250, style({\n        opacity: 1,\n        transform: 'scale(1)'\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    rScale: [{\n      type: Input\n    }],\n    xScaleType: [{\n      type: Input\n    }],\n    yScaleType: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BubbleChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.showGridLines = true;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.maxRadius = 10;\n    this.minRadius = 3;\n    this.schemeType = ScaleType.Ordinal;\n    this.tooltipDisabled = false;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.scaleType = ScaleType.Linear;\n    this.margin = [10, 20, 10, 20];\n    this.bubblePadding = [0, 0, 0, 0];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.activeEntries = [];\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n    const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n    this.data = this.results;\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n    this.legendOptions = this.getLegendOptions();\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  hideCircles() {\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n\n    let height = this.dims.height;\n\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height) {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width) {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range) {\n    const scale = scaleLinear().range(range).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain() {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n}\n\nBubbleChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBubbleChartComponent_BaseFactory;\n  return function BubbleChartComponent_Factory(t) {\n    return (ɵBubbleChartComponent_BaseFactory || (ɵBubbleChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BubbleChartComponent)))(t || BubbleChartComponent);\n  };\n}();\n\nBubbleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleChartComponent,\n  selectors: [[\"ngx-charts-bubble-chart\"]],\n  contentQueries: function BubbleChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function BubbleChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function BubbleChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    showGridLines: \"showGridLines\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    maxRadius: \"maxRadius\",\n    minRadius: \"minRadius\",\n    autoScale: \"autoScale\",\n    schemeType: \"schemeType\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 19,\n  consts: [[3, \"view\", \"showLegend\", \"activeEntries\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bubble-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"x\", \"0\", \"y\", \"0\", 1, \"bubble-chart-area\", 2, \"fill\", \"rgb(255, 0, 0)\", \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mouseenter\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bubble-series\", \"\", 3, \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"xAxisLabel\", \"yAxisLabel\", \"colors\", \"data\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, BubbleChartComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, BubbleChartComponent__svg_g_6_Template, 1, 10, \"g\", 3);\n      i0.ɵɵelementStart(7, \"rect\", 4);\n      i0.ɵɵlistener(\"mouseenter\", function BubbleChartComponent_Template__svg_rect_mouseenter_7_listener() {\n        return ctx.deactivateAll();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, BubbleChartComponent__svg_g_8_Template, 2, 3, \"g\", 5);\n      i0.ɵɵtemplate(9, BubbleChartComponent__svg_g_9_Template, 2, 3, \"g\", 5);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(16, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"activeEntries\", ctx.activeEntries)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, BubbleSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bubble-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    showGridLines: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    maxRadius: [{\n      type: Input\n    }],\n    minRadius: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass BubbleChartModule {}\n\nBubbleChartModule.ɵfac = function BubbleChartModule_Factory(t) {\n  return new (t || BubbleChartModule)();\n};\n\nBubbleChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BubbleChartModule\n});\nBubbleChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BubbleChartComponent, BubbleSeriesComponent],\n      exports: [BubbleChartComponent, BubbleSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass HeatMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.transform = `translate(${this.x} , ${this.y})`;\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n}\n\nHeatMapCellComponent.ɵfac = function HeatMapCellComponent_Factory(t) {\n  return new (t || HeatMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nHeatMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell\", \"\"]],\n  hostBindings: function HeatMapCellComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function HeatMapCellComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function HeatMapCellComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    data: \"data\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c33,\n  decls: 3,\n  vars: 5,\n  consts: [[1, \"cell\"], [4, \"ngIf\"], [\"rx\", \"3\", 1, \"cell\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function HeatMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, HeatMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"rect\", 2);\n      i0.ɵɵlistener(\"click\", function HeatMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass HeatCellSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n    return cells;\n  }\n\n  getTooltipText({\n    label,\n    data,\n    series\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n}\n\nHeatCellSeriesComponent.ɵfac = function HeatCellSeriesComponent_Factory(t) {\n  return new (t || HeatCellSeriesComponent)();\n};\n\nHeatCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    colors: \"colors\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c34,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function HeatCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, HeatCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [HeatMapCellComponent, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass HeatMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.innerPadding = 8;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.tooltipDisabled = false;\n    this.activeEntries = [];\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.scaleType = ScaleType.Linear;\n  }\n\n  update() {\n    super.update();\n    this.formatDates();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n    this.scaleType = getScaleType(this.valueDomain, false);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === ScaleType.Linear) {\n      let min = this.min;\n      let max = this.max;\n\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n\n\n  getDimension(value, index = 0, N, L) {\n    if (typeof value === 'string') {\n      value = value.replace('[', '').replace(']', '').replace('px', '') // tslint:disable-next-line: quotemark\n      .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n\n    return N / (L / +value + 1);\n  }\n\n  getXScale() {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale() {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects() {\n    const rects = [];\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n    return rects;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n      title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nHeatMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵHeatMapComponent_BaseFactory;\n  return function HeatMapComponent_Factory(t) {\n    return (ɵHeatMapComponent_BaseFactory || (ɵHeatMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(HeatMapComponent)))(t || HeatMapComponent);\n  };\n}();\n\nHeatMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapComponent,\n  selectors: [[\"ngx-charts-heat-map\"]],\n  contentQueries: function HeatMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    innerPadding: \"innerPadding\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    min: \"min\",\n    max: \"max\",\n    activeEntries: \"activeEntries\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"legendOptions\", \"legendLabelClick\"], [1, \"heat-map\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-heat-map-cell-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"]],\n  template: function HeatMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function HeatMapComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, HeatMapComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, HeatMapComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, HeatMapComponent__svg_rect_4_Template, 1, 6, \"rect\", 4);\n      i0.ɵɵelementStart(5, \"g\", 5);\n      i0.ɵɵlistener(\"select\", function HeatMapComponent_Template__svg_g_select_5_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function HeatMapComponent_Template__svg_g_activate_5_listener($event) {\n        return ctx.onActivate($event, undefined);\n      })(\"deactivate\", function HeatMapComponent_Template__svg_g_deactivate_5_listener($event) {\n        return ctx.onDeactivate($event, undefined);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"animations\", ctx.animations)(\"legendOptions\", ctx.legendOptions);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.rects);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"data\", ctx.results)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, HeatCellSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-heat-map',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass HeatMapModule {}\n\nHeatMapModule.ɵfac = function HeatMapModule_Factory(t) {\n  return new (t || HeatMapModule)();\n};\n\nHeatMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HeatMapModule\n});\nHeatMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n      exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n    }]\n  }], null, null);\n})();\n\nclass LineComponent {\n  constructor(element, platformId) {\n    this.element = element;\n    this.platformId = platformId;\n    this.fill = 'none';\n    this.animations = true; // @Output() select = new EventEmitter();\n\n    this.initialized = false;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl() {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n}\n\nLineComponent.ɵfac = function LineComponent_Factory(t) {\n  return new (t || LineComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nLineComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineComponent,\n  selectors: [[\"g\", \"ngx-charts-line\", \"\"]],\n  inputs: {\n    path: \"path\",\n    stroke: \"stroke\",\n    data: \"data\",\n    fill: \"fill\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c36,\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"stroke-width\", \"1.5px\", 1, \"line\"]],\n  template: function LineComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LineComponent__svg_g_0_Template, 2, 4, \"g\", 0);\n      i0.ɵɵtemplate(1, LineComponent__svg_g_1_Template, 2, 3, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [i2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      strokeDasharray: 2000,\n      strokeDashoffset: 2000\n    }), animate(1000, style({\n      strokeDashoffset: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line]',\n      template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        strokeDasharray: 2000,\n        strokeDashoffset: 2000\n      }), animate(1000, style({\n        strokeDashoffset: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    path: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LineSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.barOrientation = BarOrientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradients();\n    const data = this.sortData(this.data.series);\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator() {\n    return line().x(d => {\n      const label = d.name;\n      let value;\n\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n\n      return value;\n    }).y(d => this.yScale(d.value)).curve(this.curve);\n  }\n\n  getRangeGenerator() {\n    return area().x(d => {\n      const label = d.name;\n      let value;\n\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n\n      return value;\n    }).y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value)).y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value)).curve(this.curve);\n  }\n\n  getAreaGenerator() {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area().x(xProperty).y0(() => this.yScale.range()[0]).y1(d => this.yScale(d.value)).curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n}\n\nLineSeriesComponent.ɵfac = function LineSeriesComponent_Factory(t) {\n  return new (t || LineSeriesComponent)();\n};\n\nLineSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-line-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    hasRange: \"hasRange\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c37,\n  decls: 6,\n  vars: 22,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-area\", \"\", 1, \"line-highlight\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"startOpacity\", \"gradient\", \"stops\", \"animations\"], [\"ngx-charts-line\", \"\", 1, \"line-series\", 3, \"data\", \"path\", \"stroke\", \"animations\"], [\"ngx-charts-area\", \"\", \"class\", \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"active\", \"inactive\", \"opacity\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"ngx-charts-area\", \"\", 1, \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"animations\"]],\n  template: function LineSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\")(1, \"defs\");\n      i0.ɵɵtemplate(2, LineSeriesComponent__svg_g_2_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 1)(4, \"g\", 2);\n      i0.ɵɵtemplate(5, LineSeriesComponent__svg_g_5_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.areaPath)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.colors.getColor(ctx.data.name))(\"opacity\", 0.25)(\"startOpacity\", 0)(\"gradient\", true)(\"stops\", ctx.areaGradientStops)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"stroke\", ctx.stroke)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasRange);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, AreaComponent, LineComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line-series]',\n      template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    hasRange: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LineChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showRefLines = false;\n    this.showRefLabels = true;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n\n        if (d.min !== undefined) {\n          this.hasRange = true;\n\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n\n        if (d.max !== undefined) {\n          this.hasRange = true;\n\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nLineChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLineChartComponent_BaseFactory;\n  return function LineChartComponent_Factory(t) {\n    return (ɵLineChartComponent_BaseFactory || (ɵLineChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LineChartComponent)))(t || LineChartComponent);\n  };\n}();\n\nLineChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineChartComponent,\n  selectors: [[\"ngx-charts-line-chart\"]],\n  contentQueries: function LineChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function LineChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function LineChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showRefLines: \"showRefLines\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 12,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"line-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"wrapTicks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"hasRange\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"curve\", \"hasRange\", \"animations\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function LineChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\")(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, LineChartComponent__svg_g_5_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(6, LineChartComponent__svg_g_6_Template, 1, 13, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, LineChartComponent__svg_g_8_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(9, LineChartComponent__svg_g_9_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(10, LineChartComponent__svg_g_10_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(11, LineChartComponent__svg_g_11_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  dependencies: [ChartComponent, XAxisComponent, YAxisComponent, LineSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline, i2.NgIf, i2.NgForOf],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-line-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass LineChartModule {}\n\nLineChartModule.ɵfac = function LineChartModule_Factory(t) {\n  return new (t || LineChartModule)();\n};\n\nLineChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LineChartModule\n});\nLineChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n      exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass PieLabelComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.animations = true;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes) {\n    this.setTransforms();\n    this.update();\n  }\n\n  setTransforms() {\n    if (isPlatformServer(this.platformId)) {\n      this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = `translate(${this.textX},${this.textY})`;\n      this.textTransition = !this.animations ? null : 'transform 0.75s';\n    } else {\n      const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n      this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n      this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n    }\n  }\n\n  update() {\n    let startRadius = this.radius;\n\n    if (this.explodeSlices) {\n      startRadius = this.radius * this.value / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius); // Calculate innerPos then scale outer position to match label position\n\n    const innerPos = innerArc.centroid(this.data);\n    let scale = this.data.pos[1] / innerPos[1];\n\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX() {\n    return this.data.pos[0];\n  }\n\n  get textY() {\n    return this.data.pos[1];\n  }\n\n  textAnchor() {\n    return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n  }\n\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n}\n\nPieLabelComponent.ɵfac = function PieLabelComponent_Factory(t) {\n  return new (t || PieLabelComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nPieLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-label\", \"\"]],\n  inputs: {\n    data: \"data\",\n    radius: \"radius\",\n    label: \"label\",\n    color: \"color\",\n    max: \"max\",\n    value: \"value\",\n    explodeSlices: \"explodeSlices\",\n    animations: \"animations\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c38,\n  decls: 6,\n  vars: 17,\n  consts: [[\"dy\", \".35em\", 1, \"pie-label\"], [\"fill\", \"none\", 1, \"pie-label-line\", \"line\"]],\n  template: function PieLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"title\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(2, \"g\")(3, \"text\", 0);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(5, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"transform\", ctx.styleTransform)(\"transition\", ctx.textTransition);\n      i0.ɵɵattribute(\"transform\", ctx.attrTransform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", ctx.textAnchor())(\"shape-rendering\", \"crispEdges\");\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.labelTrim ? ctx.trimLabel(ctx.label, ctx.labelTrimSize) : ctx.label, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵattribute(\"d\", ctx.line)(\"stroke\", ctx.color);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-label]',\n      template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }]\n  });\n})();\n\nclass PolarSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.circleRadius = 3;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradients();\n    const line = this.getLineGenerator();\n    const data = this.sortData(this.data.series);\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n    this.path = line(data) || '';\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n\n    if (this.scaleType === ScaleType.Time) {\n      return this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      return this.xScale(Number(label));\n    }\n\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator() {\n    return lineRadial().angle(d => this.getAngle(d)).radius(d => this.getRadius(d)).curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      return sortByTime(data, 'name');\n    }\n\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n\n}\n\nPolarSeriesComponent.ɵfac = function PolarSeriesComponent_Factory(t) {\n  return new (t || PolarSeriesComponent)();\n};\n\nPolarSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-polar-series\", \"\"]],\n  inputs: {\n    name: \"name\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    gradient: \"gradient\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c39,\n  decls: 5,\n  vars: 11,\n  consts: [[1, \"polar-charts-series\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-line\", \"\", 1, \"polar-series-path\", 3, \"path\", \"stroke\", \"fill\", \"animations\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0)(1, \"defs\");\n      i0.ɵɵtemplate(2, PolarSeriesComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 2);\n      i0.ɵɵtemplate(4, PolarSeriesComponent__svg_g_4_Template, 1, 12, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.active)(\"inactive\", ctx.inactive);\n      i0.ɵɵproperty(\"path\", ctx.path)(\"stroke\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"animations\", ctx.animations);\n      i0.ɵɵattribute(\"fill-opacity\", ctx.rangeFillOpacity);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles);\n    }\n  },\n  dependencies: [SvgRadialGradientComponent, LineComponent, CircleComponent, i2.NgIf, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-polar-series]',\n      template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    name: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nconst twoPI = 2 * Math.PI;\n\nclass PolarChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveCardinalClosed;\n    this.activeEntries = [];\n    this.rangeFillOpacity = 0.15;\n    this.trimYAxisTicks = true;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showSeriesOnHover = true;\n    this.gradient = false;\n    this.yAxisMinScale = 0;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.wrapTicks = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter(); // series: any; // ???\n\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.orientation = Orientation;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.setDims();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n    const outerRadius = this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5);\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n    this.yAxisDims = { ...this.dims,\n      width: halfWidth\n    };\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n    const minDistance = 10;\n    /* from pie chart, abstract out -*/\n\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j]; // if they're on the same side\n\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()) {\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n\n    return values;\n  }\n\n  getYValues() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()) {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n    min = Math.max(0, min);\n\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    switch (this.scaleType) {\n      case ScaleType.Time:\n        return scaleTime().range([0, width]).domain(domain);\n\n      case ScaleType.Linear:\n        {\n          const scale = scaleLinear().range([0, width]).domain(domain);\n          return this.roundDomains ? scale.nice() : scale;\n        }\n\n      default:\n        return scalePoint().range([0, width - twoPI / domain.length]).padding(0).domain(domain);\n    }\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === ScaleType.Ordinal) {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n}\n\nPolarChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPolarChartComponent_BaseFactory;\n  return function PolarChartComponent_Factory(t) {\n    return (ɵPolarChartComponent_BaseFactory || (ɵPolarChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PolarChartComponent)))(t || PolarChartComponent);\n  };\n}();\n\nPolarChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarChartComponent,\n  selectors: [[\"ngx-charts-polar-chart\"]],\n  contentQueries: function PolarChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showSeriesOnHover: \"showSeriesOnHover\",\n    gradient: \"gradient\",\n    yAxisMinScale: \"yAxisMinScale\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\",\n    wrapTicks: \"wrapTicks\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 17,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"polar-chart\", \"chart\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"polar-chart-background\"], [4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"wrapTicks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"gridline-path radial-gridline-path\", \"cx\", \"0\", \"cy\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"gridline-path\", \"radial-gridline-path\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"wrapTicks\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-polar-series\", \"\", 3, \"gradient\", \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\");\n      i0.ɵɵelement(3, \"circle\", 2);\n      i0.ɵɵtemplate(4, PolarChartComponent__svg_g_4_Template, 2, 1, \"g\", 3);\n      i0.ɵɵtemplate(5, PolarChartComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, PolarChartComponent__svg_g_6_Template, 1, 10, \"g\", 4);\n      i0.ɵɵtemplate(7, PolarChartComponent__svg_g_7_Template, 1, 5, \"g\", 5);\n      i0.ɵɵtemplate(8, PolarChartComponent__svg_g_8_Template, 2, 3, \"g\", 3);\n      i0.ɵɵtemplate(9, PolarChartComponent__svg_g_9_Template, 2, 3, \"g\", 3);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(14, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transformPlot);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"r\", ctx.outerRadius);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showGridLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis && ctx.showXAxisLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  dependencies: [ChartComponent, PieLabelComponent, YAxisComponent, AxisLabelComponent, PolarSeriesComponent, i2.NgIf, i2.NgForOf],\n  styles: [_c25, \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-polar-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showSeriesOnHover: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    yAxisMinScale: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }],\n    wrapTicks: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass PieArcComponent {\n  constructor(element) {\n    this.startAngle = 0;\n    this.endAngle = Math.PI * 2;\n    this.cornerRadius = 0;\n    this.explodeSlices = false;\n    this.gradient = false;\n    this.animate = true;\n    this.pointerEvents = true;\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update() {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc() {\n    let outerRadius = this.outerRadius;\n\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = this.outerRadius * this.value / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().attrTween('d', function (d) {\n      this._current = this._current || d;\n      const copyOfD = Object.assign({}, d);\n      copyOfD.endAngle = copyOfD.startAngle;\n      const interpolater = interpolate(copyOfD, copyOfD);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    }).transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n\n  updateAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n\n  onClick() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n\n}\n\nPieArcComponent.ɵfac = function PieArcComponent_Factory(t) {\n  return new (t || PieArcComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nPieArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieArcComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-arc\", \"\"]],\n  inputs: {\n    fill: \"fill\",\n    startAngle: \"startAngle\",\n    endAngle: \"endAngle\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    cornerRadius: \"cornerRadius\",\n    value: \"value\",\n    max: \"max\",\n    data: \"data\",\n    explodeSlices: \"explodeSlices\",\n    gradient: \"gradient\",\n    animate: \"animate\",\n    pointerEvents: \"pointerEvents\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c40,\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"arc-group\"], [4, \"ngIf\"], [1, \"arc\", 3, \"click\", \"dblclick\", \"mouseenter\", \"mouseleave\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\"]],\n  template: function PieArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieArcComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"path\", 2);\n      i0.ɵɵlistener(\"click\", function PieArcComponent_Template__svg_path_click_2_listener() {\n        return ctx.onClick();\n      })(\"dblclick\", function PieArcComponent_Template__svg_path_dblclick_2_listener($event) {\n        return ctx.onDblClick($event);\n      })(\"mouseenter\", function PieArcComponent_Template__svg_path_mouseenter_2_listener() {\n        return ctx.activate.emit(ctx.data);\n      })(\"mouseleave\", function PieArcComponent_Template__svg_path_mouseleave_2_listener() {\n        return ctx.deactivate.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"pointer-events\", ctx.getPointerEvents());\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"fill\", ctx.getGradient());\n    }\n  },\n  dependencies: [SvgRadialGradientComponent, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-arc]',\n      template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    endAngle: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animate: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\n\nclass PieSeriesComponent {\n  constructor() {\n    this.series = [];\n    this.innerRadius = 60;\n    this.outerRadius = 80;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    const pieGenerator = pie().value(d => d.value).sort(null);\n    const arcData = pieGenerator(this.series);\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc() {\n    const factor = 1.5;\n    return arc().innerRadius(this.outerRadius * factor).outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData) {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n\n        if (!this.labelVisible(b)) {\n          continue;\n        } // if they're on the same side\n\n\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc) {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc) {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n\n    return this.label(myArc);\n  }\n\n  label(myArc) {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc) {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc) {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item) {\n    return item.data.name;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n}\n\nPieSeriesComponent.ɵfac = function PieSeriesComponent_Factory(t) {\n  return new (t || PieSeriesComponent)();\n};\n\nPieSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    series: \"series\",\n    dims: \"dims\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    explodeSlices: \"explodeSlices\",\n    showLabels: \"showLabels\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c41,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"gradient\", \"data\", \"max\", \"explodeSlices\", \"isActive\", \"animate\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", \"dblclick\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\"]],\n  template: function PieSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, PieSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [PieLabelComponent, PieArcComponent, i2.NgForOf, i2.NgIf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-series]',\n      template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    colors: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    showLabels: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width * 4 / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nAdvancedPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAdvancedPieChartComponent_BaseFactory;\n  return function AdvancedPieChartComponent_Factory(t) {\n    return (ɵAdvancedPieChartComponent_BaseFactory || (ɵAdvancedPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AdvancedPieChartComponent)))(t || AdvancedPieChartComponent);\n  };\n}();\n\nAdvancedPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedPieChartComponent,\n  selectors: [[\"ngx-charts-advanced-pie-chart\"]],\n  contentQueries: function AdvancedPieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    valueFormatting: \"valueFormatting\",\n    nameFormatting: \"nameFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 37,\n  consts: [[1, \"advanced-pie\", \"chart\"], [3, \"view\", \"showLegend\", \"animations\"], [1, \"pie\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"innerRadius\", \"activeEntries\", \"outerRadius\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"animations\", \"select\", \"activate\", \"deactivate\"], [1, \"advanced-pie-legend-wrapper\"], [3, \"data\", \"colors\", \"width\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\", \"select\", \"activate\", \"deactivate\"]],\n  template: function AdvancedPieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0)(2, \"ngx-charts-chart\", 1);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(3, \"g\", 2)(4, \"g\", 3);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelementStart(5, \"div\", 4)(6, \"ngx-charts-advanced-legend\", 5);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_select_6_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_activate_6_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_deactivate_6_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.dims.width, \"px\")(\"height\", ctx.dims.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(34, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.results)(\"innerRadius\", ctx.innerRadius)(\"activeEntries\", ctx.activeEntries)(\"outerRadius\", ctx.outerRadius)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.width - ctx.dims.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.results)(\"colors\", ctx.colors)(\"width\", ctx.width - ctx.dims.width - ctx.margin[1])(\"label\", ctx.label)(\"animations\", ctx.animations)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.nameFormatting)(\"percentageFormatting\", ctx.percentageFormatting);\n    }\n  },\n  dependencies: [ChartComponent, PieSeriesComponent, AdvancedLegendComponent],\n  styles: [_c25, \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedPieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-pie-chart',\n      template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"]\n    }]\n  }], null, {\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    nameFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nclass PieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.labels = false;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.explodeSlices = false;\n    this.doughnut = false;\n    this.arcWidth = 0.25;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.dblclick = new EventEmitter();\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  update() {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n\n    this.innerRadius = 0;\n\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain(); // sort data according to domain\n\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  hasNoOptionalMarginsSet() {\n    return !this.margins || this.margins.length <= 0;\n  }\n\n}\n\nPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieChartComponent_BaseFactory;\n  return function PieChartComponent_Factory(t) {\n    return (ɵPieChartComponent_BaseFactory || (ɵPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieChartComponent)))(t || PieChartComponent);\n  };\n}();\n\nPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieChartComponent,\n  selectors: [[\"ngx-charts-pie-chart\"]],\n  contentQueries: function PieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    labels: \"labels\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    explodeSlices: \"explodeSlices\",\n    doughnut: \"doughnut\",\n    arcWidth: \"arcWidth\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    margins: \"margins\"\n  },\n  outputs: {\n    dblclick: \"dblclick\",\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 24,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"pie-chart\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"showLabels\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"activeEntries\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"dblclick\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      })(\"legendLabelClick\", function PieChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"dblclick\", function PieChartComponent_Template__svg_g_dblclick_2_listener($event) {\n        return ctx.dblclick.emit($event);\n      })(\"select\", function PieChartComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function PieChartComponent_Template__svg_g_activate_2_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function PieChartComponent_Template__svg_g_deactivate_2_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(21, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.translation);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.data)(\"showLabels\", ctx.labels)(\"labelFormatting\", ctx.labelFormatting)(\"trimLabels\", ctx.trimLabels)(\"maxLabelLength\", ctx.maxLabelLength)(\"activeEntries\", ctx.activeEntries)(\"innerRadius\", ctx.innerRadius)(\"outerRadius\", ctx.outerRadius)(\"explodeSlices\", ctx.explodeSlices)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  dependencies: [ChartComponent, PieSeriesComponent],\n  styles: [_c25, _c42],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"]\n    }]\n  }], null, {\n    labels: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    doughnut: [{\n      type: Input\n    }],\n    arcWidth: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    dblclick: [{\n      type: Output\n    }],\n    margins: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nfunction gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale = scaleBand();\n  const yScale = scaleBand();\n  const width = dims.width;\n  const height = dims.height;\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n  const xDomain = [];\n  const yDomain = [];\n\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => d ? d.value : 0).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n  constructor(element) {\n    this.innerRadius = 70;\n    this.outerRadius = 80;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.layout = pie().value(d => d.data.value).sort(null);\n    this.arcs = this.getArcs();\n  }\n\n  getArcs() {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data) {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item) {\n    return item.data.name;\n  }\n\n  label(arc) {\n    return arc.data.name;\n  }\n\n  color(arc) {\n    return this.colors(this.label(arc));\n  }\n\n}\n\nPieGridSeriesComponent.ɵfac = function PieGridSeriesComponent_Factory(t) {\n  return new (t || PieGridSeriesComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nPieGridSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-grid-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    data: \"data\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c43,\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"pie-grid-arcs\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieGridSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieGridSeriesComponent__svg_g_1_Template, 1, 11, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [PieArcComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-grid-series]',\n      template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    colors: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass PieGridComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.minWidth = 150;\n    this.activeEntries = [];\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n    this.series = this.getSeries();\n    this.setColors();\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({\n    data\n  }) {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries() {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n      let count = 0;\n\n      const colors = () => {\n        count += 1;\n\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [d, {\n          data: {\n            other: true,\n            value: total - value,\n            name: d.data.name\n          }\n        }]\n      };\n    });\n  }\n\n  getTotal() {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nPieGridComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieGridComponent_BaseFactory;\n  return function PieGridComponent_Factory(t) {\n    return (ɵPieGridComponent_BaseFactory || (ɵPieGridComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieGridComponent)))(t || PieGridComponent);\n  };\n}();\n\nPieGridComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridComponent,\n  selectors: [[\"ngx-charts-pie-grid\"]],\n  contentQueries: function PieGridComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    designatedTotal: \"designatedTotal\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    minWidth: \"minWidth\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"pie-grid\", \"chart\"], [\"class\", \"pie-grid-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"pie-grid-item\"], [\"ngx-charts-pie-grid-series\", \"\", \"ngx-tooltip\", \"\", 3, \"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countPrefix\", 4, \"ngIf\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\", 3, \"countTo\", \"countSuffix\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 1, \"label\", 3, \"countTo\", \"countPrefix\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 1, \"label\"]],\n  template: function PieGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, PieGridComponent__svg_g_2_Template, 8, 19, \"g\", 2);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(5, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.series);\n    }\n  },\n  dependencies: [ChartComponent, PieGridSeriesComponent, CountUpDirective, i2.NgForOf, TooltipDirective, i2.NgIf],\n  styles: [_c25, \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-grid',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"]\n    }]\n  }], null, {\n    designatedTotal: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    minWidth: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass PieChartModule {}\n\nPieChartModule.ɵfac = function PieChartModule_Factory(t) {\n  return new (t || PieChartModule)();\n};\n\nPieChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PieChartModule\n});\nPieChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent],\n      exports: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass PolarChartModule {}\n\nPolarChartModule.ɵfac = function PolarChartModule_Factory(t) {\n  return new (t || PolarChartModule)();\n};\n\nPolarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PolarChartModule\n});\nPolarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, LineChartModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, LineChartModule],\n      declarations: [PolarChartComponent, PolarSeriesComponent],\n      exports: [PolarChartComponent, PolarSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n  return text.split('').reduce((acc, curr) => {\n    const width = fontFamilyKey[curr] || defaultWidth;\n    return acc + width;\n  }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n  '0': 10,\n  '1': 10,\n  '2': 10,\n  '3': 10,\n  '4': 10,\n  '5': 10,\n  '6': 10,\n  '7': 10,\n  '8': 10,\n  '9': 10,\n  A: 11,\n  B: 11,\n  C: 11,\n  D: 12,\n  E: 10,\n  F: 9,\n  G: 12,\n  H: 12,\n  I: 7,\n  J: 7,\n  K: 11,\n  L: 9,\n  M: 13,\n  N: 12,\n  O: 13,\n  P: 10,\n  Q: 13,\n  R: 11,\n  S: 11,\n  T: 10,\n  U: 12,\n  V: 11,\n  W: 16,\n  X: 11,\n  Y: 10,\n  Z: 11,\n  a: 10,\n  b: 10,\n  c: 8,\n  d: 10,\n  e: 10,\n  f: 6,\n  g: 10,\n  h: 10,\n  i: 4,\n  j: 6,\n  k: 9,\n  l: 4,\n  m: 16,\n  n: 10,\n  o: 10,\n  p: 10,\n  q: 10,\n  r: 7,\n  s: 8,\n  t: 6,\n  u: 10,\n  v: 9,\n  w: 13,\n  x: 9,\n  y: 9,\n  z: 8,\n  '!': 6,\n  '@': 16,\n  '#': 13,\n  $: 10,\n  '%': 17,\n  '^': 13,\n  '&': 12,\n  '*': 10,\n  '(': 7,\n  ')': 7,\n  _: 10,\n  '-': 7,\n  '+': 13,\n  '=': 13,\n  ',': 6,\n  '.': 6,\n  '/': 7,\n  \"'\": 4,\n  ':': 7,\n  '|': 7,\n  '?': 9,\n  ';': 7,\n  '<': 13,\n  '>': 13\n};\n\nclass CardComponent {\n  constructor(element, cd, zone, platformId) {\n    this.cd = cd;\n    this.zone = zone;\n    this.platformId = platformId;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.value = '';\n    this.textFontSize = 12;\n    this.textTransform = '';\n    this.initialized = false;\n    this.bandHeight = 10;\n    this.textPadding = [10, 20, 5, 20];\n    this.labelFontSize = 15;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR();\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }\n\n  update() {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n      this.label = this.label ? this.label : this.data.name;\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n      const value = hasValue ? valueFormatting(cardData) : '';\n      this.value = this.paddedValue(value);\n      this.setPadding();\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n      setTimeout(() => {\n        if (isPlatformBrowser(this.platformId)) {\n          this.scaleText();\n        }\n\n        this.value = value;\n\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n\n    return value;\n  }\n\n  startCount() {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({\n        value,\n        finished\n      }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({\n            label: this.label,\n            data: this.data,\n            value\n          });\n\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText() {\n    this.zone.run(() => {\n      const {\n        width,\n        height\n      } = this.textEl.nativeElement.getBoundingClientRect();\n\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  scaleTextSSR() {\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n    const height = 18;\n    const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const availableWidth = this.cardWidth - 2 * textPadding;\n    const availableHeight = this.cardHeight / 3;\n    const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n    this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n    this.labelFontSize = Math.min(this.textFontSize, 15);\n    this.setPadding();\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n}\n\nCardComponent.ɵfac = function CardComponent_Factory(t) {\n  return new (t || CardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardComponent,\n  selectors: [[\"g\", \"ngx-charts-card\", \"\"]],\n  viewQuery: function CardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    bandColor: \"bandColor\",\n    textColor: \"textColor\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    data: \"data\",\n    medianSize: \"medianSize\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c46,\n  decls: 10,\n  vars: 25,\n  consts: [[1, \"cell\", 3, \"click\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card\"], [\"class\", \"card-band\", \"stroke\", \"none\", 4, \"ngIf\"], [\"x\", \"5\", \"alignment-baseline\", \"hanging\", 1, \"trimmed-label\"], [3, \"innerHTML\"], [\"text-anchor\", \"start\", \"alignment-baseline\", \"hanging\", 1, \"value-text\"], [\"textEl\", \"\"], [\"stroke\", \"none\", 1, \"card-band\"]],\n  template: function CardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"click\", function CardComponent_Template__svg_g_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelement(1, \"rect\", 1);\n      i0.ɵɵtemplate(2, CardComponent__svg_path_2_Template, 1, 3, \"path\", 2);\n      i0.ɵɵelementStart(3, \"title\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"foreignObject\", 3);\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(6, \"p\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(7, \"text\", 5, 6);\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.color);\n      i0.ɵɵattribute(\"width\", ctx.cardWidth)(\"height\", ctx.cardHeight);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.bandColor && ctx.bandColor !== ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.cardHeight - ctx.textPadding[2])(\"width\", ctx.textWidth)(\"height\", ctx.labelFontSize + ctx.textPadding[2]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"color\", ctx.textColor)(\"font-size\", ctx.labelFontSize, \"px\")(\"line-height\", ctx.labelFontSize, \"px\");\n      i0.ɵɵproperty(\"innerHTML\", ctx.formattedLabel, i0.ɵɵsanitizeHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.textColor)(\"font-size\", ctx.textFontSize, \"pt\");\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.textPadding[0]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  dependencies: [i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    medianSize: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl', {\n        static: false\n      }]\n    }]\n  });\n})();\n/**\n * Converts a hex to RGB\n *\n * @export\n */\n\n\nfunction hexToRgb(value) {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\n\n\nfunction invertColor(value) {\n  const color = d3_color.rgb(value);\n  const {\n    r,\n    g,\n    b,\n    opacity\n  } = color;\n\n  if (opacity === 0) {\n    return color.toString();\n  }\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n  return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\n\n\nfunction shadeRGBColor({\n  r,\n  g,\n  b\n}, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n  return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n  constructor() {\n    this.innerPadding = 15;\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data.map(d => {\n        const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n        return hasValue ? valueFormatting({\n          data: d.data,\n          label: d ? d.data.name : '',\n          value: d && d.data ? d.data.value : ''\n        }).length : 0;\n      }).sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards() {\n    const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card) {\n    return card.label;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n}\n\nCardSeriesComponent.ɵfac = function CardSeriesComponent_Factory(t) {\n  return new (t || CardSeriesComponent)();\n};\n\nCardSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-card-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    innerPadding: \"innerPadding\",\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c47,\n  decls: 2,\n  vars: 4,\n  consts: [[\"class\", \"card-empty\", \"rx\", \"3\", \"ry\", \"3\", 3, \"fill\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card-empty\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function CardSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CardSeriesComponent__svg_rect_0_Template, 1, 6, \"rect\", 0);\n      i0.ɵɵtemplate(1, CardSeriesComponent__svg_g_1_Template, 1, 13, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.emptySlots)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cards)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [CardComponent, i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card-series]',\n      template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NumberCardComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.innerPadding = 15;\n    this.margin = [10, 10, 10, 10];\n  }\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({\n        value: null\n      });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n}\n\nNumberCardComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵNumberCardComponent_BaseFactory;\n  return function NumberCardComponent_Factory(t) {\n    return (ɵNumberCardComponent_BaseFactory || (ɵNumberCardComponent_BaseFactory = i0.ɵɵgetInheritedFactory(NumberCardComponent)))(t || NumberCardComponent);\n  };\n}();\n\nNumberCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NumberCardComponent,\n  selectors: [[\"ngx-charts-number-card\"]],\n  inputs: {\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    innerPadding: \"innerPadding\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    designatedTotal: \"designatedTotal\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"number-card\", \"chart\"], [\"ngx-charts-card-series\", \"\", 3, \"colors\", \"cardColor\", \"bandColor\", \"textColor\", \"emptyColor\", \"data\", \"dims\", \"innerPadding\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function NumberCardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function NumberCardComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"clickable\", ctx.clickable);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"cardColor\", ctx.cardColor)(\"bandColor\", ctx.bandColor)(\"textColor\", ctx.textColor)(\"emptyColor\", ctx.emptyColor)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"innerPadding\", ctx.innerPadding)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [ChartComponent, CardSeriesComponent],\n  styles: [_c25, \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-number-card',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"]\n    }]\n  }], null, {\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    designatedTotal: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NumberCardModule {}\n\nNumberCardModule.ɵfac = function NumberCardModule_Factory(t) {\n  return new (t || NumberCardModule)();\n};\n\nNumberCardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NumberCardModule\n});\nNumberCardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n      exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n    }]\n  }], null, null);\n})();\n\nclass TreeMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.initialized = false;\n    this.orientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges() {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update() {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n    this.animateToCurrentForm();\n  }\n\n  getTextColor() {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: 0.3\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n}\n\nTreeMapCellComponent.ɵfac = function TreeMapCellComponent_Factory(t) {\n  return new (t || TreeMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nTreeMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell\", \"\"]],\n  inputs: {\n    data: \"data\",\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c48,\n  decls: 4,\n  vars: 7,\n  consts: [[4, \"ngIf\"], [1, \"cell\", 3, \"click\"], [\"class\", \"treemap-label\", 3, \"pointer-events\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [1, \"treemap-label\"], [1, \"treemap-label\", 3, \"innerHTML\"], [\"class\", \"treemap-val\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"treemap-val\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"treemap-val\", 3, \"countTo\", \"valueFormatting\"], [1, \"treemap-val\"]],\n  template: function TreeMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, TreeMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵelementStart(2, \"rect\", 1);\n      i0.ɵɵlistener(\"click\", function TreeMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, TreeMapCellComponent__svg_foreignObject_3_Template, 6, 15, \"foreignObject\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.width >= 70 && ctx.height >= 35);\n    }\n  },\n  dependencies: [SvgLinearGradientComponent, CountUpDirective, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell]',\n      template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeMapCellSeriesComponent {\n  constructor() {\n    this.gradient = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.styleTypes = StyleTypes;\n    this.placementTypes = PlacementTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    return this.data.children.filter(d => {\n      return d.depth === 1;\n    }).map((d, index) => {\n      const label = d.id;\n      return {\n        data: d.data,\n        x: d.x0,\n        y: d.y0,\n        width: d.x1 - d.x0,\n        height: d.y1 - d.y0,\n        fill: this.colors.getColor(label),\n        label,\n        value: d.value\n      };\n    });\n  }\n\n  getTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nTreeMapCellSeriesComponent.ɵfac = function TreeMapCellSeriesComponent_Factory(t) {\n  return new (t || TreeMapCellSeriesComponent)();\n};\n\nTreeMapCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c49,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\"]],\n  template: function TreeMapCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreeMapCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  dependencies: [TreeMapCellComponent, i2.NgForOf, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.margin = [10, 10, 10, 10];\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.domain = this.getDomain();\n    this.treemap = treemap().size([this.dims.width, this.dims.height]);\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n    const root = stratify().id(d => {\n      let label = d.name;\n\n      if (label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label.toLocaleString();\n      }\n\n      return label;\n    }).parentId(d => d.isRoot ? null : 'root')([rootNode, ...this.results]).sum(d => d.value);\n    this.data = this.treemap(root);\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n}\n\nTreeMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵTreeMapComponent_BaseFactory;\n  return function TreeMapComponent_Factory(t) {\n    return (ɵTreeMapComponent_BaseFactory || (ɵTreeMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(TreeMapComponent)))(t || TreeMapComponent);\n  };\n}();\n\nTreeMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapComponent,\n  selectors: [[\"ngx-charts-tree-map\"]],\n  contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    results: \"results\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 16,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"tree-map\", \"chart\"], [\"ngx-charts-tree-map-cell-series\", \"\", 3, \"colors\", \"data\", \"dims\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"select\"]],\n  template: function TreeMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1)(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function TreeMapComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(13, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations);\n    }\n  },\n  dependencies: [ChartComponent, TreeMapCellSeriesComponent],\n  styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-tree-map',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"]\n    }]\n  }], null, {\n    results: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass TreeMapModule {}\n\nTreeMapModule.ɵfac = function TreeMapModule_Factory(t) {\n  return new (t || TreeMapModule)();\n};\n\nTreeMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeMapModule\n});\nTreeMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n      exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n    }]\n  }], null, null);\n})();\n\nvar ElementType;\n\n(function (ElementType) {\n  ElementType[\"Value\"] = \"value\";\n  ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\n\nclass LinearGaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.min = 0;\n    this.max = 100;\n    this.value = 0;\n    this.margin = [10, 20, 10, 20];\n    this.valueResizeScale = 1;\n    this.unitsResizeScale = 1;\n    this.valueTextTransform = '';\n    this.valueTranslate = '';\n    this.unitsTextTransform = '';\n    this.unitsTranslate = '';\n    this.barOrientation = BarOrientation;\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText(ElementType.Value);\n      this.scaleText(ElementType.Units);\n    });\n  }\n\n  update() {\n    super.update();\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.setColors();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR('value');\n      this.scaleTextSSR('units');\n    } else {\n      setTimeout(() => this.scaleText(ElementType.Value), 50);\n      setTimeout(() => this.scaleText(ElementType.Units), 50);\n    }\n  }\n\n  getValueDomain() {\n    return [this.min, this.max];\n  }\n\n  getValueScale() {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue() {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat = true) {\n    let el;\n    let resizeScale;\n\n    if (element === ElementType.Value) {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const {\n      width,\n      height\n    } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === ElementType.Value) {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n\n      this.cd.markForCheck();\n\n      if (repeat && isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  scaleTextSSR(element) {\n    let resizeScale = 1;\n    const value = element === 'value' ? this.displayValue : this.units;\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n    const height = 25;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (element === 'value') {\n      this.valueResizeScale = resizeScale;\n      this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    } else {\n      this.unitsResizeScale = resizeScale;\n      this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  onClick() {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n  }\n\n}\n\nLinearGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLinearGaugeComponent_BaseFactory;\n  return function LinearGaugeComponent_Factory(t) {\n    return (ɵLinearGaugeComponent_BaseFactory || (ɵLinearGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LinearGaugeComponent)))(t || LinearGaugeComponent);\n  };\n}();\n\nLinearGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LinearGaugeComponent,\n  selectors: [[\"ngx-charts-linear-gauge\"]],\n  viewQuery: function LinearGaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c50, 5);\n      i0.ɵɵviewQuery(_c51, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.valueTextEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.unitsTextEl = _t.first);\n    }\n  },\n  inputs: {\n    min: \"min\",\n    max: \"max\",\n    value: \"value\",\n    units: \"units\",\n    previousValue: \"previousValue\",\n    valueFormatting: \"valueFormatting\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 15,\n  vars: 38,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"click\"], [1, \"linear-gauge\", \"chart\"], [\"ngx-charts-bar\", \"\", 1, \"background-bar\", 3, \"width\", \"height\", \"x\", \"y\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"ngx-charts-bar\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\", 4, \"ngIf\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\", 4, \"ngIf\"], [\"alignment-baseline\", \"after-edge\", 1, \"value\"], [\"valueTextEl\", \"\"], [\"alignment-baseline\", \"before-edge\", 1, \"units\"], [\"unitsTextEl\", \"\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\"]],\n  template: function LinearGaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"click\", function LinearGaugeComponent_Template_ngx_charts_chart_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2)(3, \"g\", 3);\n      i0.ɵɵtemplate(4, LinearGaugeComponent__svg_line_4_Template, 1, 2, \"line\", 4);\n      i0.ɵɵtemplate(5, LinearGaugeComponent__svg_line_5_Template, 1, 2, \"line\", 5);\n      i0.ɵɵelementStart(6, \"g\")(7, \"g\")(8, \"text\", 6, 7);\n      i0.ɵɵtext(10);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"g\")(12, \"text\", 8, 9);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(33, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"width\", ctx.dims.width)(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"data\", i0.ɵɵpureFunction0(36, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"width\", ctx.valueScale(ctx.value))(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"fill\", ctx.colors.getColor(ctx.units))(\"data\", i0.ɵɵpureFunction0(37, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.valueTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.valueTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayValue, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.unitsTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.unitsTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.units, \" \");\n    }\n  },\n  dependencies: [ChartComponent, BarComponent, i2.NgIf],\n  styles: [_c25, \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LinearGaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-linear-gauge',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"]\n    }]\n  }], null, {\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    previousValue: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    valueTextEl: [{\n      type: ViewChild,\n      args: ['valueTextEl']\n    }],\n    unitsTextEl: [{\n      type: ViewChild,\n      args: ['unitsTextEl']\n    }]\n  });\n})();\n\nclass GaugeArcComponent {\n  constructor() {\n    this.isActive = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  tooltipText(arc) {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n}\n\nGaugeArcComponent.ɵfac = function GaugeArcComponent_Factory(t) {\n  return new (t || GaugeArcComponent)();\n};\n\nGaugeArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeArcComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-arc\", \"\"]],\n  inputs: {\n    backgroundArc: \"backgroundArc\",\n    valueArc: \"valueArc\",\n    cornerRadius: \"cornerRadius\",\n    colors: \"colors\",\n    isActive: \"isActive\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  attrs: _c53,\n  decls: 2,\n  vars: 23,\n  consts: [[\"ngx-charts-pie-arc\", \"\", 1, \"background-arc\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"data\", \"animate\", \"pointerEvents\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"fill\", \"data\", \"animate\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function GaugeArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵlistener(\"select\", function GaugeArcComponent_Template__svg_g_select_1_listener($event) {\n        return ctx.select.emit($event);\n      })(\"activate\", function GaugeArcComponent_Template__svg_g_activate_1_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function GaugeArcComponent_Template__svg_g_deactivate_1_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.backgroundArc.endAngle)(\"innerRadius\", ctx.backgroundArc.innerRadius)(\"outerRadius\", ctx.backgroundArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"data\", ctx.backgroundArc.data)(\"animate\", false)(\"pointerEvents\", false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.valueArc.endAngle)(\"innerRadius\", ctx.valueArc.innerRadius)(\"outerRadius\", ctx.valueArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"fill\", ctx.colors.getColor(ctx.valueArc.data.name))(\"data\", ctx.valueArc.data)(\"animate\", ctx.animations)(\"isActive\", ctx.isActive)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Top)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipTitle\", ctx.tooltipTemplate ? undefined : ctx.tooltipText(ctx.valueArc))(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.valueArc.data);\n    }\n  },\n  dependencies: [PieArcComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-arc]',\n      template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    backgroundArc: [{\n      type: Input\n    }],\n    valueArc: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GaugeAxisComponent {\n  constructor() {\n    this.rotate = '';\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks() {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = angleDeg * Math.PI / 180;\n      const textAnchor = this.getTextAnchor(angleDeg);\n      let skip = false;\n\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = smallAngleDeg * Math.PI / 180;\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = TextAnchor.Middle;\n\n    if (angle > 45 && angle <= 135) {\n      textAnchor = TextAnchor.Start;\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = TextAnchor.End;\n    }\n\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle) {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n    const points = [{\n      x: x1,\n      y: y1\n    }, {\n      x: x2,\n      y: y2\n    }];\n    const lineGenerator = line().x(d => d.x).y(d => d.y);\n    return lineGenerator(points);\n  }\n\n}\n\nGaugeAxisComponent.ɵfac = function GaugeAxisComponent_Factory(t) {\n  return new (t || GaugeAxisComponent)();\n};\n\nGaugeAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-axis\", \"\"]],\n  inputs: {\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    min: \"min\",\n    max: \"max\",\n    angleSpan: \"angleSpan\",\n    startAngle: \"startAngle\",\n    radius: \"radius\",\n    valueScale: \"valueScale\",\n    tickFormatting: \"tickFormatting\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c54,\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"gauge-tick gauge-tick-large\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gauge-tick gauge-tick-small\", 4, \"ngFor\", \"ngForOf\"], [1, \"gauge-tick\", \"gauge-tick-large\"], [\"alignment-baseline\", \"central\"], [1, \"gauge-tick\", \"gauge-tick-small\"]],\n  template: function GaugeAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, GaugeAxisComponent__svg_g_1_Template, 2, 1, \"g\", 0);\n      i0.ɵɵtemplate(2, GaugeAxisComponent__svg_g_2_Template, 3, 4, \"g\", 0);\n      i0.ɵɵtemplate(3, GaugeAxisComponent__svg_g_3_Template, 2, 1, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.rotate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.small);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-axis]',\n      template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    valueScale: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.min = 0;\n    this.max = 100;\n    this.bigSegments = 10;\n    this.smallSegments = 5;\n    this.showAxis = true;\n    this.startAngle = -120;\n    this.angleSpan = 240;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.showText = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.resizeScale = 1;\n    this.rotation = '';\n    this.textTransform = 'scale(1, 1)';\n    this.cornerRadius = 10;\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    } // make the starting angle positive\n\n\n    if (this.startAngle < 0) {\n      this.startAngle = this.startAngle % 360 + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n    this.arcs = this.getArcs();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs() {\n    const arcs = [];\n    const availableRadius = this.outerRadius * 0.7;\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n    let i = 0;\n\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n      const backgroundArc = {\n        endAngle: this.angleSpan * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n      const valueArc = {\n        endAngle: Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain() {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale() {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue() {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat = true) {\n    if (!this.showText) {\n      return;\n    }\n\n    const {\n      width\n    } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor(availableSpace / (width / this.resizeScale) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item) {\n    return item.valueArc.data.name;\n  }\n\n}\n\nGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵGaugeComponent_BaseFactory;\n  return function GaugeComponent_Factory(t) {\n    return (ɵGaugeComponent_BaseFactory || (ɵGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(GaugeComponent)))(t || GaugeComponent);\n  };\n}();\n\nGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeComponent,\n  selectors: [[\"ngx-charts-gauge\"]],\n  contentQueries: function GaugeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  viewQuery: function GaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    min: \"min\",\n    max: \"max\",\n    textValue: \"textValue\",\n    units: \"units\",\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    results: \"results\",\n    showAxis: \"showAxis\",\n    startAngle: \"startAngle\",\n    angleSpan: \"angleSpan\",\n    activeEntries: \"activeEntries\",\n    axisTickFormatting: \"axisTickFormatting\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    showText: \"showText\",\n    margin: \"margin\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"gauge\", \"chart\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\", 4, \"ngIf\"], [\"alignment-baseline\", \"central\", 3, \"textAnchor\", 4, \"ngIf\"], [\"ngx-charts-gauge-arc\", \"\", 3, \"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\"], [\"alignment-baseline\", \"central\"], [\"textEl\", \"\"], [\"x\", \"0\", \"dy\", \"0\"], [\"x\", \"0\", \"dy\", \"1.2em\"]],\n  template: function GaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function GaugeComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, GaugeComponent__svg_g_2_Template, 2, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, GaugeComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, GaugeComponent__svg_text_4_Template, 6, 5, \"text\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showText);\n    }\n  },\n  dependencies: [ChartComponent, GaugeArcComponent, GaugeAxisComponent, i2.NgForOf, i2.NgIf],\n  styles: [_c25, \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-gauge',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    textValue: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    showAxis: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    axisTickFormatting: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    showText: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl']\n    }]\n  });\n})();\n\nclass GaugeModule {}\n\nGaugeModule.ɵfac = function GaugeModule_Factory(t) {\n  return new (t || GaugeModule)();\n};\n\nGaugeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GaugeModule\n});\nGaugeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, BarChartModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, BarChartModule],\n      declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n      exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n    }]\n  }], null, null);\n})(); // The export is needed here to generate a valid polyfills.metadata.json file\n\n\nfunction ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n\nclass SankeyComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.showLabels = true;\n    this.tooltipDisabled = false;\n    this.activeEntries = [];\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 10, 10, 10];\n    this.scaleType = ScaleType.Ordinal;\n    this.styleTypes = StyleTypes;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      legendType: this.scaleType\n    });\n    const linkDefs = this.results;\n    const nodeDefs = Array.from(new Set(linkDefs.flatMap(l => [l.source, l.target])), name => ({\n      name,\n      value: linkDefs.filter(l => l.source === name).reduce((acc, l) => acc + l.value, 0)\n    })); // Configure generator\n\n    const sankeyGenerator = sankey().nodeId(d => d.name).nodeAlign(sankeyLeft).nodeWidth(15).nodePadding(10).extent([[1, 5], [this.dims.width - 1, this.dims.height - 5]]); // Generate links and nodes\n\n    const data = sankeyGenerator({\n      nodes: nodeDefs.map(d => Object.assign({}, d)),\n      links: linkDefs.map(d => Object.assign({}, d))\n    });\n    this.valueDomain = this.getValueDomain(data.nodes);\n    this.setColors();\n    this.nodeRects = data.nodes.map(node => {\n      const rect = {\n        x: node.x0,\n        y: node.y0,\n        height: node.y1 - node.y0,\n        width: node.x1 - node.x0,\n        fill: this.colors.getColor(node.name),\n        tooltip: this.getNodeTooltipText(node),\n        rx: 5,\n        data: {\n          name: node.name,\n          value: node.value\n        },\n        transform: '',\n        label: this.labelFormatting ? this.labelFormatting(node.name) : node.name,\n        labelAnchor: TextAnchor.Start\n      };\n      rect.labelAnchor = this.getTextAnchor(node);\n      rect.transform = `translate(${rect.x},${rect.y})`;\n      return rect;\n    });\n    this.linkPaths = data.links.map(link => {\n      const gradientId = 'mask' + id().toString();\n      const linkPath = {\n        path: sankeyLinkHorizontal()(link),\n        strokeWidth: Math.max(1, link.width),\n        tooltip: this.getLinkTooltipText(link.source, link.target, link.value),\n        id: gradientId,\n        gradientFill: `url(#${gradientId})`,\n        source: link.source,\n        target: link.target,\n        startColor: this.colors.getColor(link.source.name),\n        endColor: this.colors.getColor(link.target.name),\n        data: {\n          source: link.source.name,\n          target: link.target.name,\n          value: link.value\n        }\n      };\n      return linkPath;\n    });\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getNodeTooltipText(node) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(node.name)}</span>\n      <span class=\"tooltip-val\">${node.value.toLocaleString()}</span>\n    `;\n  }\n\n  getLinkTooltipText(sourceNode, targetNode, value) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(sourceNode.name)} • ${escapeLabel(targetNode.name)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()} (${(value / sourceNode.value).toLocaleString(undefined, {\n      style: 'percent',\n      maximumFractionDigits: 2\n    })})</span>\n    `;\n  }\n\n  getTextAnchor(node) {\n    if (node.layer === 0) {\n      return TextAnchor.Start;\n    } else {\n      return TextAnchor.End;\n    }\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getValueDomain(nodes) {\n    return nodes.map(n => n.name);\n  }\n\n}\n\nSankeyComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵSankeyComponent_BaseFactory;\n  return function SankeyComponent_Factory(t) {\n    return (ɵSankeyComponent_BaseFactory || (ɵSankeyComponent_BaseFactory = i0.ɵɵgetInheritedFactory(SankeyComponent)))(t || SankeyComponent);\n  };\n}();\n\nSankeyComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SankeyComponent,\n  selectors: [[\"ngx-charts-sankey\"]],\n  contentQueries: function SankeyComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    showLabels: \"showLabels\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    activeEntries: \"activeEntries\",\n    labelFormatting: \"labelFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 9,\n  consts: [[3, \"view\", \"animations\"], [1, \"sankey\", \"chart\"], [\"class\", \"link\", \"ngx-tooltip\", \"\", 3, \"tooltipDisabled\", \"tooltipType\", \"tooltipPlacement\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"node\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-tooltip\", \"\", 1, \"link\", 3, \"tooltipDisabled\", \"tooltipType\", \"tooltipPlacement\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\"], [\"gradientUnits\", \"userSpaceOnUse\"], [\"offset\", \"0%\"], [\"offset\", \"100%\"], [\"stroke-opacity\", \"0.5\", \"fill\", \"none\", 3, \"click\", \"mouseenter\"], [1, \"node\"], [\"ngx-tooltip\", \"\", 3, \"tooltipDisabled\", \"tooltipType\", \"tooltipPlacement\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"click\", \"mouseenter\"], [\"class\", \"label\", \"dy\", \"0.35em\", 4, \"ngIf\"], [\"dy\", \"0.35em\", 1, \"label\"]],\n  template: function SankeyComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, SankeyComponent__svg_g_2_Template, 6, 14, \"g\", 2);\n      i0.ɵɵtemplate(3, SankeyComponent__svg_g_3_Template, 2, 12, \"g\", 3);\n      i0.ɵɵtemplate(4, SankeyComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(6, _c24, ctx.width, ctx.height))(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.linkPaths);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.nodeRects);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.nodeRects);\n    }\n  },\n  dependencies: [ChartComponent, i2.NgForOf, TooltipDirective, i2.NgIf],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SankeyComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-sankey',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"sankey chart\">\n        <svg:g\n          *ngFor=\"let link of linkPaths\"\n          class=\"link\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : link.tooltip\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"link.data\"\n        >\n          <svg:defs>\n            <svg:linearGradient\n              [attr.id]=\"link.id\"\n              gradientUnits=\"userSpaceOnUse\"\n              [attr.x1]=\"link.source.x1\"\n              [attr.x2]=\"link.target.x0\"\n            >\n              <svg:stop offset=\"0%\" [attr.stop-color]=\"link.startColor\"></svg:stop>\n              <svg:stop offset=\"100%\" [attr.stop-color]=\"link.endColor\"></svg:stop>\n            </svg:linearGradient>\n          </svg:defs>\n          <svg:path\n            [attr.d]=\"link.path\"\n            [attr.stroke]=\"link.gradientFill\"\n            [attr.stroke-width]=\"link.strokeWidth\"\n            stroke-opacity=\"0.5\"\n            fill=\"none\"\n            (click)=\"select.emit(link.data)\"\n            (mouseenter)=\"activate.emit(link.data)\"\n          ></svg:path>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\" class=\"node\">\n          <svg:rect\n            [attr.x]=\"0\"\n            [attr.y]=\"0\"\n            [attr.width]=\"rect.width\"\n            [attr.height]=\"rect.height\"\n            [attr.fill]=\"rect.fill\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : rect.tooltip\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"rect.data\"\n            (click)=\"select.emit(rect.data)\"\n            (mouseenter)=\"activate.emit(rect.data)\"\n          ></svg:rect>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\">\n          <svg:text\n            *ngIf=\"showLabels && rect.height > 15\"\n            class=\"label\"\n            [attr.x]=\"rect.width + 5\"\n            [attr.y]=\"rect.height / 2\"\n            [attr.text-anchor]=\"rect.labelAnchor\"\n            dy=\"0.35em\"\n            [attr.dx]=\"rect.labelAnchor === 'end' ? -25 : 0\"\n          >\n            {{ rect.label }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    showLabels: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass SankeyModule {}\n\nSankeyModule.ɵfac = function SankeyModule_Factory(t) {\n  return new (t || SankeyModule)();\n};\n\nSankeyModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: SankeyModule\n});\nSankeyModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SankeyModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [SankeyComponent],\n      exports: [SankeyComponent]\n    }]\n  }], null, null);\n})();\n\nclass NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n\n}\n\nNgxChartsModule.ɵfac = function NgxChartsModule_Factory(t) {\n  return new (t || NgxChartsModule)();\n};\n\nNgxChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxChartsModule\n});\nNgxChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, SankeyModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxChartsModule, [{\n    type: NgModule,\n    args: [{\n      exports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, SankeyModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction tickFormat(fieldType, groupByType) {\n  return function (label) {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(label);\n    }\n\n    return label.toString();\n  };\n}\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, SankeyComponent, SankeyModule, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getTickLines, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };","map":{"version":3,"names":["i0","PLATFORM_ID","Component","ViewEncapsulation","Inject","Input","ViewChild","HostBinding","HostListener","Injectable","ChangeDetectionStrategy","EventEmitter","Output","Directive","NgModule","ContentChild","i2","isPlatformBrowser","isPlatformServer","CommonModule","__decorate","DomPortalOutlet","ComponentPortal","fromEvent","debounceTime","trigger","transition","style","animate","select","brushX","scaleTime","scaleLinear","scalePoint","scaleOrdinal","scaleQuantile","scaleBand","area","curveLinear","line","arc","lineRadial","curveCardinalClosed","pie","range","min","max","quantile","interpolate","easeSinInOut","rfdc","format","d3_color","treemap","stratify","sankey","sankeyLeft","sankeyLinkHorizontal","timeFormat","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","arguments","clearTimeout","trailing","setTimeout","throttleable","duration","innerDecorator","target","key","descriptor","configurable","enumerable","get","getter","Object","defineProperty","value","PlacementTypes","caretOffset","verticalPosition","elDimensions","popoverDimensions","alignment","Top","top","Bottom","height","Center","undefined","horizontalPosition","Left","left","Right","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","positionContent","determinePlacement","TooltipContentComponent","constructor","element","renderer","platformId","cssClasses","clz","type","cssClass","ngAfterViewInit","position","bind","nativeElm","nativeElement","host","getBoundingClientRect","checkFlip","showCaret","addClass","setStyle","caretElm","onWindowResize","ɵfac","ElementRef","Renderer2","ɵcmp","NgIf","NgTemplateOutlet","prototype","selector","template","encapsulation","None","styles","decorators","title","InjectionRegisteryService","injectionService","defaults","components","Map","getByType","create","bindings","createByType","assignDefaults","component","injectComponent","register","destroy","instance","compsByType","componentType","length","idx","indexOf","splice","destroyAll","destroyByType","comps","i","appendComponent","inputs","outputs","has","set","types","push","isViewContainerRef","x","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","Error","setRootViewContainer","getComponentRootNode","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindingKeys","getOwnPropertyNames","bindingName","eventKeys","eventName","componentClass","appendLocation","portalHost","portal","componentRef","attach","ApplicationRef","ComponentFactoryResolver","Injector","ɵprov","TooltipService","LegendPosition","LegendType","ScaleType","ScaleLegendComponent","horizontal","ngOnChanges","changes","gradientValues","gradientString","colors","domain","direction","gradient","splits","pairs","reverse","forEach","c","Math","round","join","changeDetection","OnPush","valueRange","formatLabel","label","toLocaleDateString","toLocaleString","escapeLabel","replace","match","LegendEntryComponent","isActive","activate","deactivate","toggle","trimmedLabel","formattedLabel","onMouseEnter","emit","name","onMouseLeave","color","LegendComponent","cd","labelClick","labelActivate","labelDeactivate","legendEntries","update","markForCheck","getLegendEntries","items","data","findIndex","getColor","entry","activeEntries","item","find","d","trackBy","index","ChangeDetectorRef","NgForOf","ChartComponent","showLegend","animations","legendLabelClick","legendLabelActivate","legendLabelDeactivate","legendColumns","legendType","getLegendType","legendOptions","ScaleLegend","chartColumns","chartWidth","floor","view","legendWidth","scaleType","Linear","Legend","providers","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","check","offsetHeight","offsetWidth","runOutsideAngular","NgZone","ɵdir","isDate","toString","call","isNumber","BaseChartComponent","chartElement","scheme","schemeType","Ordinal","ngOnInit","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","hostElem","parentNode","formatDates","g","series","j","resizeSubscription","source","subscription","pipe","e","copy","seriesItem","seriesItemCopy","assign","JSON","parse","stringify","customColors","Orientation","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","trimLabel","s","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","getTickLines","maxLength","maxLines","labelString","totalLines","test","split","reduce","lines","last","pop","startIndex","substring","TextAnchor","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","wrapTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","Middle","maxTicksLength","maxAllowedLength","approxHeight","maxPossibleLengthForTickIfWrapped","isWrapTicksSupported","scale","step","updateDims","parseInt","ticksElement","getTicks","tickFormatting","tickFormat","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","End","tick","tickLength","tickTrim","len","charWidth","wordWidth","baseWidth","maxBaseWidth","cos","PI","labelHeight","longestTick","earlier","current","tickLines","tickChunks","getMaxPossibleLengthForTick","requiredHeight","abs","sin","getMaxTicks","maxScaleTicks","tickValues","tickWidth","tickTransform","gridLineTransform","longestLabel","averageCharacterWidth","maxCharacters","truncatedText","maxAllowedLines","possibleStringLength","gridLineHeight","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","orientation","xAxisTickCount","emitTicksHeight","newLabelOffset","xScale","showLabel","labelText","ticksComponent","roundedRect","w","h","r","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","getApproximateAxisWidth","sign","tickSpacing","positionMiddle","chunksLength","bandWidth","heightOfLines","availableFreeSpace","referenceLines","setReferencelines","y2","y1","dy","x2","x1","Start","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","maxChars","t","preferredWidth","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","yScale","AxesModule","ɵmod","ɵinj","imports","declarations","exports","StyleTypes","ShowTypes","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","listensForFocus","focus","listensForHover","mouseover","hideTooltip","onFocus","showTooltip","onBlur","contentDom","contains","onMouseClick","immediate","time","navigator","userAgent","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","event","destroyFn","tooltipTitle","tooltipTemplate","tooltipContext","ViewContainerRef","TooltipModule","entryComponents","cache","id","newId","random","pow","BarOrientation","SvgLinearGradientComponent","Vertical","Horizontal","stops","CircleComponent","onClick","classNames","Array","isArray","cx","cy","circleOpacity","pointerEvents","SeriesType","CircleSeriesComponent","Standard","barVisible","barOrientation","placementTypes","styleTypes","isSSR","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","visibleValue","mapDataPointToCircle","seriesName","tooltipLabel","Time","Number","d1","radius","opacity","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","activateCircle","deactivateCircle","GridPanelComponent","ClassEnum","GridPanelSeriesComponent","gridPanels","getGridPanels","className","Odd","positionIndex","Even","paddingInner","class","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","animationsLoaded","hasGradient","loadAnimation","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","b","count","countFrom","countTo","countDecimals","countDuration","callback","startVal","endVal","countDown","decimals","dec","startTime","runCount","timestamp","frameVal","progress","finished","requestAnimationFrame","val","decimalChecker","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","root","global","MouseEvent","createMouseEvent","bubbles","cancelable","document","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","initialized","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","includes","extent","on","selection","newSelection","newDomain","invert","legend","autoScale","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","ChartCommonModule","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","showYLabel","legendPosition","columns","xOffset","chartHeight","colorSets","selectable","ColorHelper","cs","colorDomain","generateColorScheme","colorScale","Quantile","points","valueScale","formattedValue","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","endColor","startColor","currentVal","originalOffset","getUniqueXDomainValues","valueSet","Set","add","from","getScaleType","checkDateType","allDates","every","allNumbers","getXDomainArray","xScaleMin","xScaleMax","mappedValues","sort","a","aDate","getTime","bDate","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","baseValue","stacked","normalized","updateGradient","currentArea","startingArea","xProperty","y0","curve","d0values","d1values","isInactive","AreaChartComponent","legendTitle","xAxis","yAxis","timeline","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","showXAxisLabel","showYAxisLabel","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","yScaleMin","yScaleMax","nice","date","num","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","xAxisLabel","yAxisLabel","xAxisTickFormatting","yAxisTickFormatting","xAxisTicks","yAxisTicks","seriesTooltipTemplate","AreaChartNormalizedComponent","seriesType","valueOf","AreaChartStackedComponent","AreaChartModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","ariaLabel","BarChartType","D0Types","BarLabelComponent","horizontalPadding","verticalPadding","getSize","negative","formatedValue","barX","barWidth","barY","barHeight","SeriesHorizontal","showDataLabel","dataLabelWidthChanged","barsForDataLabels","updateTooltipSettings","positive","d0Type","Normalized","bars","getLabel","bar","Stacked","offset0","offset1","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","active","dataItem","trackDataLabelBy","barLabel","click","BarHorizontalComponent","barPadding","dataLabelMaxWidth","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valueDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","barChartType","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","SeriesVerticalComponent","dataLabelHeightChanged","BarVerticalComponent","dataLabelMaxHeight","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","BarVerticalStackedComponent","BarChartModule","cloneDeep","BoxComponent","boxStrokeWidth","whiskerStrokeWidth","medianLineWidth","updateLineEl","maskLineId","maskLine","boxPath","oldPath","oldLineCoordinates","getStartingLineCoordinates","nodeBar","selectAll","ease","attrTween","pathTween","lineEl","lineCoordinates","_","v1","v2","lineTween","nodeLineEl","baseVal","precision","path0","path1","cloneNode","setAttribute","n0","getTotalLength","n1","distances","dt","p0","getPointAtLength","p1","p","strokeColor","BoxSeriesComponent","counts","mappedCounts","serie","whiskers","groupCounts","quartiles","getBoxQuantiles","getLinesCoordinates","box","formattedTooltipLabel","inputData","commonX","offsetX","whiskerLineWidth","whiskerZero","whiskerOne","median","topLine","medianLine","bottomLine","verticalLine","BoxChartComponent","setScales","getUniqueBoxChartXDomainValues","legendOpts","legendOptionsConfig","BoxChartModule","getDomain","minVal","maxVal","getScale","BubbleSeriesComponent","circles","getCircles","rScale","xScaleType","yScaleType","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","getRScale","getBubblePadding","yMin","xMin","yMax","xMax","Infinity","BubbleChartModule","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","f","yVal","rx","HeatMapModule","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","hasRange","getRangeGenerator","outerPath","areaGradientStops","rangeFillOpacity","LineChartComponent","LineChartModule","PieLabelComponent","labelTrim","labelTrimSize","setTransforms","styleTransform","textX","textY","attrTransform","textTransition","isIE","startRadius","explodeSlices","innerArc","innerRadius","outerRadius","innerPos","centroid","pos","outerPos","midAngle","startAngle","endAngle","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","cData","inactive","defaultTooltipText","twoPI","PolarChartComponent","showSeriesOnHover","yAxisMinScale","setDims","setTicks","halfWidth","halfHeight","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","thetaTicks","dd","startPos","minDistance","o","radiusTicks","getYValues","PieArcComponent","cornerRadius","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","_current","copyOfD","interpolater","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieSeriesComponent","trimLabels","maxLabelLength","pieGenerator","arcData","calculateLabelPositions","outerArc","factor","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","AdvancedPieChartComponent","nameFormatting","PieChartComponent","labels","doughnut","arcWidth","hasNoOptionalMarginsSet","translation","gridSize","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridSeriesComponent","layout","arcs","getArcs","other","PieGridComponent","getSeries","baselineLabelHeight","yPos","PieChartModule","PolarChartModule","calculateTextWidth","fontFamilyKey","text","defaultWidth","acc","curr","VERDANA_FONT_WIDTHS_16_PX","A","B","C","D","E","F","G","H","I","J","K","M","O","P","Q","R","S","T","U","V","W","X","Y","Z","k","l","m","n","q","u","z","$","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","scaleTextSSR","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","decs","textEl","availableWidth","availableHeight","resizeScale","bandColor","textColor","hexToRgb","rgb","invertColor","yiq","depth","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","NumberCardComponent","clickable","observers","NumberCardModule","TreeMapCellComponent","cellData","getTextColor","TreeMapCellSeriesComponent","children","x0","TreeMapComponent","rootNode","isRoot","parentId","TreeMapModule","ElementType","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","Value","Units","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","units","GaugeArcComponent","backgroundArc","valueArc","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","angleSpan","bigSegments","smallTickSegment","smallSegments","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","getTickPath","smallAngleDeg","smallAngle","lineGenerator","GaugeComponent","showAxis","showText","rotation","availableRadius","radiusPerArc","textRadius","dataMin","dataMax","textValue","availableSpace","axisTickFormatting","GaugeModule","ngxChartsPolyfills","SVGElement","HTMLDivElement","SankeyComponent","linkDefs","nodeDefs","flatMap","sankeyGenerator","nodeId","nodeAlign","nodeWidth","nodePadding","nodes","links","nodeRects","rect","getNodeTooltipText","labelAnchor","linkPaths","link","linkPath","getLinkTooltipText","sourceNode","targetNode","maximumFractionDigits","layer","SankeyModule","NgxChartsModule","fieldType","groupByType","formatter"],"sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/node_modules/@swimlane/ngx-charts/fesm2020/swimlane-ngx-charts.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport rfdc from 'rfdc';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { sankey, sankeyLeft, sankeyLinkHorizontal } from 'd3-sankey';\nimport { timeFormat } from 'd3-time-format';\n\n/**\n * Throttle a function\n *\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        // eslint-disable-next-line prefer-rest-params\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\nvar PlacementTypes;\n(function (PlacementTypes) {\n    PlacementTypes[\"Top\"] = \"top\";\n    PlacementTypes[\"Bottom\"] = \"bottom\";\n    PlacementTypes[\"Left\"] = \"left\";\n    PlacementTypes[\"Right\"] = \"right\";\n    PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Top) {\n        return elDimensions.top - caretOffset;\n    }\n    if (alignment === PlacementTypes.Bottom) {\n        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n    }\n    return undefined;\n}\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Left) {\n        return elDimensions.left - caretOffset;\n    }\n    if (alignment === PlacementTypes.Right) {\n        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n    }\n    return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nclass PositionHelper {\n    /**\n     * Calculate vertical alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.height > window.innerHeight) {\n            result = window.innerHeight - popoverDimensions.height;\n        }\n        return result;\n    }\n    /**\n     * Calculate vertical caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Top) {\n            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Bottom) {\n            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n        }\n        const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n            result += popoverPosition + popoverDimensions.height - window.innerHeight;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.width > window.innerWidth) {\n            result = window.innerWidth - popoverDimensions.width;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Left) {\n            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Right) {\n            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n        }\n        const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n            result += popoverPosition + popoverDimensions.width - window.innerWidth;\n        }\n        return result;\n    }\n    /**\n     * Checks if the element's position should be flipped\n     *\n     * @memberOf PositionHelper\n     */\n    static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n        let flip = false;\n        if (placement === PlacementTypes.Right) {\n            if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Left) {\n            if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Top) {\n            if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Bottom) {\n            if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n                flip = true;\n            }\n        }\n        return flip;\n    }\n    /**\n     * Position caret\n     *\n     * @memberOf PositionHelper\n     */\n    static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = -7;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = elmDim.width;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = elmDim.height;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = -7;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Position content\n     *\n     * @memberOf PositionHelper\n     */\n    static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = hostDim.left + hostDim.width + spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = hostDim.left - elmDim.width - spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = hostDim.top - elmDim.height - spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = hostDim.top + hostDim.height + spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Determine placement based on flip\n     *\n     * @memberOf PositionHelper\n     */\n    static determinePlacement(placement, elmDim, hostDim, spacing) {\n        const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n        if (shouldFlip) {\n            if (placement === PlacementTypes.Right) {\n                return PlacementTypes.Left;\n            }\n            else if (placement === PlacementTypes.Left) {\n                return PlacementTypes.Right;\n            }\n            else if (placement === PlacementTypes.Top) {\n                return PlacementTypes.Bottom;\n            }\n            else if (placement === PlacementTypes.Bottom) {\n                return PlacementTypes.Top;\n            }\n        }\n        return placement;\n    }\n}\n\nclass TooltipContentComponent {\n    constructor(element, renderer, platformId) {\n        this.element = element;\n        this.renderer = renderer;\n        this.platformId = platformId;\n    }\n    get cssClasses() {\n        let clz = 'ngx-charts-tooltip-content';\n        clz += ` position-${this.placement}`;\n        clz += ` type-${this.type}`;\n        clz += ` ${this.cssClass}`;\n        return clz;\n    }\n    ngAfterViewInit() {\n        setTimeout(this.position.bind(this));\n    }\n    position() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const nativeElm = this.element.nativeElement;\n        const hostDim = this.host.nativeElement.getBoundingClientRect();\n        // if no dims were found, never show\n        if (!hostDim.height && !hostDim.width)\n            return;\n        const elmDim = nativeElm.getBoundingClientRect();\n        this.checkFlip(hostDim, elmDim);\n        this.positionContent(nativeElm, hostDim, elmDim);\n        if (this.showCaret) {\n            this.positionCaret(hostDim, elmDim);\n        }\n        // animate its entry\n        setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n    }\n    positionContent(nativeElm, hostDim, elmDim) {\n        const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n        this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n        this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n    }\n    positionCaret(hostDim, elmDim) {\n        const caretElm = this.caretElm.nativeElement;\n        const caretDimensions = caretElm.getBoundingClientRect();\n        const { top, left } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n        this.renderer.setStyle(caretElm, 'top', `${top}px`);\n        this.renderer.setStyle(caretElm, 'left', `${left}px`);\n    }\n    checkFlip(hostDim, elmDim) {\n        this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    }\n    onWindowResize() {\n        this.position();\n    }\n}\nTooltipContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipContentComponent, selector: \"ngx-tooltip-content\", inputs: { host: \"host\", showCaret: \"showCaret\", type: \"type\", placement: \"placement\", alignment: \"alignment\", spacing: \"spacing\", cssClass: \"cssClass\", title: \"title\", template: \"template\", context: \"context\" }, host: { listeners: { \"window:resize\": \"onWindowResize()\" }, properties: { \"class\": \"this.cssClasses\" } }, viewQueries: [{ propertyName: \"caretElm\", first: true, predicate: [\"caretElm\"], descendants: true }], ngImport: i0, template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(100)\n], TooltipContentComponent.prototype, \"onWindowResize\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-tooltip-content', template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { host: [{\n                type: Input\n            }], showCaret: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], alignment: [{\n                type: Input\n            }], spacing: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], context: [{\n                type: Input\n            }], caretElm: [{\n                type: ViewChild,\n                args: ['caretElm']\n            }], cssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], onWindowResize: [{\n                type: HostListener,\n                args: ['window:resize']\n            }] } });\n\nclass InjectionRegisteryService {\n    constructor(injectionService) {\n        this.injectionService = injectionService;\n        this.defaults = {};\n        this.components = new Map();\n    }\n    getByType(type = this.type) {\n        return this.components.get(type);\n    }\n    create(bindings) {\n        return this.createByType(this.type, bindings);\n    }\n    createByType(type, bindings) {\n        bindings = this.assignDefaults(bindings);\n        const component = this.injectComponent(type, bindings);\n        this.register(type, component);\n        return component;\n    }\n    destroy(instance) {\n        const compsByType = this.components.get(instance.componentType);\n        if (compsByType && compsByType.length) {\n            const idx = compsByType.indexOf(instance);\n            if (idx > -1) {\n                const component = compsByType[idx];\n                component.destroy();\n                compsByType.splice(idx, 1);\n            }\n        }\n    }\n    destroyAll() {\n        this.destroyByType(this.type);\n    }\n    destroyByType(type) {\n        const comps = this.components.get(type);\n        if (comps && comps.length) {\n            let i = comps.length - 1;\n            while (i >= 0) {\n                this.destroy(comps[i--]);\n            }\n        }\n    }\n    injectComponent(type, bindings) {\n        return this.injectionService.appendComponent(type, bindings);\n    }\n    assignDefaults(bindings) {\n        const inputs = { ...this.defaults.inputs };\n        const outputs = { ...this.defaults.outputs };\n        if (!bindings.inputs && !bindings.outputs) {\n            bindings = { inputs: bindings };\n        }\n        if (inputs) {\n            bindings.inputs = { ...inputs, ...bindings.inputs };\n        }\n        if (outputs) {\n            bindings.outputs = { ...outputs, ...bindings.outputs };\n        }\n        return bindings;\n    }\n    register(type, component) {\n        if (!this.components.has(type)) {\n            this.components.set(type, []);\n        }\n        const types = this.components.get(type);\n        types.push(component);\n    }\n}\n\nfunction isViewContainerRef(x) {\n    return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\nclass InjectionService {\n    constructor(applicationRef, componentFactoryResolver, injector) {\n        this.applicationRef = applicationRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n    static setGlobalRootViewContainer(container) {\n        InjectionService.globalRootViewContainer = container;\n    }\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainer() {\n        if (this._container)\n            return this._container;\n        if (InjectionService.globalRootViewContainer)\n            return InjectionService.globalRootViewContainer;\n        if (this.applicationRef.components.length)\n            return this.applicationRef.components[0];\n        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n    }\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n    setRootViewContainer(container) {\n        this._container = container;\n    }\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n    getComponentRootNode(component) {\n        if (isViewContainerRef(component)) {\n            return component.element.nativeElement;\n        }\n        if (component.hostView && component.hostView.rootNodes.length > 0) {\n            return component.hostView.rootNodes[0];\n        }\n        // the top most component root node has no `hostView`\n        return component.location.nativeElement;\n    }\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainerNode(component) {\n        return this.getComponentRootNode(component);\n    }\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n    projectComponentBindings(component, bindings) {\n        if (bindings) {\n            if (bindings.inputs !== undefined) {\n                const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n                for (const bindingName of bindingKeys) {\n                    component.instance[bindingName] = bindings.inputs[bindingName];\n                }\n            }\n            if (bindings.outputs !== undefined) {\n                const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n                for (const eventName of eventKeys) {\n                    component.instance[eventName] = bindings.outputs[eventName];\n                }\n            }\n        }\n        return component;\n    }\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n    appendComponent(componentClass, bindings = {}, location) {\n        if (!location)\n            location = this.getRootViewContainer();\n        const appendLocation = this.getComponentRootNode(location);\n        const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n        const portal = new ComponentPortal(componentClass);\n        const componentRef = portalHost.attach(portal);\n        this.projectComponentBindings(componentRef, bindings);\n        return componentRef;\n    }\n}\nInjectionService.globalRootViewContainer = null;\nInjectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, deps: [{ token: i0.ApplicationRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nInjectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }]; } });\n\nclass TooltipService extends InjectionRegisteryService {\n    constructor(injectionService) {\n        super(injectionService);\n        this.type = TooltipContentComponent;\n    }\n}\nTooltipService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, deps: [{ token: InjectionService }], target: i0.ɵɵFactoryTarget.Injectable });\nTooltipService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: InjectionService }]; } });\n\nvar LegendPosition;\n(function (LegendPosition) {\n    LegendPosition[\"Right\"] = \"right\";\n    LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\nvar LegendType;\n(function (LegendType) {\n    LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n    LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"Time\"] = \"time\";\n    ScaleType[\"Linear\"] = \"linear\";\n    ScaleType[\"Ordinal\"] = \"ordinal\";\n    ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n    constructor() {\n        this.horizontal = false;\n    }\n    ngOnChanges(changes) {\n        const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n        const direction = this.horizontal ? 'right' : 'bottom';\n        this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n    }\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n    gradientString(colors, splits) {\n        // add the 100%\n        splits.push(1);\n        const pairs = [];\n        colors.reverse().forEach((c, i) => {\n            pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n        });\n        return pairs.join(', ');\n    }\n}\nScaleLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nScaleLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: { valueRange: \"valueRange\", colors: \"colors\", height: \"height\", width: \"width\", horizontal: \"horizontal\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-scale-legend', template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"] }]\n        }], propDecorators: { valueRange: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }] } });\n\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nfunction formatLabel(label) {\n    if (label instanceof Date) {\n        label = label.toLocaleDateString();\n    }\n    else {\n        label = label.toLocaleString();\n    }\n    return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\nfunction escapeLabel(label) {\n    return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n        return {\n            '&': '&amp;',\n            // tslint:disable-next-line: quotemark\n            \"'\": '&#x27;',\n            '`': '&#x60;',\n            '\"': '&quot;',\n            '<': '&lt;',\n            '>': '&gt;'\n        }[match];\n    });\n}\n\nclass LegendEntryComponent {\n    constructor() {\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.toggle = new EventEmitter();\n    }\n    get trimmedLabel() {\n        return this.formattedLabel || '(empty)';\n    }\n    onMouseEnter() {\n        this.activate.emit({ name: this.label });\n    }\n    onMouseLeave() {\n        this.deactivate.emit({ name: this.label });\n    }\n}\nLegendEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLegendEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: { color: \"color\", label: \"label\", formattedLabel: \"formattedLabel\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", toggle: \"toggle\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, ngImport: i0, template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-charts-legend-entry',\n                    template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], formattedLabel: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], toggle: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LegendComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.horizontal = false;\n        this.labelClick = new EventEmitter();\n        this.labelActivate = new EventEmitter();\n        this.labelDeactivate = new EventEmitter();\n        this.legendEntries = [];\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cd.markForCheck();\n        this.legendEntries = this.getLegendEntries();\n    }\n    getLegendEntries() {\n        const items = [];\n        for (const label of this.data) {\n            const formattedLabel = formatLabel(label);\n            const idx = items.findIndex(i => {\n                return i.label === formattedLabel;\n            });\n            if (idx === -1) {\n                items.push({\n                    label,\n                    formattedLabel,\n                    color: this.colors.getColor(label)\n                });\n            }\n        }\n        return items;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.label === d.name;\n        });\n        return item !== undefined;\n    }\n    activate(item) {\n        this.labelActivate.emit(item);\n    }\n    deactivate(item) {\n        this.labelDeactivate.emit(item);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendComponent, selector: \"ngx-charts-legend\", inputs: { data: \"data\", title: \"title\", colors: \"colors\", height: \"height\", width: \"width\", activeEntries: \"activeEntries\", horizontal: \"horizontal\" }, outputs: { labelClick: \"labelClick\", labelActivate: \"labelActivate\", labelDeactivate: \"labelDeactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"], components: [{ type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: [\"color\", \"label\", \"formattedLabel\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"toggle\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-legend', template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], labelClick: [{\n                type: Output\n            }], labelActivate: [{\n                type: Output\n            }], labelDeactivate: [{\n                type: Output\n            }] } });\n\nclass ChartComponent {\n    constructor() {\n        this.showLegend = false;\n        this.animations = true;\n        this.legendLabelClick = new EventEmitter();\n        this.legendLabelActivate = new EventEmitter();\n        this.legendLabelDeactivate = new EventEmitter();\n        this.LegendPosition = LegendPosition;\n        this.LegendType = LegendType;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        let legendColumns = 0;\n        if (this.showLegend) {\n            this.legendType = this.getLegendType();\n            if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n                if (this.legendType === LegendType.ScaleLegend) {\n                    legendColumns = 1;\n                }\n                else {\n                    legendColumns = 2;\n                }\n            }\n        }\n        const chartColumns = 12 - legendColumns;\n        this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n        this.legendWidth =\n            !this.legendOptions || this.legendOptions.position === LegendPosition.Right\n                ? Math.floor((this.view[0] * legendColumns) / 12.0)\n                : this.chartWidth;\n    }\n    getLegendType() {\n        return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n    }\n}\nChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ChartComponent, selector: \"ngx-charts-chart\", inputs: { view: \"view\", showLegend: \"showLegend\", legendOptions: \"legendOptions\", legendType: \"legendType\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { legendLabelClick: \"legendLabelClick\", legendLabelActivate: \"legendLabelActivate\", legendLabelDeactivate: \"legendLabelDeactivate\" }, providers: [TooltipService], usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `, isInline: true, components: [{ type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: [\"valueRange\", \"colors\", \"height\", \"width\", \"horizontal\"] }, { type: LegendComponent, selector: \"ngx-charts-legend\", inputs: [\"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"horizontal\"], outputs: [\"labelClick\", \"labelActivate\", \"labelDeactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    providers: [TooltipService],\n                    selector: 'ngx-charts-chart',\n                    template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { view: [{\n                type: Input\n            }], showLegend: [{\n                type: Input\n            }], legendOptions: [{\n                type: Input\n            }], legendType: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], legendLabelClick: [{\n                type: Output\n            }], legendLabelActivate: [{\n                type: Output\n            }], legendLabelDeactivate: [{\n                type: Output\n            }] } });\n\n/**\n * Visibility Observer\n */\nclass VisibilityObserver {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.visible = new EventEmitter();\n        this.isVisible = false;\n        this.runCheck();\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            if (!this.element) {\n                return;\n            }\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 100);\n                });\n            }\n        };\n        this.zone.runOutsideAngular(() => {\n            this.timeout = setTimeout(() => check());\n        });\n    }\n}\nVisibilityObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityObserver.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: VisibilityObserver, selector: \"visibility-observer\", outputs: { visible: \"visible\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'visibility-observer'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { visible: [{\n                type: Output\n            }] } });\n\nfunction isDate(value) {\n    return toString.call(value) === '[object Date]';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n    constructor(chartElement, zone, cd, platformId) {\n        this.chartElement = chartElement;\n        this.zone = zone;\n        this.cd = cd;\n        this.platformId = platformId;\n        this.scheme = 'cool';\n        this.schemeType = ScaleType.Ordinal;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.animations = false;\n        }\n    }\n    ngAfterViewInit() {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.results) {\n            this.results = this.cloneData(this.results);\n        }\n        else {\n            this.results = [];\n        }\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            const dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = Math.floor(this.width);\n        this.height = Math.floor(this.height);\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    getContainerDims() {\n        let width;\n        let height;\n        const hostElem = this.chartElement.nativeElement;\n        if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n            // Get the container dimensions\n            const dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width, height };\n        }\n        return null;\n    }\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    formatDates() {\n        for (let i = 0; i < this.results.length; i++) {\n            const g = this.results[i];\n            g.label = g.name;\n            if (isDate(g.label)) {\n                g.label = g.label.toLocaleDateString();\n            }\n            if (g.series) {\n                for (let j = 0; j < g.series.length; j++) {\n                    const d = g.series[j];\n                    d.label = d.name;\n                    if (isDate(d.label)) {\n                        d.label = d.label.toLocaleDateString();\n                    }\n                }\n            }\n        }\n    }\n    unbindEvents() {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    bindWindowResizeEvent() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const source = fromEvent(window, 'resize');\n        const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n            this.update();\n            if (this.cd) {\n                this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    }\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n    cloneData(data) {\n        const results = [];\n        for (const item of data) {\n            const copy = {};\n            if (item['name'] !== undefined) {\n                copy['name'] = item['name'];\n            }\n            if (item['value'] !== undefined) {\n                copy['value'] = item['value'];\n            }\n            if (item['series'] !== undefined) {\n                copy['series'] = [];\n                for (const seriesItem of item['series']) {\n                    const seriesItemCopy = Object.assign({}, seriesItem);\n                    copy['series'].push(seriesItemCopy);\n                }\n            }\n            if (item['extra'] !== undefined) {\n                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n            }\n            if (item['source'] !== undefined) {\n                copy['source'] = item['source'];\n            }\n            if (item['target'] !== undefined) {\n                copy['target'] = item['target'];\n            }\n            results.push(copy);\n        }\n        return results;\n    }\n}\nBaseChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBaseChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BaseChartComponent, selector: \"base-chart\", inputs: { results: \"results\", view: \"view\", scheme: \"scheme\", schemeType: \"schemeType\", customColors: \"customColors\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: ` <div></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'base-chart',\n                    template: ` <div></div> `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { results: [{\n                type: Input\n            }], view: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nvar Orientation;\n(function (Orientation) {\n    Orientation[\"Top\"] = \"top\";\n    Orientation[\"Bottom\"] = \"bottom\";\n    Orientation[\"Left\"] = \"left\";\n    Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n    constructor(element) {\n        this.textHeight = 25;\n        this.margin = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.strokeWidth = '0.01';\n        this.textAnchor = 'middle';\n        this.transform = '';\n        switch (this.orient) {\n            case Orientation.Top:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Bottom:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Left:\n                this.y = -(this.offset + this.textHeight + this.margin);\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            case Orientation.Right:\n                this.y = this.offset + this.margin;\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            default:\n        }\n    }\n}\nAxisLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAxisLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: { orient: \"orient\", label: \"label\", offset: \"offset\", width: \"width\", height: \"height\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-axis-label]',\n                    template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { orient: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }] } });\n\nfunction trimLabel(s, max = 16) {\n    if (typeof s !== 'string') {\n        if (typeof s === 'number') {\n            return s + '';\n        }\n        else {\n            return '';\n        }\n    }\n    s = s.trim();\n    if (s.length <= max) {\n        return s;\n    }\n    else {\n        return `${s.slice(0, max)}...`;\n    }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n    if (ticks.length > maxTicks) {\n        const reduced = [];\n        const modulus = Math.floor(ticks.length / maxTicks);\n        for (let i = 0; i < ticks.length; i++) {\n            if (i % modulus === 0) {\n                reduced.push(ticks[i]);\n            }\n        }\n        ticks = reduced;\n    }\n    return ticks;\n}\nfunction getTickLines(label, maxLength, maxLines) {\n    const labelString = (label || '').toString();\n    let totalLines = [];\n    if (/\\s/.test(labelString)) {\n        totalLines = labelString.split(/\\s+/).reduce((lines, line) => {\n            const last = (lines.pop() || '') + ' ';\n            return last.length + line.length > maxLength ? [...lines, last.trim(), line.trim()] : [...lines, last + line];\n        }, []);\n    }\n    else {\n        let startIndex = 0;\n        while (startIndex < labelString.length) {\n            totalLines.push(labelString.substring(startIndex, startIndex + maxLength));\n            startIndex += maxLength;\n        }\n    }\n    if (totalLines.length > maxLines) {\n        totalLines = totalLines.splice(0, maxLines);\n        totalLines[totalLines.length - 1] += '...';\n    }\n    return totalLines;\n}\n\nvar TextAnchor;\n(function (TextAnchor) {\n    TextAnchor[\"Start\"] = \"start\";\n    TextAnchor[\"Middle\"] = \"middle\";\n    TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.rotateTicks = true;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.verticalSpacing = 20;\n        this.rotateLabels = false;\n        this.innerTickSize = 6;\n        this.outerTickSize = 6;\n        this.tickPadding = 3;\n        this.textAnchor = TextAnchor.Middle;\n        this.maxTicksLength = 0;\n        this.maxAllowedLength = 16;\n        this.height = 0;\n        this.approxHeight = 10;\n        this.maxPossibleLengthForTickIfWrapped = 16;\n    }\n    get isWrapTicksSupported() {\n        return this.wrapTicks && this.scale.step;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.dimensionsChanged.emit({ height: this.approxHeight });\n            return;\n        }\n        const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n        if (height !== this.height) {\n            this.height = height;\n            this.dimensionsChanged.emit({ height: this.height });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n        this.adjustedScale = this.scale.bandwidth\n            ? function (d) {\n                return this.scale(d) + this.scale.bandwidth() * 0.5;\n            }\n            : this.scale;\n        this.textTransform = '';\n        if (angle && angle !== 0) {\n            this.textTransform = `rotate(${angle})`;\n            this.textAnchor = TextAnchor.End;\n            this.verticalSpacing = 10;\n        }\n        else {\n            this.textAnchor = TextAnchor.Middle;\n        }\n        setTimeout(() => this.updateDims());\n    }\n    getRotationAngle(ticks) {\n        let angle = 0;\n        this.maxTicksLength = 0;\n        for (let i = 0; i < ticks.length; i++) {\n            const tick = this.tickFormat(ticks[i]).toString();\n            let tickLength = tick.length;\n            if (this.trimTicks) {\n                tickLength = this.tickTrim(tick).length;\n            }\n            if (tickLength > this.maxTicksLength) {\n                this.maxTicksLength = tickLength;\n            }\n        }\n        const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n        const charWidth = 7; // need to measure this\n        const wordWidth = len * charWidth;\n        let baseWidth = wordWidth;\n        const maxBaseWidth = Math.floor(this.width / ticks.length);\n        // calculate optimal angle\n        while (baseWidth > maxBaseWidth && angle > -90) {\n            angle -= 30;\n            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n        }\n        let labelHeight = 14;\n        if (this.isWrapTicksSupported) {\n            const longestTick = this.ticks.reduce((earlier, current) => (current.length > earlier.length ? current : earlier), '');\n            const tickLines = this.tickChunks(longestTick);\n            labelHeight = 14 * (tickLines.length || 1);\n            this.maxPossibleLengthForTickIfWrapped = this.getMaxPossibleLengthForTick(longestTick);\n        }\n        const requiredHeight = angle !== 0\n            ? Math.max(Math.abs(Math.sin((angle * Math.PI) / 180)) * this.maxTickLength * charWidth, 10)\n            : labelHeight;\n        this.approxHeight = Math.min(requiredHeight, 200);\n        return angle;\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(100);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickWidth) {\n        return Math.floor(this.width / tickWidth);\n    }\n    tickTransform(tick) {\n        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    }\n    gridLineTransform() {\n        return `translate(0,${-this.verticalSpacing - 5})`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getMaxPossibleLengthForTick(longestLabel) {\n        if (this.scale.bandwidth) {\n            const averageCharacterWidth = 7; // approximate char width\n            const maxCharacters = Math.floor(this.scale.bandwidth() / averageCharacterWidth);\n            const truncatedText = longestLabel.slice(0, maxCharacters);\n            return Math.max(truncatedText.length, this.maxTickLength);\n        }\n        return this.maxTickLength;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            const maxAllowedLines = 5;\n            let maxLines = this.rotateTicks ? Math.floor(this.scale.step() / 14) : maxAllowedLines;\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            let possibleStringLength = Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength);\n            if (!isPlatformBrowser(this.platformId)) {\n                possibleStringLength = Math.floor(Math.min(this.approxHeight / maxAllowedLines, Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength)));\n            }\n            maxLines = Math.min(maxLines, maxAllowedLines);\n            const lines = getTickLines(label, possibleStringLength, maxLines < 1 ? 1 : maxLines);\n            return lines;\n        }\n        return [this.tickTrim(label)];\n    }\n}\nXAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nXAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineHeight: \"gridLineHeight\", width: \"width\", rotateTicks: \"rotateTicks\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineHeight: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass XAxisComponent {\n    constructor() {\n        this.rotateTicks = true;\n        this.showGridLines = false;\n        this.xOrient = Orientation.Bottom;\n        this.xAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.xAxisClassName = 'x axis';\n        this.labelOffset = 0;\n        this.fill = 'none';\n        this.stroke = 'stroke';\n        this.tickStroke = '#ccc';\n        this.strokeWidth = 'none';\n        this.padding = 5;\n        this.orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n        if (typeof this.xAxisTickCount !== 'undefined') {\n            this.tickArguments = [this.xAxisTickCount];\n        }\n    }\n    emitTicksHeight({ height }) {\n        const newLabelOffset = height + 25 + 5;\n        if (newLabelOffset !== this.labelOffset) {\n            this.labelOffset = newLabelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ height });\n            }, 0);\n        }\n    }\n}\nXAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nXAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: { xScale: \"xScale\", dims: \"dims\", trimTicks: \"trimTicks\", rotateTicks: \"rotateTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", ticks: \"ticks\", xAxisTickCount: \"xAxisTickCount\", xOrient: \"xOrient\", xAxisOffset: \"xAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: XAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineHeight\", \"width\", \"rotateTicks\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis]',\n                    template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { xScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], xAxisTickCount: [{\n                type: Input\n            }], xOrient: [{\n                type: Input\n            }], xAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [XAxisTicksComponent]\n            }] } });\n\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n    let retval = '';\n    w = Math.floor(w);\n    h = Math.floor(h);\n    w = w === 0 ? 1 : w;\n    h = h === 0 ? 1 : h;\n    retval = `M${[x + r, y]}`;\n    retval += `h${w - 2 * r}`;\n    if (tr) {\n        retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n    }\n    else {\n        retval += `h${r}v${r}`;\n    }\n    retval += `v${h - 2 * r}`;\n    if (br) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n    }\n    else {\n        retval += `v${r}h${-r}`;\n    }\n    retval += `h${2 * r - w}`;\n    if (bl) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n    }\n    else {\n        retval += `h${-r}v${-r}`;\n    }\n    retval += `v${2 * r - h}`;\n    if (tl) {\n        retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n    }\n    else {\n        retval += `v${-r}h${r}`;\n    }\n    retval += `z`;\n    return retval;\n}\n\nclass YAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.showRefLabels = false;\n        this.showRefLines = false;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.innerTickSize = 6;\n        this.tickPadding = 3;\n        this.verticalSpacing = 20;\n        this.textAnchor = TextAnchor.Middle;\n        this.width = 0;\n        this.outerTickSize = 6;\n        this.rotateLabels = false;\n        this.referenceLineLength = 0;\n        this.Orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.width = this.getApproximateAxisWidth();\n            this.dimensionsChanged.emit({ width: this.width });\n            return;\n        }\n        const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n        if (width !== this.width) {\n            this.width = width;\n            this.dimensionsChanged.emit({ width });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n        this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        this.adjustedScale = scale.bandwidth\n            ? d => {\n                // position the tick to middle considering number of lines of the tick\n                const positionMiddle = scale(d) + scale.bandwidth() * 0.5;\n                if (this.wrapTicks && d.toString().length > this.maxTickLength) {\n                    const chunksLength = this.tickChunks(d).length;\n                    if (chunksLength === 1) {\n                        return positionMiddle;\n                    }\n                    const bandWidth = scale.bandwidth();\n                    const heightOfLines = chunksLength * 8;\n                    const availableFreeSpace = bandWidth * 0.5 - heightOfLines * 0.5;\n                    return scale(d) + availableFreeSpace;\n                }\n                return positionMiddle;\n            }\n            : scale;\n        if (this.showRefLines && this.referenceLines) {\n            this.setReferencelines();\n        }\n        switch (this.orient) {\n            case Orientation.Top:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Bottom:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Left:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.End;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            case Orientation.Right:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.Start;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            default:\n        }\n        setTimeout(() => this.updateDims());\n    }\n    setReferencelines() {\n        this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n        this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n        this.referenceLineLength = this.referenceLines.length;\n        this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n            false,\n            false,\n            false,\n            false\n        ]);\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(50);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickHeight) {\n        return Math.floor(this.height / tickHeight);\n    }\n    tickTransform(tick) {\n        return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n    }\n    gridLineTransform() {\n        return `translate(5,0)`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getApproximateAxisWidth() {\n        const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n        const charWidth = 7;\n        return maxChars * charWidth;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            // for y-axis the width of the tick is fixed\n            const preferredWidth = this.maxTickLength;\n            const maxLines = Math.floor(this.scale.bandwidth() / 15);\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            return getTickLines(label, preferredWidth, Math.min(maxLines, 5));\n        }\n        return [this.tickFormat(label)];\n    }\n}\nYAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nYAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineWidth: \"gridLineWidth\", height: \"height\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", showRefLines: \"showRefLines\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineWidth: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass YAxisComponent {\n    constructor() {\n        this.showGridLines = false;\n        this.yOrient = Orientation.Left;\n        this.yAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.yAxisClassName = 'y axis';\n        this.labelOffset = 15;\n        this.fill = 'none';\n        this.stroke = '#CCC';\n        this.tickStroke = '#CCC';\n        this.strokeWidth = 1;\n        this.padding = 5;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.offset = -(this.yAxisOffset + this.padding);\n        if (this.yOrient === Orientation.Right) {\n            this.labelOffset = 65;\n            this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n        }\n        else {\n            this.transform = `translate(${this.offset} , 0)`;\n        }\n        if (this.yAxisTickCount !== undefined) {\n            this.tickArguments = [this.yAxisTickCount];\n        }\n    }\n    emitTicksWidth({ width }) {\n        if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n            this.labelOffset = width + this.labelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n        else if (width !== this.labelOffset) {\n            this.labelOffset = width;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n    }\n}\nYAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nYAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: { yScale: \"yScale\", dims: \"dims\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", ticks: \"ticks\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", yAxisTickCount: \"yAxisTickCount\", yOrient: \"yOrient\", referenceLines: \"referenceLines\", showRefLines: \"showRefLines\", showRefLabels: \"showRefLabels\", yAxisOffset: \"yAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: YAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineWidth\", \"height\", \"referenceLines\", \"showRefLabels\", \"showRefLines\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis]',\n                    template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { yScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], yAxisTickCount: [{\n                type: Input\n            }], yOrient: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], yAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [YAxisTicksComponent]\n            }] } });\n\nclass AxesModule {\n}\nAxesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAxesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent], imports: [CommonModule], exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent] });\nAxesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n                    exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n                }]\n        }] });\n\nvar StyleTypes;\n(function (StyleTypes) {\n    StyleTypes[\"popover\"] = \"popover\";\n    StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n(function (ShowTypes) {\n    ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n    ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n    ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n    constructor(tooltipService, viewContainerRef, renderer) {\n        this.tooltipService = tooltipService;\n        this.viewContainerRef = viewContainerRef;\n        this.renderer = renderer;\n        this.tooltipCssClass = '';\n        this.tooltipAppendToBody = true;\n        this.tooltipSpacing = 10;\n        this.tooltipDisabled = false;\n        this.tooltipShowCaret = true;\n        this.tooltipPlacement = PlacementTypes.Top;\n        this.tooltipAlignment = PlacementTypes.Center;\n        this.tooltipType = StyleTypes.popover;\n        this.tooltipCloseOnClickOutside = true;\n        this.tooltipCloseOnMouseLeave = true;\n        this.tooltipHideTimeout = 300;\n        this.tooltipShowTimeout = 100;\n        this.tooltipShowEvent = ShowTypes.all;\n        this.tooltipImmediateExit = false;\n        this.show = new EventEmitter();\n        this.hide = new EventEmitter();\n    }\n    get listensForFocus() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n    }\n    get listensForHover() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n    }\n    ngOnDestroy() {\n        this.hideTooltip(true);\n    }\n    onFocus() {\n        if (this.listensForFocus) {\n            this.showTooltip();\n        }\n    }\n    onBlur() {\n        if (this.listensForFocus) {\n            this.hideTooltip(true);\n        }\n    }\n    onMouseEnter() {\n        if (this.listensForHover) {\n            this.showTooltip();\n        }\n    }\n    onMouseLeave(target) {\n        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n            clearTimeout(this.timeout);\n            if (this.component) {\n                const contentDom = this.component.instance.element.nativeElement;\n                const contains = contentDom.contains(target);\n                if (contains)\n                    return;\n            }\n            this.hideTooltip(this.tooltipImmediateExit);\n        }\n    }\n    onMouseClick() {\n        if (this.listensForHover) {\n            this.hideTooltip(true);\n        }\n    }\n    showTooltip(immediate) {\n        if (this.component || this.tooltipDisabled)\n            return;\n        const time = immediate\n            ? 0\n            : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 400 : 0);\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.tooltipService.destroyAll();\n            const options = this.createBoundOptions();\n            this.component = this.tooltipService.create(options);\n            // add a tiny timeout to avoid event re-triggers\n            setTimeout(() => {\n                if (this.component) {\n                    this.addHideListeners(this.component.instance.element.nativeElement);\n                }\n            }, 10);\n            this.show.emit(true);\n        }, time);\n    }\n    addHideListeners(tooltip) {\n        // on mouse enter, cancel the hide triggered by the leave\n        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n            clearTimeout(this.timeout);\n        });\n        // content mouse leave listener\n        if (this.tooltipCloseOnMouseLeave) {\n            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n                this.hideTooltip(this.tooltipImmediateExit);\n            });\n        }\n        // content close on click outside\n        if (this.tooltipCloseOnClickOutside) {\n            this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n                const contains = tooltip.contains(event.target);\n                if (!contains)\n                    this.hideTooltip();\n            });\n        }\n    }\n    hideTooltip(immediate = false) {\n        if (!this.component)\n            return;\n        const destroyFn = () => {\n            // remove events\n            if (this.mouseLeaveContentEvent)\n                this.mouseLeaveContentEvent();\n            if (this.mouseEnterContentEvent)\n                this.mouseEnterContentEvent();\n            if (this.documentClickEvent)\n                this.documentClickEvent();\n            // emit events\n            this.hide.emit(true);\n            // destroy component\n            this.tooltipService.destroy(this.component);\n            this.component = undefined;\n        };\n        clearTimeout(this.timeout);\n        if (!immediate) {\n            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n        }\n        else {\n            destroyFn();\n        }\n    }\n    createBoundOptions() {\n        return {\n            title: this.tooltipTitle,\n            template: this.tooltipTemplate,\n            host: this.viewContainerRef.element,\n            placement: this.tooltipPlacement,\n            alignment: this.tooltipAlignment,\n            type: this.tooltipType,\n            showCaret: this.tooltipShowCaret,\n            cssClass: this.tooltipCssClass,\n            spacing: this.tooltipSpacing,\n            context: this.tooltipContext\n        };\n    }\n}\nTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, deps: [{ token: TooltipService }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: { tooltipCssClass: \"tooltipCssClass\", tooltipTitle: \"tooltipTitle\", tooltipAppendToBody: \"tooltipAppendToBody\", tooltipSpacing: \"tooltipSpacing\", tooltipDisabled: \"tooltipDisabled\", tooltipShowCaret: \"tooltipShowCaret\", tooltipPlacement: \"tooltipPlacement\", tooltipAlignment: \"tooltipAlignment\", tooltipType: \"tooltipType\", tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\", tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\", tooltipHideTimeout: \"tooltipHideTimeout\", tooltipShowTimeout: \"tooltipShowTimeout\", tooltipTemplate: \"tooltipTemplate\", tooltipShowEvent: \"tooltipShowEvent\", tooltipContext: \"tooltipContext\", tooltipImmediateExit: \"tooltipImmediateExit\" }, outputs: { show: \"show\", hide: \"hide\" }, host: { listeners: { \"focusin\": \"onFocus()\", \"blur\": \"onBlur()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave($event.target)\", \"click\": \"onMouseClick()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-tooltip]' }]\n        }], ctorParameters: function () { return [{ type: TooltipService }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { tooltipCssClass: [{\n                type: Input\n            }], tooltipTitle: [{\n                type: Input\n            }], tooltipAppendToBody: [{\n                type: Input\n            }], tooltipSpacing: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipShowCaret: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipAlignment: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], tooltipCloseOnClickOutside: [{\n                type: Input\n            }], tooltipCloseOnMouseLeave: [{\n                type: Input\n            }], tooltipHideTimeout: [{\n                type: Input\n            }], tooltipShowTimeout: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipShowEvent: [{\n                type: Input\n            }], tooltipContext: [{\n                type: Input\n            }], tooltipImmediateExit: [{\n                type: Input\n            }], show: [{\n                type: Output\n            }], hide: [{\n                type: Output\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focusin']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave', ['$event.target']]\n            }], onMouseClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass TooltipModule {\n}\nTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, declarations: [TooltipContentComponent, TooltipDirective], imports: [CommonModule], exports: [TooltipContentComponent, TooltipDirective] });\nTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, providers: [InjectionService, TooltipService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TooltipContentComponent, TooltipDirective],\n                    providers: [InjectionService, TooltipService],\n                    exports: [TooltipContentComponent, TooltipDirective],\n                    imports: [CommonModule],\n                    entryComponents: [TooltipContentComponent]\n                }]\n        }] });\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nfunction id() {\n    let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n    // append a 'a' because neo gets mad\n    newId = `a${newId}`;\n    // ensure not already used\n    if (!cache[newId]) {\n        cache[newId] = true;\n        return newId;\n    }\n    return id();\n}\n\nvar BarOrientation;\n(function (BarOrientation) {\n    BarOrientation[\"Vertical\"] = \"vertical\";\n    BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n    constructor() {\n        this.orientation = BarOrientation.Vertical;\n    }\n    ngOnChanges(changes) {\n        this.x1 = '0%';\n        this.x2 = '0%';\n        this.y1 = '0%';\n        this.y2 = '0%';\n        if (this.orientation === BarOrientation.Horizontal) {\n            this.x2 = '100%';\n        }\n        else if (this.orientation === BarOrientation.Vertical) {\n            this.y1 = '100%';\n        }\n    }\n}\nSvgLinearGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgLinearGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: { orientation: \"orientation\", name: \"name\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-linear-gradient]',\n                    template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { orientation: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass CircleComponent {\n    constructor() {\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    ngOnChanges(changes) {\n        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n        this.classNames += 'circle';\n    }\n}\nCircleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCircleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: { cx: \"cx\", cy: \"cy\", r: \"r\", fill: \"fill\", stroke: \"stroke\", data: \"data\", classNames: \"classNames\", circleOpacity: \"circleOpacity\", pointerEvents: \"pointerEvents\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"click\": \"onClick()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle]',\n                    template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], r: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], classNames: [{\n                type: Input\n            }], circleOpacity: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar SeriesType;\n(function (SeriesType) {\n    SeriesType[\"Standard\"] = \"standard\";\n    SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\nclass CircleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = SeriesType.Standard;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barVisible = false;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges() {\n        this.update();\n    }\n    update() {\n        this.circle = this.getActiveCircle();\n    }\n    getActiveCircle() {\n        const indexActiveDataPoint = this.data.series.findIndex(d => {\n            const label = d.name;\n            return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n        });\n        if (indexActiveDataPoint === -1) {\n            // No valid point is 'active/hovered over' at this moment.\n            return undefined;\n        }\n        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    }\n    mapDataPointToCircle(d, i) {\n        const seriesName = this.data.name;\n        const value = d.value;\n        const label = d.name;\n        const tooltipLabel = formatLabel(label);\n        let cx;\n        if (this.scaleType === ScaleType.Time) {\n            cx = this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            cx = this.xScale(Number(label));\n        }\n        else {\n            cx = this.xScale(label);\n        }\n        const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n        const radius = 5;\n        const height = this.yScale.range()[0] - cy;\n        const opacity = 1;\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            if (this.type === SeriesType.Standard) {\n                color = this.colors.getColor(value);\n            }\n            else {\n                color = this.colors.getColor(d.d1);\n            }\n        }\n        else {\n            color = this.colors.getColor(seriesName);\n        }\n        const data = Object.assign({}, d, {\n            series: seriesName,\n            value,\n            name: label\n        });\n        return {\n            classNames: [`circle-data-${i}`],\n            value,\n            label,\n            data,\n            cx,\n            cy,\n            radius,\n            height,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            gradientStops: this.getGradientStops(color),\n            min: d.min,\n            max: d.max\n        };\n    }\n    getTooltipText({ tooltipLabel, value, seriesName, min, max }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n    }\n    getTooltipMinMaxText(min, max) {\n        if (min !== undefined || max !== undefined) {\n            let result = ' (';\n            if (min !== undefined) {\n                if (max === undefined) {\n                    result += '≥';\n                }\n                result += min.toLocaleString();\n                if (max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (max !== undefined) {\n                result += '≤';\n            }\n            if (max !== undefined) {\n                result += max.toLocaleString();\n            }\n            result += ')';\n            return result;\n        }\n        else {\n            return '';\n        }\n    }\n    getGradientStops(color) {\n        return [\n            {\n                offset: 0,\n                color,\n                opacity: 0.2\n            },\n            {\n                offset: 100,\n                color,\n                opacity: 1\n            }\n        ];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    activateCircle() {\n        this.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle() {\n        this.barVisible = false;\n        this.circle.opacity = 0;\n        this.deactivate.emit({ name: this.data.name });\n    }\n}\nCircleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCircleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: { data: \"data\", type: \"type\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 1 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle-series]',\n                    template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 1 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GridPanelComponent {\n}\nGridPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: { width: \"width\", height: \"height\", x: \"x\", y: \"y\" }, ngImport: i0, template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel]',\n                    template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }] } });\n\nvar ClassEnum;\n(function (ClassEnum) {\n    ClassEnum[\"Odd\"] = \"odd\";\n    ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\nclass GridPanelSeriesComponent {\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.gridPanels = this.getGridPanels();\n    }\n    getGridPanels() {\n        return this.data.map(d => {\n            let offset;\n            let width;\n            let height;\n            let x;\n            let y;\n            let className = ClassEnum.Odd;\n            if (this.orient === BarOrientation.Vertical) {\n                const position = this.xScale(d.name);\n                const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n                width = this.xScale.bandwidth() + offset;\n                height = this.dims.height;\n                x = this.xScale(d.name) - offset / 2;\n                y = 0;\n            }\n            else if (this.orient === BarOrientation.Horizontal) {\n                const position = this.yScale(d.name);\n                const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n                width = this.dims.width;\n                height = this.yScale.bandwidth() + offset;\n                x = 0;\n                y = this.yScale(d.name) - offset / 2;\n            }\n            return {\n                name: d.name,\n                class: className,\n                height,\n                width,\n                x,\n                y\n            };\n        });\n    }\n}\nGridPanelSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: { data: \"data\", dims: \"dims\", xScale: \"xScale\", yScale: \"yScale\", orient: \"orient\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: [\"width\", \"height\", \"x\", \"y\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel-series]',\n                    template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }] } });\n\nclass SvgRadialGradientComponent {\n    constructor() {\n        this.endOpacity = 1;\n        this.cx = 0;\n        this.cy = 0;\n    }\n    get stops() {\n        return this.stopsInput || this.stopsDefault;\n    }\n    set stops(value) {\n        this.stopsInput = value;\n    }\n    ngOnChanges(changes) {\n        this.r = '30%';\n        if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n            this.stopsDefault = [\n                {\n                    offset: 0,\n                    color: this.color,\n                    opacity: this.startOpacity\n                },\n                {\n                    offset: 100,\n                    color: this.color,\n                    opacity: this.endOpacity\n                }\n            ];\n        }\n    }\n}\nSvgRadialGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgRadialGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: { color: \"color\", name: \"name\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", cx: \"cx\", cy: \"cy\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-radial-gradient]',\n                    template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass AreaComponent {\n    constructor(element) {\n        this.opacity = 1;\n        this.startOpacity = 0.5;\n        this.endOpacity = 1;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.animationsLoaded = false;\n        this.hasGradient = false;\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        if (!this.animationsLoaded) {\n            this.loadAnimation();\n            this.animationsLoaded = true;\n        }\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n    }\n    loadAnimation() {\n        this.areaPath = this.startingPath;\n        setTimeout(this.updatePathEl.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.area');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: this.endOpacity\n            }\n        ];\n    }\n}\nAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: { data: \"data\", path: \"path\", startingPath: \"startingPath\", fill: \"fill\", opacity: \"opacity\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", gradient: \"gradient\", stops: \"stops\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area]',\n                    template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], path: [{\n                type: Input\n            }], startingPath: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\n// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n    const startVal = Number(countFrom);\n    const endVal = Number(countTo);\n    const countDown = startVal > endVal;\n    const decimals = Math.max(0, countDecimals);\n    const dec = Math.pow(10, decimals);\n    const duration = Number(countDuration) * 1000;\n    let startTime;\n    function runCount(timestamp) {\n        let frameVal;\n        const progress = timestamp - startTime;\n        if (countDown) {\n            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n        }\n        else {\n            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n        }\n        if (countDown) {\n            frameVal = frameVal < endVal ? endVal : frameVal;\n        }\n        else {\n            frameVal = frameVal > endVal ? endVal : frameVal;\n        }\n        frameVal = Math.round(frameVal * dec) / dec;\n        const tick = progress < duration;\n        callback({\n            value: frameVal,\n            progress,\n            timestamp,\n            finished: !tick\n        });\n        if (tick) {\n            return requestAnimationFrame(val => runCount(val));\n        }\n    }\n    return requestAnimationFrame(timestamp => {\n        startTime = timestamp;\n        return runCount(timestamp);\n    });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\nfunction decimalChecker(countTo) {\n    const endVal = Number(countTo);\n    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n        return 2;\n    }\n    return 0;\n}\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\nclass CountUpDirective {\n    constructor(cd, element) {\n        this.cd = cd;\n        this.countDuration = 1;\n        this.countPrefix = '';\n        this.countSuffix = '';\n        this.countChange = new EventEmitter();\n        this.countFinish = new EventEmitter();\n        this.value = '';\n        this._countDecimals = 0;\n        this._countTo = 0;\n        this._countFrom = 0;\n        this.nativeElement = element.nativeElement;\n    }\n    set countDecimals(val) {\n        this._countDecimals = val;\n    }\n    get countDecimals() {\n        if (this._countDecimals)\n            return this._countDecimals;\n        return decimalChecker(this.countTo);\n    }\n    set countTo(val) {\n        this._countTo = parseFloat(val);\n        this.start();\n    }\n    get countTo() {\n        return this._countTo;\n    }\n    set countFrom(val) {\n        this._countFrom = parseFloat(val);\n        this.start();\n    }\n    get countFrom() {\n        return this._countFrom;\n    }\n    ngOnDestroy() {\n        cancelAnimationFrame(this.animationReq);\n    }\n    start() {\n        cancelAnimationFrame(this.animationReq);\n        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n        const callback = ({ value, progress, finished }) => {\n            this.value = valueFormatting(value);\n            this.cd.markForCheck();\n            if (!finished)\n                this.countChange.emit({ value: this.value, progress });\n            if (finished)\n                this.countFinish.emit({ value: this.value, progress });\n        };\n        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    }\n}\nCountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nCountUpDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: { countDuration: \"countDuration\", countPrefix: \"countPrefix\", countSuffix: \"countSuffix\", valueFormatting: \"valueFormatting\", countDecimals: \"countDecimals\", countTo: \"countTo\", countFrom: \"countFrom\" }, outputs: { countChange: \"countChange\", countFinish: \"countFinish\" }, ngImport: i0, template: ` {{ value }} `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ngx-charts-count-up]',\n                    template: ` {{ value }} `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { countDuration: [{\n                type: Input\n            }], countPrefix: [{\n                type: Input\n            }], countSuffix: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], countDecimals: [{\n                type: Input\n            }], countTo: [{\n                type: Input\n            }], countFrom: [{\n                type: Input\n            }], countChange: [{\n                type: Output\n            }], countFinish: [{\n                type: Output\n            }] } });\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root;\nif (typeof window !== 'undefined') {\n    root = window;\n}\nelse if (typeof global !== 'undefined') {\n    root = global;\n}\n// tslint:disable-next-line:variable-name\nconst MouseEvent = root.MouseEvent;\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n    // Calling new of an event does not work correctly on IE. The following is a tested workaround\n    // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n    if (typeof MouseEvent === 'function') {\n        // Sane browsers\n        return new MouseEvent(name, { bubbles, cancelable });\n    }\n    else {\n        // IE\n        const event = document.createEvent('MouseEvent');\n        event.initEvent(name, bubbles, cancelable);\n        return event;\n    }\n}\n\nclass TooltipArea {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.anchorOpacity = 0;\n        this.anchorPos = -1;\n        this.anchorValues = [];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.showPercentage = false;\n        this.tooltipDisabled = false;\n        this.hover = new EventEmitter();\n    }\n    getValues(xVal) {\n        const results = [];\n        for (const group of this.results) {\n            const item = group.series.find(d => d.name.toString() === xVal.toString());\n            let groupName = group.name;\n            if (groupName instanceof Date) {\n                groupName = groupName.toLocaleDateString();\n            }\n            if (item) {\n                const label = item.name;\n                let val = item.value;\n                if (this.showPercentage) {\n                    val = (item.d1 - item.d0).toFixed(2) + '%';\n                }\n                let color;\n                if (this.colors.scaleType === ScaleType.Linear) {\n                    let v = val;\n                    if (item.d1) {\n                        v = item.d1;\n                    }\n                    color = this.colors.getColor(v);\n                }\n                else {\n                    color = this.colors.getColor(group.name);\n                }\n                const data = Object.assign({}, item, {\n                    value: val,\n                    name: label,\n                    series: groupName,\n                    min: item.min,\n                    max: item.max,\n                    color\n                });\n                results.push(data);\n            }\n        }\n        return results;\n    }\n    mouseMove(event) {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const xPos = event.pageX - event.target.getBoundingClientRect().left;\n        const closestIndex = this.findClosestPointIndex(xPos);\n        const closestPoint = this.xSet[closestIndex];\n        this.anchorPos = this.xScale(closestPoint);\n        this.anchorPos = Math.max(0, this.anchorPos);\n        this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n        this.anchorValues = this.getValues(closestPoint);\n        if (this.anchorPos !== this.lastAnchorPos) {\n            const ev = createMouseEvent('mouseleave');\n            this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n            this.anchorOpacity = 0.7;\n            this.hover.emit({\n                value: closestPoint\n            });\n            this.showTooltip();\n            this.lastAnchorPos = this.anchorPos;\n        }\n    }\n    findClosestPointIndex(xPos) {\n        let minIndex = 0;\n        let maxIndex = this.xSet.length - 1;\n        let minDiff = Number.MAX_VALUE;\n        let closestIndex = 0;\n        while (minIndex <= maxIndex) {\n            const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n            const currentElement = this.xScale(this.xSet[currentIndex]);\n            const curDiff = Math.abs(currentElement - xPos);\n            if (curDiff < minDiff) {\n                minDiff = curDiff;\n                closestIndex = currentIndex;\n            }\n            if (currentElement < xPos) {\n                minIndex = currentIndex + 1;\n            }\n            else if (currentElement > xPos) {\n                maxIndex = currentIndex - 1;\n            }\n            else {\n                minDiff = 0;\n                closestIndex = currentIndex;\n                break;\n            }\n        }\n        return closestIndex;\n    }\n    showTooltip() {\n        const event = createMouseEvent('mouseenter');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    }\n    hideTooltip() {\n        const event = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n        this.anchorOpacity = 0;\n        this.lastAnchorPos = -1;\n    }\n    getToolTipText(tooltipItem) {\n        let result = '';\n        if (tooltipItem.series !== undefined) {\n            result += tooltipItem.series;\n        }\n        else {\n            result += '???';\n        }\n        result += ': ';\n        if (tooltipItem.value !== undefined) {\n            result += tooltipItem.value.toLocaleString();\n        }\n        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n            result += ' (';\n            if (tooltipItem.min !== undefined) {\n                if (tooltipItem.max === undefined) {\n                    result += '≥';\n                }\n                result += tooltipItem.min.toLocaleString();\n                if (tooltipItem.max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (tooltipItem.max !== undefined) {\n                result += '≤';\n            }\n            if (tooltipItem.max !== undefined) {\n                result += tooltipItem.max.toLocaleString();\n            }\n            result += ')';\n        }\n        return result;\n    }\n}\nTooltipArea.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipArea.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: { dims: \"dims\", xSet: \"xSet\", xScale: \"xScale\", yScale: \"yScale\", results: \"results\", colors: \"colors\", showPercentage: \"showPercentage\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { hover: \"hover\" }, viewQueries: [{ propertyName: \"tooltipAnchor\", first: true, predicate: [\"tooltipAnchor\"], descendants: true }], ngImport: i0, template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition('inactive => active', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 0.7 }))\n            ]),\n            transition('active => inactive', [\n                style({\n                    opacity: 0.7\n                }),\n                animate(250, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tooltip-area]',\n                    template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition('inactive => active', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 0.7 }))\n                            ]),\n                            transition('active => inactive', [\n                                style({\n                                    opacity: 0.7\n                                }),\n                                animate(250, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], xSet: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], showPercentage: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], hover: [{\n                type: Output\n            }], tooltipAnchor: [{\n                type: ViewChild,\n                args: ['tooltipAnchor', { static: false }]\n            }] } });\n\nclass Timeline {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.height = 50;\n        this.select = new EventEmitter();\n        this.onDomainChange = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n        if (!this.initialized) {\n            this.addBrush();\n            this.initialized = true;\n        }\n    }\n    update() {\n        this.dims = this.getDims();\n        this.height = this.dims.height;\n        const offsetY = this.view[1] - this.height;\n        this.xDomain = this.getXDomain();\n        this.xScale = this.getXScale();\n        if (this.brush) {\n            this.updateBrush();\n        }\n        this.transform = `translate(0 , ${offsetY})`;\n        this.filterId = 'filter' + id().toString();\n        this.filter = `url(#${this.filterId})`;\n        this.cd.markForCheck();\n    }\n    getXDomain() {\n        let values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else {\n            domain = values;\n        }\n        return domain;\n    }\n    getXScale() {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n        }\n        return scale;\n    }\n    addBrush() {\n        if (this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush = brushX()\n            .extent([\n            [0, 0],\n            [width, height]\n        ])\n            .on('brush end', ({ selection }) => {\n            const newSelection = selection || this.xScale.range();\n            const newDomain = newSelection.map(this.xScale.invert);\n            this.onDomainChange.emit(newDomain);\n            this.cd.markForCheck();\n        });\n        select(this.element).select('.brush').call(this.brush);\n    }\n    updateBrush() {\n        if (!this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush.extent([\n            [0, 0],\n            [width, height]\n        ]);\n        select(this.element).select('.brush').call(this.brush);\n        // clear hardcoded properties so they can be defined by CSS\n        select(this.element)\n            .select('.selection')\n            .attr('fill', undefined)\n            .attr('stroke', undefined)\n            .attr('fill-opacity', undefined);\n        this.cd.markForCheck();\n    }\n    getDims() {\n        const width = this.view[0];\n        const dims = {\n            width,\n            height: this.height\n        };\n        return dims;\n    }\n}\nTimeline.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTimeline.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: { view: \"view\", results: \"results\", scheme: \"scheme\", customColors: \"customColors\", legend: \"legend\", autoScale: \"autoScale\", scaleType: \"scaleType\", height: \"height\" }, outputs: { select: \"select\", onDomainChange: \"onDomainChange\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, isInline: true, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-timeline]', template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { view: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], onDomainChange: [{\n                type: Output\n            }] } });\n\nclass AdvancedLegendComponent {\n    constructor() {\n        this.label = 'Total';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.legendItems = [];\n        this.labelFormatting = label => label;\n        this.percentageFormatting = percentage => percentage;\n        this.defaultValueFormatting = value => value.toLocaleString();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getTotal() {\n        return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n    }\n    update() {\n        this.total = this.getTotal();\n        this.roundedTotal = this.total;\n        this.legendItems = this.getLegendItems();\n    }\n    getLegendItems() {\n        return this.data.map(d => {\n            const label = formatLabel(d.name);\n            const value = d.value;\n            const color = this.colors.getColor(label);\n            const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n            const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n            return {\n                _value: value,\n                data: d,\n                value,\n                color,\n                label: formattedLabel,\n                displayLabel: trimLabel(formattedLabel, 20),\n                origialLabel: d.name,\n                percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n            };\n        });\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nAdvancedLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAdvancedLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: { width: \"width\", data: \"data\", colors: \"colors\", label: \"label\", animations: \"animations\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"], components: [{ type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-legend', template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"] }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nconst COMPONENTS = [\n    AreaComponent,\n    BaseChartComponent,\n    CountUpDirective,\n    TooltipArea,\n    ChartComponent,\n    LegendComponent,\n    LegendEntryComponent,\n    ScaleLegendComponent,\n    CircleComponent,\n    CircleSeriesComponent,\n    GridPanelComponent,\n    GridPanelSeriesComponent,\n    SvgLinearGradientComponent,\n    SvgRadialGradientComponent,\n    Timeline,\n    AdvancedLegendComponent\n];\nclass ChartCommonModule {\n}\nChartCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nChartCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, declarations: [AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver], imports: [CommonModule, AxesModule, TooltipModule], exports: [CommonModule, AxesModule, TooltipModule, AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver] });\nChartCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AxesModule, TooltipModule],\n                    declarations: [...COMPONENTS, VisibilityObserver],\n                    exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n                }]\n        }] });\n\nfunction calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = ScaleType.Ordinal, legendPosition = LegendPosition.Right, columns = 12 }) {\n    let xOffset = margins[3];\n    let chartWidth = width;\n    let chartHeight = height - margins[0] - margins[2];\n    if (showLegend && legendPosition === LegendPosition.Right) {\n        if (legendType === ScaleType.Ordinal) {\n            columns -= 2;\n        }\n        else {\n            columns -= 1;\n        }\n    }\n    chartWidth = (chartWidth * columns) / 12;\n    chartWidth = chartWidth - margins[1] - margins[3];\n    if (showXAxis) {\n        chartHeight -= 5;\n        chartHeight -= xAxisHeight;\n        if (showXLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartHeight -= offset;\n        }\n    }\n    if (showYAxis) {\n        chartWidth -= 5;\n        chartWidth -= yAxisWidth;\n        xOffset += yAxisWidth;\n        xOffset += 10;\n        if (showYLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartWidth -= offset;\n            xOffset += offset;\n        }\n    }\n    chartWidth = Math.max(0, chartWidth);\n    chartHeight = Math.max(0, chartHeight);\n    return {\n        width: Math.floor(chartWidth),\n        height: Math.floor(chartHeight),\n        xOffset: Math.floor(xOffset)\n    };\n}\n\nconst colorSets = [\n    {\n        name: 'vivid',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#647c8a',\n            '#3f51b5',\n            '#2196f3',\n            '#00b862',\n            '#afdf0a',\n            '#a7b61a',\n            '#f3e562',\n            '#ff9800',\n            '#ff5722',\n            '#ff4514'\n        ]\n    },\n    {\n        name: 'natural',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#bf9d76',\n            '#e99450',\n            '#d89f59',\n            '#f2dfa7',\n            '#a5d7c6',\n            '#7794b1',\n            '#afafaf',\n            '#707160',\n            '#ba9383',\n            '#d9d5c3'\n        ]\n    },\n    {\n        name: 'cool',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#a8385d',\n            '#7aa3e5',\n            '#a27ea8',\n            '#aae3f5',\n            '#adcded',\n            '#a95963',\n            '#8796c0',\n            '#7ed3ed',\n            '#50abcc',\n            '#ad6886'\n        ]\n    },\n    {\n        name: 'fire',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n    },\n    {\n        name: 'solar',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#fff8e1',\n            '#ffecb3',\n            '#ffe082',\n            '#ffd54f',\n            '#ffca28',\n            '#ffc107',\n            '#ffb300',\n            '#ffa000',\n            '#ff8f00',\n            '#ff6f00'\n        ]\n    },\n    {\n        name: 'air',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e1f5fe',\n            '#b3e5fc',\n            '#81d4fa',\n            '#4fc3f7',\n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1',\n            '#0277bd',\n            '#01579b'\n        ]\n    },\n    {\n        name: 'aqua',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e0f7fa',\n            '#b2ebf2',\n            '#80deea',\n            '#4dd0e1',\n            '#26c6da',\n            '#00bcd4',\n            '#00acc1',\n            '#0097a7',\n            '#00838f',\n            '#006064'\n        ]\n    },\n    {\n        name: 'flame',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#A10A28',\n            '#D3342D',\n            '#EF6D49',\n            '#FAAD67',\n            '#FDDE90',\n            '#DBED91',\n            '#A9D770',\n            '#6CBA67',\n            '#2C9653',\n            '#146738'\n        ]\n    },\n    {\n        name: 'ocean',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#1D68FB',\n            '#33C0FC',\n            '#4AFFFE',\n            '#AFFFFF',\n            '#FFFC63',\n            '#FDBD2D',\n            '#FC8A25',\n            '#FA4F1E',\n            '#FA141B',\n            '#BA38D1'\n        ]\n    },\n    {\n        name: 'forest',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#55C22D',\n            '#C1F33D',\n            '#3CC099',\n            '#AFFFFF',\n            '#8CFC9D',\n            '#76CFFA',\n            '#BA60FB',\n            '#EE6490',\n            '#C42A1C',\n            '#FC9F32'\n        ]\n    },\n    {\n        name: 'horizon',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2597FB',\n            '#65EBFD',\n            '#99FDD0',\n            '#FCEE4B',\n            '#FEFCFA',\n            '#FDD6E3',\n            '#FCB1A8',\n            '#EF6F7B',\n            '#CB96E8',\n            '#EFDEE0'\n        ]\n    },\n    {\n        name: 'neons',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FF3333',\n            '#FF33FF',\n            '#CC33FF',\n            '#0000FF',\n            '#33CCFF',\n            '#33FFFF',\n            '#33FF66',\n            '#CCFF33',\n            '#FFCC00',\n            '#FF6600'\n        ]\n    },\n    {\n        name: 'picnic',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FAC51D',\n            '#66BD6D',\n            '#FAA026',\n            '#29BB9C',\n            '#E96B56',\n            '#55ACD2',\n            '#B7332F',\n            '#2C83C9',\n            '#9166B8',\n            '#92E7E8'\n        ]\n    },\n    {\n        name: 'night',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2B1B5A',\n            '#501356',\n            '#183356',\n            '#28203F',\n            '#391B3C',\n            '#1E2B3C',\n            '#120634',\n            '#2D0432',\n            '#051932',\n            '#453080',\n            '#75267D',\n            '#2C507D',\n            '#4B3880',\n            '#752F7D',\n            '#35547D'\n        ]\n    },\n    {\n        name: 'nightLights',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#4e31a5',\n            '#9c25a7',\n            '#3065ab',\n            '#57468b',\n            '#904497',\n            '#46648b',\n            '#32118d',\n            '#a00fb3',\n            '#1052a2',\n            '#6e51bd',\n            '#b63cc3',\n            '#6c97cb',\n            '#8671c1',\n            '#b455be',\n            '#7496c3'\n        ]\n    }\n];\n\nclass ColorHelper {\n    constructor(scheme, type, domain, customColors) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        this.colorDomain = scheme.domain;\n        this.scaleType = type;\n        this.domain = domain;\n        this.customColors = customColors;\n        this.scale = this.generateColorScheme(scheme, type, this.domain);\n    }\n    generateColorScheme(scheme, type, domain) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        let colorScale;\n        switch (type) {\n            case ScaleType.Quantile:\n                colorScale = scaleQuantile()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Ordinal:\n                colorScale = scaleOrdinal()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Linear:\n                {\n                    const colorDomain = [...scheme.domain];\n                    if (colorDomain.length === 1) {\n                        colorDomain.push(colorDomain[0]);\n                        this.colorDomain = colorDomain;\n                    }\n                    const points = range(0, 1, 1.0 / colorDomain.length);\n                    colorScale = scaleLinear()\n                        .range(colorDomain)\n                        .domain(points);\n                }\n                break;\n            default:\n                break;\n        }\n        return colorScale;\n    }\n    getColor(value) {\n        if (value === undefined || value === null) {\n            throw new Error('Value can not be null');\n        }\n        if (this.scaleType === ScaleType.Linear) {\n            const valueScale = scaleLinear()\n                .domain(this.domain)\n                .range([0, 1]);\n            return this.scale(valueScale(value));\n        }\n        else {\n            if (typeof this.customColors === 'function') {\n                return this.customColors(value);\n            }\n            const formattedValue = value.toString();\n            let found; // todo type customColors\n            if (this.customColors && this.customColors.length > 0) {\n                found = this.customColors.find(mapping => {\n                    return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n                });\n            }\n            if (found) {\n                return found.value;\n            }\n            else {\n                return this.scale(value);\n            }\n        }\n    }\n    getLinearGradientStops(value, start) {\n        if (start === undefined) {\n            start = this.domain[0];\n        }\n        const valueScale = scaleLinear()\n            .domain(this.domain)\n            .range([0, 1]);\n        const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n        const endColor = this.getColor(value);\n        // generate the stops\n        const startVal = valueScale(start);\n        const startColor = this.getColor(start);\n        const endVal = valueScale(value);\n        let i = 1;\n        let currentVal = startVal;\n        const stops = [];\n        stops.push({\n            color: startColor,\n            offset: startVal,\n            originalOffset: startVal,\n            opacity: 1\n        });\n        while (currentVal < endVal && i < this.colorDomain.length) {\n            const color = this.colorDomain[i];\n            const offset = colorValueScale(color);\n            if (offset <= startVal) {\n                i++;\n                continue;\n            }\n            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n                break;\n            }\n            stops.push({\n                color,\n                offset,\n                opacity: 1\n            });\n            currentVal = offset;\n            i++;\n        }\n        if (stops[stops.length - 1].offset < 100) {\n            stops.push({\n                color: endColor,\n                offset: endVal,\n                opacity: 1\n            });\n        }\n        if (endVal === startVal) {\n            stops[0].offset = 0;\n            stops[1].offset = 100;\n        }\n        else {\n            // normalize the offsets into percentages\n            if (stops[stops.length - 1].offset !== 100) {\n                for (const s of stops) {\n                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n                }\n            }\n        }\n        return stops;\n    }\n}\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nfunction getUniqueXDomainValues(results) {\n    const valueSet = new Set();\n    for (const result of results) {\n        for (const d of result.series) {\n            valueSet.add(d.name);\n        }\n    }\n    return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nfunction getScaleType(values, checkDateType = true) {\n    if (checkDateType) {\n        const allDates = values.every(value => value instanceof Date);\n        if (allDates) {\n            return ScaleType.Time;\n        }\n    }\n    const allNumbers = values.every(value => typeof value === 'number');\n    if (allNumbers) {\n        return ScaleType.Linear;\n    }\n    return ScaleType.Ordinal;\n}\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n    const scaleType = getScaleType(values);\n    let xSet = [];\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const mappedValues = values.map(v => Number(v));\n        min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n        max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n    }\n    if (scaleType === ScaleType.Time) {\n        domain = [new Date(min), new Date(max)];\n        xSet = [...values].sort((a, b) => {\n            const aDate = a.getTime();\n            const bDate = b.getTime();\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        });\n    }\n    else if (scaleType === ScaleType.Linear) {\n        domain = [min, max];\n        // Use compare function to sort numbers numerically\n        xSet = [...values].sort((a, b) => a - b);\n    }\n    else {\n        domain = values;\n        xSet = values;\n    }\n    return { domain, xSet, scaleType };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        if (direction === 'asc') {\n            return a[property] - b[property];\n        }\n        else {\n            return b[property] - a[property];\n        }\n    });\n}\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n    return data.sort((a, b) => {\n        const aVal = a[property];\n        const bVal = b[property];\n        const aIdx = domain.indexOf(aVal);\n        const bIdx = domain.indexOf(bVal);\n        if (direction === 'asc') {\n            return aIdx - bIdx;\n        }\n        else {\n            return bIdx - aIdx;\n        }\n    });\n}\nfunction sortByTime(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        const aDate = a[property].getTime();\n        const bDate = b[property].getTime();\n        if (direction === 'asc') {\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        }\n        else {\n            if (aDate > bDate)\n                return -1;\n            if (bDate > aDate)\n                return 1;\n            return 0;\n        }\n    });\n}\n\nclass AreaSeriesComponent {\n    constructor() {\n        this.baseValue = 'auto';\n        this.stacked = false;\n        this.normalized = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradient();\n        let currentArea;\n        let startingArea;\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        if (this.stacked || this.normalized) {\n            currentArea = area()\n                .x(xProperty)\n                .y0((d, i) => this.yScale(d.d0))\n                .y1((d, i) => this.yScale(d.d1));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => this.yScale.range()[0])\n                .y1(d => this.yScale.range()[0]);\n        }\n        else {\n            currentArea = area()\n                .x(xProperty)\n                .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => this.yScale(d.value));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n        }\n        currentArea.curve(this.curve);\n        startingArea.curve(this.curve);\n        this.opacity = 0.8;\n        let data = this.data.series;\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        this.path = currentArea(data);\n        this.startingPath = startingArea(data);\n    }\n    updateGradient() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            if (this.stacked || this.normalized) {\n                const d0values = this.data.series.map(d => d.d0);\n                const d1values = this.data.series.map(d => d.d1);\n                const max = Math.max(...d1values);\n                const min = Math.min(...d0values);\n                this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            }\n            else {\n                const values = this.data.series.map(d => d.value);\n                const max = Math.max(...values);\n                this.gradientStops = this.colors.getLinearGradientStops(max);\n            }\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nAreaSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAreaSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", baseValue: \"baseValue\", colors: \"colors\", scaleType: \"scaleType\", stacked: \"stacked\", normalized: \"normalized\", gradient: \"gradient\", curve: \"curve\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `, isInline: true, components: [{ type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area-series]',\n                    template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], stacked: [{\n                type: Input\n            }], normalized: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass AreaChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.baseValue = 'auto';\n        this.autoScale = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        if (this.baseValue !== 'auto') {\n            values.push(this.baseValue);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getScaleType(values) {\n        let date = true;\n        let num = true;\n        for (const value of values) {\n            if (isDate(value)) {\n                date = false;\n            }\n            if (isNumber(value)) {\n                num = false;\n            }\n        }\n        if (date) {\n            return ScaleType.Time;\n        }\n        if (num) {\n            return ScaleType.Linear;\n        }\n        return ScaleType.Ordinal;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartComponent, selector: \"ngx-charts-area-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", baseValue: \"baseValue\", autoScale: \"autoScale\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showXAxisLabel = false;\n        this.showYAxisLabel = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.yDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.seriesType = SeriesType;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            let total = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    total += d.value;\n                }\n            }\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n                if (total > 0) {\n                    d.d0 = (d.d0 * 100) / total;\n                    d.d1 = (d.d1 * 100) / total;\n                }\n                else {\n                    d.d0 = 0;\n                    d.d1 = 0;\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartNormalizedComponent, selector: \"ngx-charts-area-chart-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.seriesType = SeriesType;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let sum = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    sum += d.value;\n                }\n            }\n            domain.push(sum);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartStackedComponent, selector: \"ngx-charts-area-chart-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartModule {\n}\nAreaChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAreaChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent], imports: [ChartCommonModule], exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent] });\nAreaChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n                    exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n                }]\n        }] });\n\nclass BarComponent {\n    constructor(element) {\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes.roundEdges) {\n            this.loadAnimation();\n        }\n        this.update();\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n        this.checkToHideBar();\n    }\n    loadAnimation() {\n        this.path = this.getStartingPath();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            node.transition().duration(500).attr('d', path);\n        }\n        else {\n            node.attr('d', path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        else {\n            if (this.orientation === BarOrientation.Vertical) {\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        return path;\n    }\n    getPath() {\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n        }\n        else {\n            path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n        return path;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                if (this.data.value > 0) {\n                    edges = [true, true, false, false];\n                }\n                else {\n                    edges = [false, false, true, true];\n                }\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                if (this.data.value > 0) {\n                    edges = [false, true, false, true];\n                }\n                else {\n                    edges = [true, false, true, false];\n                }\n            }\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar =\n            this.noBarWhenZero &&\n                ((this.orientation === BarOrientation.Vertical && this.height === 0) ||\n                    (this.orientation === BarOrientation.Horizontal && this.width === 0));\n    }\n}\nBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: { fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", orientation: \"orientation\", roundEdges: \"roundEdges\", gradient: \"gradient\", offset: \"offset\", isActive: \"isActive\", stops: \"stops\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bar]',\n                    template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar BarChartType;\n(function (BarChartType) {\n    BarChartType[\"Standard\"] = \"standard\";\n    BarChartType[\"Normalized\"] = \"normalized\";\n    BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n(function (D0Types) {\n    D0Types[\"positive\"] = \"positive\";\n    D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n    constructor(element) {\n        this.dimensionsChanged = new EventEmitter();\n        this.horizontalPadding = 2;\n        this.verticalPadding = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getSize() {\n        const h = this.element.getBoundingClientRect().height;\n        const w = this.element.getBoundingClientRect().width;\n        return { height: h, width: w, negative: this.value < 0 };\n    }\n    ngAfterViewInit() {\n        this.dimensionsChanged.emit(this.getSize());\n    }\n    update() {\n        if (this.valueFormatting) {\n            this.formatedValue = this.valueFormatting(this.value);\n        }\n        else {\n            this.formatedValue = formatLabel(this.value);\n        }\n        if (this.orientation === 'horizontal') {\n            this.x = this.barX + this.barWidth;\n            // if the value is negative then it's on the left of the x0.\n            // we need to put the data label in front of the bar\n            if (this.value < 0) {\n                this.x = this.x - this.horizontalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.x = this.x + this.horizontalPadding;\n                this.textAnchor = 'start';\n            }\n            this.y = this.barY + this.barHeight / 2;\n        }\n        else {\n            // orientation must be \"vertical\"\n            this.x = this.barX + this.barWidth / 2;\n            this.y = this.barY + this.barHeight;\n            if (this.value < 0) {\n                this.y = this.y + this.verticalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.y = this.y - this.verticalPadding;\n                this.textAnchor = 'start';\n            }\n            this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n        }\n    }\n}\nBarLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: { value: \"value\", valueFormatting: \"valueFormatting\", barX: \"barX\", barY: \"barY\", barWidth: \"barWidth\", barHeight: \"barHeight\", orientation: \"orientation\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, isInline: true, styles: [\".textDataLabel{font-size:11px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-bar-label]', template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".textDataLabel{font-size:11px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], barX: [{\n                type: Input\n            }], barY: [{\n                type: Input\n            }], barWidth: [{\n                type: Input\n            }], barHeight: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }] } });\n\nclass SeriesHorizontal {\n    constructor() {\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelWidthChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type;\n        d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n        this.bars = this.series.map(d => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                formattedLabel\n            };\n            bar.height = this.yScale.bandwidth();\n            if (this.type === BarChartType.Standard) {\n                bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n                if (value < 0) {\n                    bar.x = this.xScale(value);\n                }\n                else {\n                    bar.x = this.xScale(xScaleMin);\n                }\n                bar.y = this.yScale(label);\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            // if total is positive then we show it on the right, otherwise on the left\n            if (section.total > 0) {\n                section.width = this.xScale(totalPositive);\n            }\n            else {\n                section.width = this.xScale(totalNegative);\n            }\n            section.height = this.yScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(0);\n                section.y = this.yScale(d.label);\n                section.width = this.xScale(section.total) - this.xScale(0);\n                section.height = this.yScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n    click(data) {\n        this.select.emit(data);\n    }\n}\nSeriesHorizontal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSeriesHorizontal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelWidthChanged: \"dataLabelWidthChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-horizontal]',\n                    template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelWidthChanged: [{\n                type: Output\n            }] } });\n\nclass BarHorizontalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n    }\n    getXDomain() {\n        const values = this.results.map(d => d.value);\n        const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n        return [min, max];\n    }\n    getYDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.yDomain;\n        }\n        else {\n            domain = this.xDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalComponent, selector: \"ngx-charts-bar-horizontal\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", xScaleMin: \"xScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const height = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.groupScale(group.label)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontal2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontal2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontal2DComponent, selector: \"ngx-charts-bar-horizontal-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalNormalizedComponent, selector: \"ngx-charts-bar-horizontal-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalStackedComponent, selector: \"ngx-charts-bar-horizontal-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SeriesVerticalComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelHeightChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        let width;\n        if (this.series.length) {\n            width = this.xScale.bandwidth();\n        }\n        width = Math.round(width);\n        const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        this.bars = this.series.map((d, index) => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                width,\n                formattedLabel,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            if (this.type === BarChartType.Standard) {\n                bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n                bar.x = this.xScale(label);\n                if (value < 0) {\n                    bar.y = this.yScale(0);\n                }\n                else {\n                    bar.y = this.yScale(value);\n                }\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            if (section.total > 0) {\n                section.height = this.yScale(totalPositive);\n            }\n            else {\n                section.height = this.yScale(totalNegative);\n            }\n            section.width = this.xScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(d.label);\n                section.y = this.yScale(0);\n                section.height = this.yScale(section.total) - this.yScale(0);\n                section.width = this.xScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n}\nSeriesVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nSeriesVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelHeightChanged: \"dataLabelHeightChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-vertical]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelHeightChanged: [{\n                type: Output\n            }] } });\n\nclass BarVerticalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getXDomain() {\n        return this.results.map(d => d.label);\n    }\n    getYDomain() {\n        const values = this.results.map(d => d.value);\n        let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            min = Math.min(min, ...this.yAxisTicks);\n        }\n        let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            max = Math.max(max, ...this.yAxisTicks);\n        }\n        return [min, max];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.xDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxHeightChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalComponent, selector: \"ngx-charts-bar-vertical\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", yScaleMin: \"yScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVertical2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.scaleType = ScaleType.Ordinal;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const width = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(${this.groupScale(group.label)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVertical2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVertical2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVertical2DComponent, selector: \"ngx-charts-bar-vertical-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", scaleType: \"scaleType\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalNormalizedComponent, selector: \"ngx-charts-bar-vertical-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name) || 0}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalStackedComponent, selector: \"ngx-charts-bar-vertical-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarChartModule {\n}\nBarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, declarations: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent], imports: [ChartCommonModule], exports: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent] });\nBarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ],\n                    exports: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ]\n                }]\n        }] });\n\nconst cloneDeep = rfdc();\nclass BoxComponent {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.BarOrientation = BarOrientation;\n        this.initialized = false;\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.nativeElm = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.loadAnimation();\n            this.initialized = true;\n        }\n        else {\n            this.update();\n        }\n    }\n    update() {\n        this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n        this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n        this.medianLineWidth = 1.5 * this.strokeWidth;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updateLineEl();\n        this.updatePathEl();\n        this.checkToHideBar();\n        this.maskLineId = 'mask' + id().toString();\n        this.maskLine = `url(#${this.maskLineId})`;\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    loadAnimation() {\n        this.boxPath = this.oldPath = this.getStartingPath();\n        this.oldLineCoordinates = this.getStartingLineCoordinates();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const nodeBar = select(this.nativeElm).selectAll('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            nodeBar\n                .attr('d', this.oldPath)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attrTween('d', this.pathTween(path, 4));\n        }\n        else {\n            nodeBar.attr('d', path);\n        }\n        this.oldPath = path;\n    }\n    updateLineEl() {\n        const lineEl = select(this.nativeElm).selectAll('.bar-line');\n        const lineCoordinates = this.lineCoordinates;\n        const oldLineCoordinates = this.oldLineCoordinates;\n        if (this.animations) {\n            lineEl\n                .attr('x1', (_, index) => oldLineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => oldLineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => oldLineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => oldLineCoordinates[index].v2.y)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        else {\n            lineEl\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        this.oldLineCoordinates = [...lineCoordinates];\n    }\n    /**\n     * See [D3 Selections](https://www.d3indepth.com/selections/)\n     * @param d The joined data.\n     * @param index The index of the element within the selection\n     * @param node The node element (Line).\n     */\n    lineTween(attr, d, index, node) {\n        const nodeLineEl = node[index];\n        return nodeLineEl[attr].baseVal.value;\n    }\n    // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n    pathTween(d1, precision) {\n        return function () {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const path0 = this;\n            const path1 = this.cloneNode();\n            path1.setAttribute('d', d1);\n            const n0 = path0?.getTotalLength();\n            const n1 = path1?.getTotalLength();\n            // Uniform sampling of distance based on specified precision.\n            const distances = [0];\n            let i = 0;\n            const dt = precision / Math.max(n0, n1);\n            while (i < 1) {\n                distances.push(i);\n                i += dt;\n            }\n            distances.push(1);\n            // Compute point-interpolators at each distance.\n            const points = distances.map((t) => {\n                const p0 = path0.getPointAtLength(t * n0);\n                const p1 = path1.getPointAtLength(t * n1);\n                return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n            });\n            // 't': T is the fraction of time (between 0 and 1) since the transition began.\n            return (t) => {\n                return t < 1 ? 'M' + points.map((p) => p(t)).join('L') : d1;\n            };\n        };\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        const radius = this.roundEdges ? 1 : 0;\n        const { x, y } = this.lineCoordinates[2].v1;\n        return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n    }\n    getPath() {\n        const radius = this.getRadius();\n        let path = '';\n        path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n        return path;\n    }\n    getStartingLineCoordinates() {\n        if (!this.animations) {\n            return [...this.lineCoordinates];\n        }\n        const lineCoordinates = cloneDeep(this.lineCoordinates);\n        lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y =\n            lineCoordinates[2].v1.y;\n        return lineCoordinates;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getGradient() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            edges = [true, true, true, true];\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar = this.noBarWhenZero && this.height === 0;\n    }\n}\nBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: { strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", lineCoordinates: \"lineCoordinates\", roundEdges: \"roundEdges\", gradient: \"gradient\", gradientStops: \"gradientStops\", offset: \"offset\", isActive: \"isActive\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box]',\n                    template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], lineCoordinates: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], gradientStops: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BoxSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    update() {\n        this.updateTooltipSettings();\n        const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n        const seriesName = this.series.name;\n        // Calculate Quantile and Whiskers for each box serie.\n        this.counts = this.series.series;\n        const mappedCounts = this.counts.map(serie => Number(serie.value));\n        this.whiskers = [min(mappedCounts), max(mappedCounts)];\n        // We get the group count and must sort it in order to retrieve quantiles.\n        const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n        this.quartiles = this.getBoxQuantiles(groupCounts);\n        this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n        const value = this.quartiles[1];\n        const formattedLabel = formatLabel(seriesName);\n        const box = {\n            value,\n            data: this.counts,\n            label: seriesName,\n            formattedLabel,\n            width,\n            height: 0,\n            x: 0,\n            y: 0,\n            roundEdges: this.roundEdges,\n            quartiles: this.quartiles,\n            lineCoordinates: this.lineCoordinates\n        };\n        box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n        box.x = this.xScale(seriesName.toString());\n        box.y = this.yScale(this.quartiles[2]);\n        box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n        if (this.colors.scaleType === ScaleType.Ordinal) {\n            box.color = this.colors.getColor(seriesName);\n        }\n        else {\n            box.color = this.colors.getColor(this.quartiles[1]);\n            box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n        }\n        const tooltipLabel = formattedLabel;\n        const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n        box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n        this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n        this.box = box;\n    }\n    getBoxQuantiles(inputData) {\n        return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n    }\n    getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n        // The X value is not being centered, so had to sum half the width to align it.\n        const commonX = this.xScale(seriesName);\n        const offsetX = commonX + barWidth / 2;\n        const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n        const whiskerLineWidth = Math.max(barWidth / 3, 1);\n        const whiskerZero = this.yScale(whiskers[0]);\n        const whiskerOne = this.yScale(whiskers[1]);\n        const median = this.yScale(quartiles[1]);\n        const topLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerZero },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerZero }\n        };\n        const medianLine = {\n            v1: { x: offsetX + medianLineWidth / 2, y: median },\n            v2: { x: offsetX - medianLineWidth / 2, y: median }\n        };\n        const bottomLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerOne },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerOne }\n        };\n        const verticalLine = {\n            v1: { x: offsetX, y: whiskerZero },\n            v2: { x: offsetX, y: whiskerOne }\n        };\n        return [verticalLine, topLine, medianLine, bottomLine];\n    }\n    updateTooltipSettings() {\n        if (this.tooltipDisabled) {\n            this.tooltipPlacement = undefined;\n            this.tooltipType = undefined;\n        }\n        else {\n            if (!this.tooltipPlacement) {\n                this.tooltipPlacement = PlacementTypes.Top;\n            }\n            if (!this.tooltipType) {\n                this.tooltipType = StyleTypes.tooltip;\n            }\n        }\n    }\n}\nBoxSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBoxSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: { dims: \"dims\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", animations: \"animations\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", tooltipPlacement: \"tooltipPlacement\", tooltipType: \"tooltipType\", roundEdges: \"roundEdges\", gradient: \"gradient\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: [\"strokeColor\", \"strokeWidth\", \"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"lineCoordinates\", \"roundEdges\", \"gradient\", \"gradientStops\", \"offset\", \"isActive\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box-series]',\n                    template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BoxChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        /** Show or hide the legend. */\n        this.legend = false;\n        this.legendPosition = LegendPosition.Right;\n        this.legendTitle = 'Legend';\n        this.showGridLines = true;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.showXAxisLabel = true;\n        this.showYAxisLabel = true;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.strokeColor = '#FFFFFF';\n        this.strokeWidth = 2;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        /** Chart Margins (For each side, counterclock wise). */\n        this.margin = [10, 20, 10, 20];\n        /** Chart X axis dimension. */\n        this.xAxisHeight = 0;\n        /** Chart Y axis dimension. */\n        this.yAxisWidth = 0;\n    }\n    trackBy(index, item) {\n        return item.name;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    setColors() {\n        let domain = [];\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    setScales() {\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    }\n    getXScale(domain, width) {\n        const scale = scaleBand()\n            .domain(domain.map(d => d.toString()))\n            .rangeRound([0, width])\n            .padding(0.5);\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().domain(domain).range([height, 0]);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getUniqueBoxChartXDomainValues(results) {\n        const valueSet = new Set();\n        for (const result of results) {\n            valueSet.add(result.name);\n        }\n        return Array.from(valueSet);\n    }\n    getXDomain() {\n        let domain = [];\n        const values = this.getUniqueBoxChartXDomainValues(this.results);\n        let min;\n        let max;\n        if (typeof values[0] === 'string') {\n            domain = values.map(val => val.toString());\n        }\n        else if (typeof values[0] === 'number') {\n            const mappedValues = values.map(v => Number(v));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [min, max];\n        }\n        else {\n            const mappedValues = values.map(v => Number(new Date(v)));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [new Date(min), new Date(max)];\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        const mappedValues = values.map(v => Number(v));\n        const min = Math.min(...mappedValues);\n        const max = Math.max(...mappedValues);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => `${d.name}`);\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    onActivate(data) {\n        this.activate.emit(data);\n    }\n    onDeactivate(data) {\n        this.deactivate.emit(data);\n    }\n    getLegendOptions() {\n        const legendOpts = {\n            scaleType: this.schemeType,\n            colors: this.colors,\n            domain: [],\n            position: this.legendPosition,\n            title: this.legendTitle\n        };\n        if (this.schemeType === ScaleType.Ordinal) {\n            legendOpts.domain = this.xDomain;\n            legendOpts.colors = this.colors;\n        }\n        else {\n            legendOpts.domain = this.yDomain;\n            legendOpts.colors = this.colors.scale;\n        }\n        return legendOpts;\n    }\n}\nBoxChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBoxChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxChartComponent, selector: \"ngx-charts-box-chart\", inputs: { legend: \"legend\", legendPosition: \"legendPosition\", legendTitle: \"legendTitle\", legendOptionsConfig: \"legendOptionsConfig\", showGridLines: \"showGridLines\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", roundDomains: \"roundDomains\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", roundEdges: \"roundEdges\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", wrapTicks: \"wrapTicks\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: [\"dims\", \"series\", \"xScale\", \"yScale\", \"colors\", \"animations\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipPlacement\", \"tooltipType\", \"roundEdges\", \"gradient\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-box-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendOptionsConfig: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate', { static: false }]\n            }] } });\n\nclass BoxChartModule {\n}\nBoxChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBoxChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent], imports: [ChartCommonModule], exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent] });\nBoxChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n                    exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n                }]\n        }] });\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n        if (!autoScale) {\n            values.push(0);\n        }\n    }\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const min = minVal || minVal === 0 ? minVal : Math.min(...values);\n        const max = maxVal ? maxVal : Math.max(...values);\n        domain = [min, max];\n    }\n    else {\n        domain = values;\n    }\n    return domain;\n}\nfunction getScale(domain, range, scaleType, roundDomains) {\n    switch (scaleType) {\n        case ScaleType.Time:\n            return scaleTime().range(range).domain(domain);\n        case ScaleType.Linear: {\n            const scale = scaleLinear().range(range).domain(domain);\n            if (roundDomains) {\n                return scale.nice();\n            }\n            return scale;\n        }\n        case ScaleType.Ordinal:\n            return scalePoint()\n                .range([range[0], range[1]])\n                .domain(domain.map(r => r.toString()));\n        default:\n            return undefined;\n    }\n}\n\nclass BubbleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.circles = this.getCircles();\n    }\n    getCircles() {\n        const seriesName = this.data.name;\n        return this.data.series\n            .map((d, i) => {\n            if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n                const y = d.y;\n                const x = d.x;\n                const r = d.r;\n                const radius = this.rScale(r || 1);\n                const tooltipLabel = formatLabel(d.name);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n                const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n                const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n                const opacity = isActive ? 1 : 0.3;\n                const data = Object.assign({}, d, {\n                    series: seriesName,\n                    name: d.name,\n                    value: d.y,\n                    x: d.x,\n                    radius: d.r\n                });\n                return {\n                    data,\n                    x,\n                    y,\n                    r,\n                    classNames: [`circle-data-${i}`],\n                    value: y,\n                    label: x,\n                    cx,\n                    cy,\n                    radius,\n                    tooltipLabel,\n                    color,\n                    opacity,\n                    seriesName,\n                    isActive,\n                    transform: `translate(${cx},${cy})`\n                };\n            }\n        })\n            .filter(circle => circle !== undefined);\n    }\n    getTooltipText(circle) {\n        const hasRadius = typeof circle.r !== 'undefined';\n        const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n        const hasSeriesName = circle.seriesName && circle.seriesName.length;\n        const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n        const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n        const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n        const x = formatLabel(circle.x);\n        const y = formatLabel(circle.y);\n        const name = hasSeriesName && hasTooltipLabel\n            ? `${circle.seriesName} • ${circle.tooltipLabel}`\n            : circle.seriesName + circle.tooltipLabel;\n        const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n        return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isVisible(circle) {\n        if (this.activeEntries.length > 0) {\n            return this.isActive({ name: circle.seriesName });\n        }\n        return circle.opacity !== 0;\n    }\n    activateCircle(circle) {\n        circle.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle(circle) {\n        circle.barVisible = false;\n        this.deactivate.emit({ name: this.data.name });\n    }\n    trackBy(index, circle) {\n        return `${circle.data.series} ${circle.data.name}`;\n    }\n}\nBubbleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBubbleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", rScale: \"rScale\", xScaleType: \"xScaleType\", yScaleType: \"yScaleType\", colors: \"colors\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0,\n                    transform: 'scale(0)'\n                }),\n                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bubble-series]',\n                    template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0,\n                                    transform: 'scale(0)'\n                                }),\n                                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], rScale: [{\n                type: Input\n            }], xScaleType: [{\n                type: Input\n            }], yScaleType: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BubbleChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showGridLines = true;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.maxRadius = 10;\n        this.minRadius = 3;\n        this.schemeType = ScaleType.Ordinal;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.scaleType = ScaleType.Linear;\n        this.margin = [10, 20, 10, 20];\n        this.bubblePadding = [0, 0, 0, 0];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.activeEntries = [];\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.seriesDomain = this.results.map(d => d.name);\n        this.rDomain = this.getRDomain();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n        const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n        this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n        this.data = this.results;\n        this.minRadius = Math.max(this.minRadius, 1);\n        this.maxRadius = Math.max(this.maxRadius, 1);\n        this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n        this.bubblePadding = [0, 0, 0, 0];\n        this.setScales();\n        this.bubblePadding = this.getBubblePadding();\n        this.setScales();\n        this.legendOptions = this.getLegendOptions();\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    hideCircles() {\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    getBubblePadding() {\n        let yMin = 0;\n        let xMin = 0;\n        let yMax = this.dims.height;\n        let xMax = this.dims.width;\n        for (const s of this.data) {\n            for (const d of s.series) {\n                const r = this.rScale(d.r);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n                xMin = Math.max(r - cx, xMin);\n                yMin = Math.max(r - cy, yMin);\n                yMax = Math.max(cy + r, yMax);\n                xMax = Math.max(cx + r, xMax);\n            }\n        }\n        xMax = Math.max(xMax - this.dims.width, 0);\n        yMax = Math.max(yMax - this.dims.height, 0);\n        return [yMin, xMax, yMax, xMin];\n    }\n    setScales() {\n        let width = this.dims.width;\n        if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n            width = width - this.bubblePadding[1];\n        }\n        let height = this.dims.height;\n        if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n            height = height - this.bubblePadding[2];\n        }\n        this.xScale = this.getXScale(this.xDomain, width);\n        this.yScale = this.getYScale(this.yDomain, height);\n    }\n    getYScale(domain, height) {\n        return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    }\n    getXScale(domain, width) {\n        return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    }\n    getRScale(domain, range) {\n        const scale = scaleLinear().range(range).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            position: this.legendPosition,\n            title: undefined\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.rDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    getXDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.x)) {\n                    values.push(d.x);\n                }\n            }\n        }\n        this.xScaleType = getScaleType(values);\n        return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    }\n    getYDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.y)) {\n                    values.push(d.y);\n                }\n            }\n        }\n        this.yScaleType = getScaleType(values);\n        return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    }\n    getRDomain() {\n        let min = Infinity;\n        let max = -Infinity;\n        for (const results of this.results) {\n            for (const d of results.series) {\n                const value = Number(d.r) || 1;\n                min = Math.min(min, value);\n                max = Math.max(max, value);\n            }\n        }\n        return [min, max];\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nBubbleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBubbleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleChartComponent, selector: \"ngx-charts-bubble-chart\", inputs: { showGridLines: \"showGridLines\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", maxRadius: \"maxRadius\", minRadius: \"minRadius\", autoScale: \"autoScale\", schemeType: \"schemeType\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"colors\", \"visibleValue\", \"activeEntries\", \"xAxisLabel\", \"yAxisLabel\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bubble-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showGridLines: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], maxRadius: [{\n                type: Input\n            }], minRadius: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BubbleChartModule {\n}\nBubbleChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBubbleChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, declarations: [BubbleChartComponent, BubbleSeriesComponent], imports: [ChartCommonModule], exports: [BubbleChartComponent, BubbleSeriesComponent] });\nBubbleChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BubbleChartComponent, BubbleSeriesComponent],\n                    exports: [BubbleChartComponent, BubbleSeriesComponent]\n                }]\n        }] });\n\nclass HeatMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.transform = `translate(${this.x} , ${this.y})`;\n        this.startOpacity = 0.3;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n        if (this.animations) {\n            this.loadAnimation();\n        }\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0);\n        this.animateToCurrentForm();\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        node.transition().duration(750).attr('opacity', 1);\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n}\nHeatMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nHeatMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: { fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", data: \"data\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass HeatCellSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnInit() {\n        if (!this.tooltipText) {\n            this.tooltipText = this.getTooltipText;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        const cells = [];\n        this.data.map(row => {\n            row.series.map(cell => {\n                const value = cell.value;\n                cell.series = row.name;\n                cells.push({\n                    row,\n                    cell,\n                    x: this.xScale(row.name),\n                    y: this.yScale(cell.name),\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: this.colors.getColor(value),\n                    data: value,\n                    label: formatLabel(cell.name),\n                    series: row.name\n                });\n            });\n        });\n        return cells;\n    }\n    getTooltipText({ label, data, series }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nHeatCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nHeatCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: { data: \"data\", colors: \"colors\", xScale: \"xScale\", yScale: \"yScale\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: [\"fill\", \"x\", \"y\", \"width\", \"height\", \"data\", \"gradient\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass HeatMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.innerPadding = 8;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.scaleType = ScaleType.Linear;\n    }\n    update() {\n        super.update();\n        this.formatDates();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.valueDomain = this.getValueDomain();\n        this.scaleType = getScaleType(this.valueDomain, false);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.scaleType,\n            legendPosition: this.legendPosition\n        });\n        if (this.scaleType === ScaleType.Linear) {\n            let min = this.min;\n            let max = this.max;\n            if (!this.min) {\n                min = Math.min(0, ...this.valueDomain);\n            }\n            if (!this.max) {\n                max = Math.max(...this.valueDomain);\n            }\n            this.valueDomain = [min, max];\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.rects = this.getRects();\n    }\n    getXDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.name)) {\n                domain.push(group.name);\n            }\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.name)) {\n                    domain.push(d.name);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        return domain;\n    }\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n    getDimension(value, index = 0, N, L) {\n        if (typeof value === 'string') {\n            value = value\n                .replace('[', '')\n                .replace(']', '')\n                .replace('px', '')\n                // tslint:disable-next-line: quotemark\n                .replace(\"'\", '');\n            if (value.includes(',')) {\n                value = value.split(',');\n            }\n        }\n        if (Array.isArray(value) && typeof index === 'number') {\n            return this.getDimension(value[index], null, N, L);\n        }\n        if (typeof value === 'string' && value.includes('%')) {\n            return +value.replace('%', '') / 100;\n        }\n        return N / (L / +value + 1);\n    }\n    getXScale() {\n        const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n        return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n    }\n    getYScale() {\n        const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n        return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n    }\n    getRects() {\n        const rects = [];\n        this.xDomain.map(xVal => {\n            this.yDomain.map(yVal => {\n                rects.push({\n                    x: this.xScale(xVal),\n                    y: this.yScale(yVal),\n                    rx: 3,\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: 'rgba(200,200,200,0.03)'\n                });\n            });\n        });\n        return rects;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: this.scaleType,\n            domain: this.valueDomain,\n            colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n            title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nHeatMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nHeatMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapComponent, selector: \"ngx-charts-heat-map\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", gradient: \"gradient\", innerPadding: \"innerPadding\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", min: \"min\", max: \"max\", activeEntries: \"activeEntries\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: [\"data\", \"colors\", \"xScale\", \"yScale\", \"gradient\", \"tooltipDisabled\", \"tooltipText\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-heat-map', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass HeatMapModule {\n}\nHeatMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHeatMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent], imports: [ChartCommonModule], exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent] });\nHeatMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n                    exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n                }]\n        }] });\n\nclass LineComponent {\n    constructor(element, platformId) {\n        this.element = element;\n        this.platformId = platformId;\n        this.fill = 'none';\n        this.animations = true;\n        // @Output() select = new EventEmitter();\n        this.initialized = false;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.initialPath = this.path;\n        }\n        else {\n            this.updatePathEl();\n        }\n    }\n    updatePathEl() {\n        const node = select(this.element.nativeElement).select('.line');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n}\nLineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, deps: [{ token: i0.ElementRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nLineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: { path: \"path\", stroke: \"stroke\", data: \"data\", fill: \"fill\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    strokeDasharray: 2000,\n                    strokeDashoffset: 2000\n                }),\n                animate(1000, style({\n                    strokeDashoffset: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    strokeDasharray: 2000,\n                                    strokeDashoffset: 2000\n                                }),\n                                animate(1000, style({\n                                    strokeDashoffset: 0\n                                }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { path: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const data = this.sortData(this.data.series);\n        const lineGen = this.getLineGenerator();\n        this.path = lineGen(data) || '';\n        const areaGen = this.getAreaGenerator();\n        this.areaPath = areaGen(data) || '';\n        if (this.hasRange) {\n            const range = this.getRangeGenerator();\n            this.outerPath = range(data) || '';\n        }\n        if (this.hasGradient) {\n            this.stroke = this.gradientUrl;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            if (max === min) {\n                this.stroke = this.colors.getColor(max);\n            }\n        }\n        else {\n            this.stroke = this.colors.getColor(this.data.name);\n        }\n    }\n    getLineGenerator() {\n        return line()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    getRangeGenerator() {\n        return area()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n            .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n            .curve(this.curve);\n    }\n    getAreaGenerator() {\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        return area()\n            .x(xProperty)\n            .y0(() => this.yScale.range()[0])\n            .y1(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        return data;\n    }\n    updateGradients() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            this.gradientId = 'grad' + id().toString();\n            this.gradientUrl = `url(#${this.gradientId})`;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            this.areaGradientStops = this.colors.getLinearGradientStops(max);\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n            this.areaGradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nLineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", hasRange: \"hasRange\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line-series]',\n                    template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], hasRange: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showRefLines = false;\n        this.showRefLabels = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, width]).domain(domain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, width]).domain(domain);\n            if (this.roundDomains) {\n                scale = scale.nice();\n            }\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n        }\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        this.deactivateAll();\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineChartComponent, selector: \"ngx-charts-line-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showRefLines: \"showRefLines\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"hasRange\", \"animations\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-line-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LineChartModule {\n}\nLineChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLineChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, declarations: [LineComponent, LineChartComponent, LineSeriesComponent], imports: [ChartCommonModule], exports: [LineComponent, LineChartComponent, LineSeriesComponent] });\nLineChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n                    exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n                }]\n        }] });\n\nclass PieLabelComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.animations = true;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.trimLabel = trimLabel;\n    }\n    ngOnChanges(changes) {\n        this.setTransforms();\n        this.update();\n    }\n    setTransforms() {\n        if (isPlatformServer(this.platformId)) {\n            this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = `translate(${this.textX},${this.textY})`;\n            this.textTransition = !this.animations ? null : 'transform 0.75s';\n        }\n        else {\n            const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n            this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n            this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n        }\n    }\n    update() {\n        let startRadius = this.radius;\n        if (this.explodeSlices) {\n            startRadius = (this.radius * this.value) / this.max;\n        }\n        const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n        // Calculate innerPos then scale outer position to match label position\n        const innerPos = innerArc.centroid(this.data);\n        let scale = this.data.pos[1] / innerPos[1];\n        if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n            scale = 1;\n        }\n        const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n        this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n    }\n    get textX() {\n        return this.data.pos[0];\n    }\n    get textY() {\n        return this.data.pos[1];\n    }\n    textAnchor() {\n        return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n}\nPieLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nPieLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: { data: \"data\", radius: \"radius\", label: \"label\", color: \"color\", max: \"max\", value: \"value\", explodeSlices: \"explodeSlices\", animations: \"animations\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\" }, usesOnChanges: true, ngImport: i0, template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-label]',\n                    template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }] } });\n\nclass PolarSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.circleRadius = 3;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const line = this.getLineGenerator();\n        const data = this.sortData(this.data.series);\n        const seriesName = this.data.name;\n        const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n        const min = this.yScale.domain()[0];\n        this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n        this.path = line(data) || '';\n        this.circles = data.map(d => {\n            const a = this.getAngle(d);\n            const r = this.getRadius(d);\n            const value = d.value;\n            const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n            const cData = Object.assign({}, d, {\n                series: seriesName,\n                value,\n                name: d.name\n            });\n            return {\n                data: cData,\n                cx: r * Math.sin(a),\n                cy: -r * Math.cos(a),\n                value,\n                color,\n                label: d.name\n            };\n        });\n        this.active = this.isActive(this.data);\n        this.inactive = this.isInactive(this.data);\n        this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n    }\n    getAngle(d) {\n        const label = d.name;\n        if (this.scaleType === ScaleType.Time) {\n            return this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            return this.xScale(Number(label));\n        }\n        return this.xScale(label);\n    }\n    getRadius(d) {\n        return this.yScale(d.value);\n    }\n    getLineGenerator() {\n        return lineRadial()\n            .angle(d => this.getAngle(d))\n            .radius(d => this.getRadius(d))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            return sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            return sortByTime(data, 'name');\n        }\n        return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n    defaultTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    updateGradients() {\n        this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n        if (!this.hasGradient) {\n            return;\n        }\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        }\n        else {\n            this.gradientStops = undefined;\n        }\n    }\n}\nPolarSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPolarSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: { name: \"name\", data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", gradient: \"gradient\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-polar-series]',\n                    template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { name: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nconst twoPI = 2 * Math.PI;\nclass PolarChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveCardinalClosed;\n        this.activeEntries = [];\n        this.rangeFillOpacity = 0.15;\n        this.trimYAxisTicks = true;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showSeriesOnHover = true;\n        this.gradient = false;\n        this.yAxisMinScale = 0;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        // series: any; // ???\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.orientation = Orientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.setDims();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.setTicks();\n    }\n    setDims() {\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        const halfWidth = Math.floor(this.dims.width / 2);\n        const halfHeight = Math.floor(this.dims.height / 2);\n        const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n        const yOffset = Math.max(0, halfHeight - outerRadius);\n        this.yAxisDims = {\n            ...this.dims,\n            width: halfWidth\n        };\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.transformYAxis = `translate(0, ${yOffset})`;\n        this.labelOffset = this.dims.height + 40;\n        this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n    }\n    setScales() {\n        const xValues = this.getXValues();\n        this.scaleType = getScaleType(xValues);\n        this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, twoPI);\n        this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n        this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    }\n    setTicks() {\n        let tickFormat;\n        if (this.xAxisTickFormatting) {\n            tickFormat = this.xAxisTickFormatting;\n        }\n        else if (this.xScale.tickFormat) {\n            tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n        }\n        else {\n            tickFormat = d => {\n                if (isDate(d)) {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const outerRadius = this.outerRadius;\n        const s = 1.1;\n        this.thetaTicks = this.xDomain.map(d => {\n            const startAngle = this.xScale(d);\n            const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n            const label = tickFormat(d);\n            const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n            const pos = [dd, s * startPos[1]];\n            return {\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle: startAngle,\n                value: outerRadius,\n                label,\n                startPos,\n                pos\n            };\n        });\n        const minDistance = 10;\n        /* from pie chart, abstract out -*/\n        for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n            const a = this.thetaTicks[i];\n            for (let j = i + 1; j < this.thetaTicks.length; j++) {\n                const b = this.thetaTicks[j];\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n    }\n    getXValues() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        return values;\n    }\n    getXDomain(values = this.getXValues()) {\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        return values;\n    }\n    getYValues() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        return domain;\n    }\n    getYDomain(domain = this.getYValues()) {\n        let min = Math.min(...domain);\n        const max = Math.max(this.yAxisMinScale, ...domain);\n        min = Math.max(0, min);\n        if (!this.autoScale) {\n            min = Math.min(0, min);\n        }\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        switch (this.scaleType) {\n            case ScaleType.Time:\n                return scaleTime().range([0, width]).domain(domain);\n            case ScaleType.Linear: {\n                const scale = scaleLinear().range([0, width]).domain(domain);\n                return this.roundDomains ? scale.nice() : scale;\n            }\n            default:\n                return scalePoint()\n                    .range([0, width - twoPI / domain.length])\n                    .padding(0)\n                    .domain(domain);\n        }\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([0, height]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        if (this.schemeType === ScaleType.Ordinal) {\n            return {\n                scaleType: this.schemeType,\n                colors: this.colors,\n                domain: this.seriesDomain,\n                title: this.legendTitle,\n                position: this.legendPosition\n            };\n        }\n        return {\n            scaleType: this.schemeType,\n            colors: this.colors.scale,\n            domain: this.yDomain,\n            title: undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nPolarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPolarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarChartComponent, selector: \"ngx-charts-polar-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimYAxisTicks: \"trimYAxisTicks\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showSeriesOnHover: \"showSeriesOnHover\", gradient: \"gradient\", yAxisMinScale: \"yAxisMinScale\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }, { type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: [\"name\", \"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"tooltipDisabled\", \"tooltipText\", \"gradient\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-polar-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showSeriesOnHover: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], yAxisMinScale: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieArcComponent {\n    constructor(element) {\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.cornerRadius = 0;\n        this.explodeSlices = false;\n        this.gradient = false;\n        this.animate = true;\n        this.pointerEvents = true;\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getGradient() {\n        return this.gradient ? this.gradientFill : this.fill;\n    }\n    getPointerEvents() {\n        return this.pointerEvents ? 'auto' : 'none';\n    }\n    update() {\n        const calc = this.calculateArc();\n        this.startOpacity = 0.5;\n        this.radialGradientId = 'linearGrad' + id().toString();\n        this.gradientFill = `url(#${this.radialGradientId})`;\n        if (this.animate) {\n            if (this.initialized) {\n                this.updateAnimation();\n            }\n            else {\n                this.loadAnimation();\n                this.initialized = true;\n            }\n        }\n        else {\n            this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n        }\n    }\n    calculateArc() {\n        let outerRadius = this.outerRadius;\n        if (this.explodeSlices && this.innerRadius === 0) {\n            outerRadius = (this.outerRadius * this.value) / this.max;\n        }\n        return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n    }\n    loadAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const copyOfD = Object.assign({}, d);\n            copyOfD.endAngle = copyOfD.startAngle;\n            const interpolater = interpolate(copyOfD, copyOfD);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        })\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    updateAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    onClick() {\n        clearTimeout(this._timeout);\n        this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n    }\n    onDblClick(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._timeout);\n        this.dblclick.emit({\n            data: this.data,\n            nativeEvent: event\n        });\n    }\n}\nPieArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: { fill: \"fill\", startAngle: \"startAngle\", endAngle: \"endAngle\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", cornerRadius: \"cornerRadius\", value: \"value\", max: \"max\", data: \"data\", explodeSlices: \"explodeSlices\", gradient: \"gradient\", animate: \"animate\", pointerEvents: \"pointerEvents\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-arc]',\n                    template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], endAngle: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animate: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass PieSeriesComponent {\n    constructor() {\n        this.series = [];\n        this.innerRadius = 60;\n        this.outerRadius = 80;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        const pieGenerator = pie()\n            .value(d => d.value)\n            .sort(null);\n        const arcData = pieGenerator(this.series);\n        this.max = max(arcData, d => {\n            return d.value;\n        });\n        this.data = this.calculateLabelPositions(arcData);\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n    outerArc() {\n        const factor = 1.5;\n        return arc()\n            .innerRadius(this.outerRadius * factor)\n            .outerRadius(this.outerRadius * factor);\n    }\n    calculateLabelPositions(pieData) {\n        const factor = 1.5;\n        const minDistance = 10;\n        const labelPositions = pieData;\n        labelPositions.forEach(d => {\n            d.pos = this.outerArc().centroid(d);\n            d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n        });\n        for (let i = 0; i < labelPositions.length - 1; i++) {\n            const a = labelPositions[i];\n            if (!this.labelVisible(a)) {\n                continue;\n            }\n            for (let j = i + 1; j < labelPositions.length; j++) {\n                const b = labelPositions[j];\n                if (!this.labelVisible(b)) {\n                    continue;\n                }\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        return labelPositions;\n    }\n    labelVisible(myArc) {\n        return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    }\n    getTooltipTitle(a) {\n        return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    }\n    labelText(myArc) {\n        if (this.labelFormatting) {\n            return this.labelFormatting(myArc.data.name);\n        }\n        return this.label(myArc);\n    }\n    label(myArc) {\n        return formatLabel(myArc.data.name);\n    }\n    defaultTooltipText(myArc) {\n        const label = this.label(myArc);\n        const val = formatLabel(myArc.data.value);\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    color(myArc) {\n        return this.colors.getColor(this.label(myArc));\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n}\nPieSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPieSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: { colors: \"colors\", series: \"series\", dims: \"dims\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", explodeSlices: \"explodeSlices\", showLabels: \"showLabels\", gradient: \"gradient\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-series]',\n                    template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { colors: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: (this.width * 4) / 12.0,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        const xOffset = this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.legendWidth = this.width - this.dims.width - this.margin[1];\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n        this.innerRadius = this.outerRadius * 0.75;\n        this.transform = `translate(${xOffset} , ${yOffset})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nAdvancedPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAdvancedPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedPieChartComponent, selector: \"ngx-charts-advanced-pie-chart\", inputs: { gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", valueFormatting: \"valueFormatting\", nameFormatting: \"nameFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }, { type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: [\"width\", \"data\", \"colors\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-pie-chart', template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"] }]\n        }], propDecorators: { gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], valueFormatting: [{\n                type: Input\n            }], nameFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nclass PieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.labels = false;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.explodeSlices = false;\n        this.doughnut = false;\n        this.arcWidth = 0.25;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.dblclick = new EventEmitter();\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    update() {\n        super.update();\n        if (this.labels && this.hasNoOptionalMarginsSet()) {\n            this.margins = [30, 80, 30, 80];\n        }\n        else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n            // default value for margins\n            this.margins = [20, 20, 20, 20];\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margins,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        const xOffset = this.margins[3] + this.dims.width / 2;\n        const yOffset = this.margins[0] + this.dims.height / 2;\n        this.translation = `translate(${xOffset}, ${yOffset})`;\n        this.outerRadius = Math.min(this.dims.width, this.dims.height);\n        if (this.labels) {\n            // make room for labels\n            this.outerRadius /= 3;\n        }\n        else {\n            this.outerRadius /= 2;\n        }\n        this.innerRadius = 0;\n        if (this.doughnut) {\n            this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n        }\n        this.domain = this.getDomain();\n        // sort data according to domain\n        this.data = this.results.sort((a, b) => {\n            return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n        });\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            domain: this.domain,\n            colors: this.colors,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    hasNoOptionalMarginsSet() {\n        return !this.margins || this.margins.length <= 0;\n    }\n}\nPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieChartComponent, selector: \"ngx-charts-pie-chart\", inputs: { labels: \"labels\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", explodeSlices: \"explodeSlices\", doughnut: \"doughnut\", arcWidth: \"arcWidth\", gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", margins: \"margins\" }, outputs: { dblclick: \"dblclick\", select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"] }]\n        }], propDecorators: { labels: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], doughnut: [{\n                type: Input\n            }], arcWidth: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], dblclick: [{\n                type: Output\n            }], margins: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nfunction gridSize(dims, len, minWidth) {\n    let rows = 1;\n    let cols = len;\n    const width = dims.width;\n    if (width > minWidth) {\n        while (width / cols < minWidth) {\n            rows += 1;\n            cols = Math.ceil(len / rows);\n        }\n    }\n    return [cols, rows];\n}\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n    const xScale = scaleBand();\n    const yScale = scaleBand();\n    const width = dims.width;\n    const height = dims.height;\n    const [columns, rows] = gridSize(dims, data.length, minWidth);\n    const xDomain = [];\n    const yDomain = [];\n    for (let i = 0; i < rows; i++) {\n        yDomain.push(i);\n    }\n    for (let i = 0; i < columns; i++) {\n        xDomain.push(i);\n    }\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n    xScale.rangeRound([0, width], 0.1);\n    yScale.rangeRound([0, height], 0.1);\n    const res = [];\n    const total = designatedTotal ? designatedTotal : getTotal(data);\n    const cardWidth = xScale.bandwidth();\n    const cardHeight = yScale.bandwidth();\n    for (let i = 0; i < data.length; i++) {\n        res[i] = {};\n        res[i].data = {\n            name: data[i] ? data[i].name : '',\n            value: data[i] ? data[i].value : undefined,\n            extra: data[i] ? data[i].extra : undefined,\n            label: data[i] ? data[i].label : ''\n        };\n        res[i].x = xScale(i % columns);\n        res[i].y = yScale(Math.floor(i / columns));\n        res[i].width = cardWidth;\n        res[i].height = cardHeight;\n        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n        res[i].data.total = total;\n    }\n    return res;\n}\nfunction getTotal(results) {\n    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n    constructor(element) {\n        this.innerRadius = 70;\n        this.outerRadius = 80;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.layout = pie()\n            .value(d => d.data.value)\n            .sort(null);\n        this.arcs = this.getArcs();\n    }\n    getArcs() {\n        return this.layout(this.data).map((arc, index) => {\n            const label = arc.data.data.name;\n            const other = arc.data.data.other;\n            if (index === 0) {\n                arc.startAngle = 0;\n            }\n            const color = this.colors(label);\n            return {\n                data: arc.data.data,\n                class: 'arc ' + 'arc' + index,\n                fill: color,\n                startAngle: other ? 0 : arc.startAngle,\n                endAngle: arc.endAngle,\n                animate: this.animations && !other,\n                pointerEvents: !other\n            };\n        });\n    }\n    onClick(data) {\n        this.select.emit(this.data[0].data);\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    label(arc) {\n        return arc.data.name;\n    }\n    color(arc) {\n        return this.colors(this.label(arc));\n    }\n}\nPieGridSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieGridSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: { colors: \"colors\", data: \"data\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-grid-series]',\n                    template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { colors: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass PieGridComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.minWidth = 150;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n        this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n        this.series = this.getSeries();\n        this.setColors();\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    defaultTooltipText({ data }) {\n        const label = trimLabel(formatLabel(data.name));\n        const val = data.value.toLocaleString();\n        return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    getSeries() {\n        const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n        return this.data.map(d => {\n            const baselineLabelHeight = 20;\n            const padding = 10;\n            const name = d.data.name;\n            const label = formatLabel(name);\n            const value = d.data.value;\n            const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n            const innerRadius = radius * 0.9;\n            let count = 0;\n            const colors = () => {\n                count += 1;\n                if (count === 1) {\n                    return 'rgba(100,100,100,0.3)';\n                }\n                else {\n                    return this.colorScale.getColor(label);\n                }\n            };\n            const xPos = d.x + (d.width - padding) / 2;\n            const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n            return {\n                transform: `translate(${xPos}, ${yPos})`,\n                colors,\n                innerRadius,\n                outerRadius: radius,\n                name,\n                label: trimLabel(label),\n                total: value,\n                value,\n                percent: format('.1%')(d.data.percent),\n                data: [\n                    d,\n                    {\n                        data: {\n                            other: true,\n                            value: total - value,\n                            name: d.data.name\n                        }\n                    }\n                ]\n            };\n        });\n    }\n    getTotal() {\n        return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nPieGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridComponent, selector: \"ngx-charts-pie-grid\", inputs: { designatedTotal: \"designatedTotal\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", minWidth: \"minWidth\", activeEntries: \"activeEntries\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: [\"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-grid', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"] }]\n        }], propDecorators: { designatedTotal: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieChartModule {\n}\nPieChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPieChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, declarations: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent], imports: [ChartCommonModule], exports: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent] });\nPieChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ],\n                    exports: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ]\n                }]\n        }] });\n\nclass PolarChartModule {\n}\nPolarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPolarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, declarations: [PolarChartComponent, PolarSeriesComponent], imports: [ChartCommonModule, PieChartModule, LineChartModule], exports: [PolarChartComponent, PolarSeriesComponent] });\nPolarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, imports: [[ChartCommonModule, PieChartModule, LineChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, LineChartModule],\n                    declarations: [PolarChartComponent, PolarSeriesComponent],\n                    exports: [PolarChartComponent, PolarSeriesComponent]\n                }]\n        }] });\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n    return text.split('').reduce((acc, curr) => {\n        const width = fontFamilyKey[curr] || defaultWidth;\n        return acc + width;\n    }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n    '0': 10,\n    '1': 10,\n    '2': 10,\n    '3': 10,\n    '4': 10,\n    '5': 10,\n    '6': 10,\n    '7': 10,\n    '8': 10,\n    '9': 10,\n    A: 11,\n    B: 11,\n    C: 11,\n    D: 12,\n    E: 10,\n    F: 9,\n    G: 12,\n    H: 12,\n    I: 7,\n    J: 7,\n    K: 11,\n    L: 9,\n    M: 13,\n    N: 12,\n    O: 13,\n    P: 10,\n    Q: 13,\n    R: 11,\n    S: 11,\n    T: 10,\n    U: 12,\n    V: 11,\n    W: 16,\n    X: 11,\n    Y: 10,\n    Z: 11,\n    a: 10,\n    b: 10,\n    c: 8,\n    d: 10,\n    e: 10,\n    f: 6,\n    g: 10,\n    h: 10,\n    i: 4,\n    j: 6,\n    k: 9,\n    l: 4,\n    m: 16,\n    n: 10,\n    o: 10,\n    p: 10,\n    q: 10,\n    r: 7,\n    s: 8,\n    t: 6,\n    u: 10,\n    v: 9,\n    w: 13,\n    x: 9,\n    y: 9,\n    z: 8,\n    '!': 6,\n    '@': 16,\n    '#': 13,\n    $: 10,\n    '%': 17,\n    '^': 13,\n    '&': 12,\n    '*': 10,\n    '(': 7,\n    ')': 7,\n    _: 10,\n    '-': 7,\n    '+': 13,\n    '=': 13,\n    ',': 6,\n    '.': 6,\n    '/': 7,\n    \"'\": 4,\n    ':': 7,\n    '|': 7,\n    '?': 9,\n    ';': 7,\n    '<': 13,\n    '>': 13\n};\n\nclass CardComponent {\n    constructor(element, cd, zone, platformId) {\n        this.cd = cd;\n        this.zone = zone;\n        this.platformId = platformId;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.value = '';\n        this.textFontSize = 12;\n        this.textTransform = '';\n        this.initialized = false;\n        this.bandHeight = 10;\n        this.textPadding = [10, 20, 5, 20];\n        this.labelFontSize = 15;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR();\n        }\n    }\n    ngOnDestroy() {\n        if (isPlatformBrowser(this.platformId)) {\n            cancelAnimationFrame(this.animationReq);\n        }\n    }\n    update() {\n        this.zone.run(() => {\n            const hasValue = this.data && typeof this.data.value !== 'undefined';\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n            this.transform = `translate(${this.x} , ${this.y})`;\n            this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n            this.cardWidth = Math.max(0, this.width);\n            this.cardHeight = Math.max(0, this.height);\n            this.label = this.label ? this.label : this.data.name;\n            const cardData = {\n                label: this.label,\n                data: this.data,\n                value: this.data.value\n            };\n            this.formattedLabel = labelFormatting(cardData);\n            this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n            const value = hasValue ? valueFormatting(cardData) : '';\n            this.value = this.paddedValue(value);\n            this.setPadding();\n            this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n            setTimeout(() => {\n                if (isPlatformBrowser(this.platformId)) {\n                    this.scaleText();\n                }\n                this.value = value;\n                if (hasValue && !this.initialized) {\n                    setTimeout(() => this.startCount(), 20);\n                }\n            }, 8);\n        });\n    }\n    paddedValue(value) {\n        if (this.medianSize && this.medianSize > value.length) {\n            value += '\\u2007'.repeat(this.medianSize - value.length);\n        }\n        return value;\n    }\n    startCount() {\n        if (!this.initialized && this.animations) {\n            cancelAnimationFrame(this.animationReq);\n            const val = this.data.value;\n            const decs = decimalChecker(val);\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const callback = ({ value, finished }) => {\n                this.zone.run(() => {\n                    value = finished ? val : value;\n                    this.value = valueFormatting({ label: this.label, data: this.data, value });\n                    if (!finished) {\n                        this.value = this.paddedValue(this.value);\n                    }\n                    this.cd.markForCheck();\n                });\n            };\n            this.animationReq = count(0, val, decs, 1, callback);\n            this.initialized = true;\n        }\n    }\n    scaleText() {\n        this.zone.run(() => {\n            const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n            if (width === 0 || height === 0) {\n                return;\n            }\n            const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n            const availableWidth = this.cardWidth - 2 * textPadding;\n            const availableHeight = this.cardHeight / 3;\n            const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n            this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n            this.labelFontSize = Math.min(this.textFontSize, 15);\n            this.setPadding();\n            this.cd.markForCheck();\n        });\n    }\n    scaleTextSSR() {\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n        const height = 18;\n        const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n        const availableWidth = this.cardWidth - 2 * textPadding;\n        const availableHeight = this.cardHeight / 3;\n        const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n        this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n        this.labelFontSize = Math.min(this.textFontSize, 15);\n        this.setPadding();\n    }\n    setPadding() {\n        this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n        const padding = this.cardHeight / 2;\n        this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n        this.textPadding[2] = padding - this.labelFontSize;\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n}\nCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: { color: \"color\", bandColor: \"bandColor\", textColor: \"textColor\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", data: \"data\", medianSize: \"medianSize\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { color: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], medianSize: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl', { static: false }]\n            }] } });\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nfunction hexToRgb(value) {\n    // deprecated, use d3.color()\n    return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nfunction invertColor(value) {\n    const color = d3_color.rgb(value);\n    const { r, g, b, opacity } = color;\n    if (opacity === 0) {\n        return color.toString();\n    }\n    const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n    const depth = yiq >= 128 ? -0.8 : 0.8;\n    return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nfunction shadeRGBColor({ r, g, b }, percent) {\n    const t = percent < 0 ? 0 : 255;\n    const p = percent < 0 ? percent * -1 : percent;\n    r = Math.round((t - r) * p) + r;\n    g = Math.round((t - g) * p) + g;\n    b = Math.round((t - b) * p) + b;\n    return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n    constructor() {\n        this.innerPadding = 15;\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.data.length > 2) {\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const sortedLengths = this.data\n                .map(d => {\n                const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n                return hasValue\n                    ? valueFormatting({\n                        data: d.data,\n                        label: d ? d.data.name : '',\n                        value: d && d.data ? d.data.value : ''\n                    }).length\n                    : 0;\n            })\n                .sort((a, b) => b - a);\n            const idx = Math.ceil(this.data.length / 2);\n            this.medianSize = sortedLengths[idx];\n        }\n        const cards = this.getCards();\n        this.cards = cards.filter(d => d.data.value !== null);\n        this.emptySlots = cards.filter(d => d.data.value === null);\n    }\n    getCards() {\n        const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n        const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n        return this.data.map((d, index) => {\n            let label = d.data.name;\n            if (label && label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label ? label.toLocaleString() : label;\n            }\n            const value = d.data.value;\n            const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n            const color = this.cardColor || valueColor || '#000';\n            return {\n                x: d.x,\n                y: d.y,\n                width: d.width - xPadding,\n                height: d.height - yPadding,\n                color,\n                bandColor: this.bandColor || valueColor,\n                textColor: this.textColor || invertColor(color),\n                label,\n                data: d.data,\n                tooltipText: `${label}: ${value}`\n            };\n        });\n    }\n    trackBy(index, card) {\n        return card.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nCardSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCardSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", innerPadding: \"innerPadding\", cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `, isInline: true, components: [{ type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: [\"color\", \"bandColor\", \"textColor\", \"x\", \"y\", \"width\", \"height\", \"label\", \"data\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card-series]',\n                    template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass NumberCardComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.innerPadding = 15;\n        this.margin = [10, 10, 10, 10];\n    }\n    get clickable() {\n        return !!this.select.observers.length;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        const size = gridSize(this.dims, this.results.length, 150);\n        const N = size[0] * size[1];\n        const data = this.results.slice();\n        while (data.length < N) {\n            data.push({ value: null });\n        }\n        this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nNumberCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nNumberCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: NumberCardComponent, selector: \"ngx-charts-number-card\", inputs: { cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", innerPadding: \"innerPadding\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", designatedTotal: \"designatedTotal\" }, usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: [\"data\", \"dims\", \"colors\", \"innerPadding\", \"cardColor\", \"bandColor\", \"emptyColor\", \"textColor\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-number-card', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"] }]\n        }], propDecorators: { cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], designatedTotal: [{\n                type: Input\n            }] } });\n\nclass NumberCardModule {\n}\nNumberCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNumberCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, declarations: [CardComponent, CardSeriesComponent, NumberCardComponent], imports: [ChartCommonModule], exports: [CardComponent, CardSeriesComponent, NumberCardComponent] });\nNumberCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n                    exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n                }]\n        }] });\n\nclass TreeMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n        this.orientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n        const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n        const cellData = {\n            data: this.data,\n            label: this.label,\n            value: this.value\n        };\n        this.formattedValue = this.valueFormatting(cellData.value);\n        this.formattedLabel = labelFormatting(cellData);\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n    }\n    update() {\n        if (this.initialized) {\n            this.animateToCurrentForm();\n        }\n        else {\n            if (this.animations) {\n                this.loadAnimation();\n            }\n            this.initialized = true;\n        }\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n        this.animateToCurrentForm();\n    }\n    getTextColor() {\n        return invertColor(this.fill);\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        if (this.animations) {\n            node\n                .transition()\n                .duration(750)\n                .attr('opacity', 1)\n                .attr('x', this.x)\n                .attr('y', this.y)\n                .attr('width', this.width)\n                .attr('height', this.height);\n        }\n        else {\n            node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n        }\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: 0.3\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n}\nTreeMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: { data: \"data\", fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", value: \"value\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell]',\n                    template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapCellSeriesComponent {\n    constructor() {\n        this.gradient = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.styleTypes = StyleTypes;\n        this.placementTypes = PlacementTypes;\n    }\n    ngOnChanges(changes) {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        return this.data.children\n            .filter(d => {\n            return d.depth === 1;\n        })\n            .map((d, index) => {\n            const label = d.id;\n            return {\n                data: d.data,\n                x: d.x0,\n                y: d.y0,\n                width: d.x1 - d.x0,\n                height: d.y1 - d.y0,\n                fill: this.colors.getColor(label),\n                label,\n                value: d.value\n            };\n        });\n    }\n    getTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nTreeMapCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: [\"data\", \"fill\", \"x\", \"y\", \"width\", \"height\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.domain = this.getDomain();\n        this.treemap = treemap().size([this.dims.width, this.dims.height]);\n        const rootNode = {\n            name: 'root',\n            value: 0,\n            isRoot: true\n        };\n        const root = stratify()\n            .id(d => {\n            let label = d.name;\n            if (label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label.toLocaleString();\n            }\n            return label;\n        })\n            .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n            .sum(d => d.value);\n        this.data = this.treemap(root);\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nTreeMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nTreeMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapComponent, selector: \"ngx-charts-tree-map\", inputs: { results: \"results\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\" }, outputs: { select: \"select\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: [\"data\", \"dims\", \"colors\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-tree-map', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"] }]\n        }], propDecorators: { results: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass TreeMapModule {\n}\nTreeMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent], imports: [ChartCommonModule], exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent] });\nTreeMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n                    exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n                }]\n        }] });\n\nvar ElementType;\n(function (ElementType) {\n    ElementType[\"Value\"] = \"value\";\n    ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\nclass LinearGaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.min = 0;\n        this.max = 100;\n        this.value = 0;\n        this.margin = [10, 20, 10, 20];\n        this.valueResizeScale = 1;\n        this.unitsResizeScale = 1;\n        this.valueTextTransform = '';\n        this.valueTranslate = '';\n        this.unitsTextTransform = '';\n        this.unitsTranslate = '';\n        this.barOrientation = BarOrientation;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => {\n            this.scaleText(ElementType.Value);\n            this.scaleText(ElementType.Units);\n        });\n    }\n    update() {\n        super.update();\n        this.hasPreviousValue = this.previousValue !== undefined;\n        this.max = Math.max(this.max, this.value);\n        this.min = Math.min(this.min, this.value);\n        if (this.hasPreviousValue) {\n            this.max = Math.max(this.max, this.previousValue);\n            this.min = Math.min(this.min, this.previousValue);\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.setColors();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n        this.valueTranslate = `translate(0, -15)`;\n        this.unitsTranslate = `translate(0, 15)`;\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR('value');\n            this.scaleTextSSR('units');\n        }\n        else {\n            setTimeout(() => this.scaleText(ElementType.Value), 50);\n            setTimeout(() => this.scaleText(ElementType.Units), 50);\n        }\n    }\n    getValueDomain() {\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        if (this.valueFormatting) {\n            return this.valueFormatting(this.value);\n        }\n        return this.value.toLocaleString();\n    }\n    scaleText(element, repeat = true) {\n        let el;\n        let resizeScale;\n        if (element === ElementType.Value) {\n            el = this.valueTextEl;\n            resizeScale = this.valueResizeScale;\n        }\n        else {\n            el = this.unitsTextEl;\n            resizeScale = this.unitsResizeScale;\n        }\n        const { width, height } = el.nativeElement.getBoundingClientRect();\n        if (width === 0 || height === 0)\n            return;\n        const oldScale = resizeScale;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (resizeScale !== oldScale) {\n            if (element === ElementType.Value) {\n                this.valueResizeScale = resizeScale;\n                this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            else {\n                this.unitsResizeScale = resizeScale;\n                this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            this.cd.markForCheck();\n            if (repeat && isPlatformBrowser(this.platformId)) {\n                setTimeout(() => {\n                    this.scaleText(element, false);\n                }, 50);\n            }\n        }\n    }\n    scaleTextSSR(element) {\n        let resizeScale = 1;\n        const value = element === 'value' ? this.displayValue : this.units;\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n        const height = 25;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (element === 'value') {\n            this.valueResizeScale = resizeScale;\n            this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        else {\n            this.unitsResizeScale = resizeScale;\n            this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        this.cd.markForCheck();\n    }\n    onClick() {\n        this.select.emit({\n            name: 'Value',\n            value: this.value\n        });\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n    }\n}\nLinearGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLinearGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LinearGaugeComponent, selector: \"ngx-charts-linear-gauge\", inputs: { min: \"min\", max: \"max\", value: \"value\", units: \"units\", previousValue: \"previousValue\", valueFormatting: \"valueFormatting\" }, viewQueries: [{ propertyName: \"valueTextEl\", first: true, predicate: [\"valueTextEl\"], descendants: true }, { propertyName: \"unitsTextEl\", first: true, predicate: [\"unitsTextEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-linear-gauge', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"] }]\n        }], propDecorators: { min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], previousValue: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], valueTextEl: [{\n                type: ViewChild,\n                args: ['valueTextEl']\n            }], unitsTextEl: [{\n                type: ViewChild,\n                args: ['unitsTextEl']\n            }] } });\n\nclass GaugeArcComponent {\n    constructor() {\n        this.isActive = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    tooltipText(arc) {\n        const label = formatLabel(arc.data.name);\n        let val;\n        if (this.valueFormatting) {\n            val = this.valueFormatting(arc.data.value);\n        }\n        else {\n            val = formatLabel(arc.data.value);\n        }\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n}\nGaugeArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: { backgroundArc: \"backgroundArc\", valueArc: \"valueArc\", cornerRadius: \"cornerRadius\", colors: \"colors\", isActive: \"isActive\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-arc]',\n                    template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { backgroundArc: [{\n                type: Input\n            }], valueArc: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GaugeAxisComponent {\n    constructor() {\n        this.rotate = '';\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.rotationAngle = -90 + this.startAngle;\n        this.rotate = `rotate(${this.rotationAngle})`;\n        this.ticks = this.getTicks();\n    }\n    getTicks() {\n        const bigTickSegment = this.angleSpan / this.bigSegments;\n        const smallTickSegment = bigTickSegment / this.smallSegments;\n        const tickLength = 20;\n        const ticks = {\n            big: [],\n            small: []\n        };\n        const startDistance = this.radius + 10;\n        const textDist = startDistance + tickLength + 10;\n        for (let i = 0; i <= this.bigSegments; i++) {\n            const angleDeg = i * bigTickSegment;\n            const angle = (angleDeg * Math.PI) / 180;\n            const textAnchor = this.getTextAnchor(angleDeg);\n            let skip = false;\n            if (i === 0 && this.angleSpan === 360) {\n                skip = true;\n            }\n            if (!skip) {\n                let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n                if (this.tickFormatting) {\n                    text = this.tickFormatting(text);\n                }\n                ticks.big.push({\n                    line: this.getTickPath(startDistance, tickLength, angle),\n                    textAnchor,\n                    text,\n                    textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n                });\n            }\n            if (i === this.bigSegments) {\n                continue;\n            }\n            for (let j = 1; j <= this.smallSegments; j++) {\n                const smallAngleDeg = angleDeg + j * smallTickSegment;\n                const smallAngle = (smallAngleDeg * Math.PI) / 180;\n                ticks.small.push({\n                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n                });\n            }\n        }\n        return ticks;\n    }\n    getTextAnchor(angle) {\n        // [0, 45] = 'middle';\n        // [46, 135] = 'start';\n        // [136, 225] = 'middle';\n        // [226, 315] = 'end';\n        angle = (this.startAngle + angle) % 360;\n        let textAnchor = TextAnchor.Middle;\n        if (angle > 45 && angle <= 135) {\n            textAnchor = TextAnchor.Start;\n        }\n        else if (angle > 225 && angle <= 315) {\n            textAnchor = TextAnchor.End;\n        }\n        return textAnchor;\n    }\n    getTickPath(startDistance, tickLength, angle) {\n        const y1 = startDistance * Math.sin(angle);\n        const y2 = (startDistance + tickLength) * Math.sin(angle);\n        const x1 = startDistance * Math.cos(angle);\n        const x2 = (startDistance + tickLength) * Math.cos(angle);\n        const points = [\n            { x: x1, y: y1 },\n            { x: x2, y: y2 }\n        ];\n        const lineGenerator = line()\n            .x(d => d.x)\n            .y(d => d.y);\n        return lineGenerator(points);\n    }\n}\nGaugeAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: { bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", min: \"min\", max: \"max\", angleSpan: \"angleSpan\", startAngle: \"startAngle\", radius: \"radius\", valueScale: \"valueScale\", tickFormatting: \"tickFormatting\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-axis]',\n                    template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], valueScale: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }] } });\n\nclass GaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.min = 0;\n        this.max = 100;\n        this.bigSegments = 10;\n        this.smallSegments = 5;\n        this.showAxis = true;\n        this.startAngle = -120;\n        this.angleSpan = 240;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.showText = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.resizeScale = 1;\n        this.rotation = '';\n        this.textTransform = 'scale(1, 1)';\n        this.cornerRadius = 10;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => this.scaleText());\n    }\n    update() {\n        super.update();\n        if (!this.showAxis) {\n            if (!this.margin) {\n                this.margin = [10, 20, 10, 20];\n            }\n        }\n        else {\n            if (!this.margin) {\n                this.margin = [60, 100, 60, 100];\n            }\n        }\n        // make the starting angle positive\n        if (this.startAngle < 0) {\n            this.startAngle = (this.startAngle % 360) + 360;\n        }\n        this.angleSpan = Math.min(this.angleSpan, 360);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.domain = this.getDomain();\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n        this.arcs = this.getArcs();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.rotation = `rotate(${this.startAngle})`;\n        setTimeout(() => this.scaleText(), 50);\n    }\n    getArcs() {\n        const arcs = [];\n        const availableRadius = this.outerRadius * 0.7;\n        const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n        const arcWidth = radiusPerArc * 0.7;\n        this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n        this.cornerRadius = Math.floor(arcWidth / 2);\n        let i = 0;\n        for (const d of this.results) {\n            const outerRadius = this.outerRadius - i * radiusPerArc;\n            const innerRadius = outerRadius - arcWidth;\n            const backgroundArc = {\n                endAngle: (this.angleSpan * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: this.max,\n                    name: d.name\n                }\n            };\n            const valueArc = {\n                endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: d.value,\n                    name: d.name\n                }\n            };\n            const arc = {\n                backgroundArc,\n                valueArc\n            };\n            arcs.push(arc);\n            i++;\n        }\n        return arcs;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    getValueDomain() {\n        const values = this.results.map(d => d.value);\n        const dataMin = Math.min(...values);\n        const dataMax = Math.max(...values);\n        if (this.min !== undefined) {\n            this.min = Math.min(this.min, dataMin);\n        }\n        else {\n            this.min = dataMin;\n        }\n        if (this.max !== undefined) {\n            this.max = Math.max(this.max, dataMax);\n        }\n        else {\n            this.max = dataMax;\n        }\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n        if (this.textValue && 0 !== this.textValue.length) {\n            return this.textValue.toLocaleString();\n        }\n        if (this.valueFormatting) {\n            return this.valueFormatting(value);\n        }\n        return value.toLocaleString();\n    }\n    scaleText(repeat = true) {\n        if (!this.showText) {\n            return;\n        }\n        const { width } = this.textEl.nativeElement.getBoundingClientRect();\n        const oldScale = this.resizeScale;\n        if (width === 0) {\n            this.resizeScale = 1;\n        }\n        else {\n            const availableSpace = this.textRadius;\n            this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n        }\n        if (this.resizeScale !== oldScale) {\n            this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n            this.cd.markForCheck();\n            if (repeat) {\n                setTimeout(() => this.scaleText(false), 50);\n            }\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            colors: this.colors,\n            domain: this.domain,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n    trackBy(index, item) {\n        return item.valueArc.data.name;\n    }\n}\nGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeComponent, selector: \"ngx-charts-gauge\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", min: \"min\", max: \"max\", textValue: \"textValue\", units: \"units\", bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", results: \"results\", showAxis: \"showAxis\", startAngle: \"startAngle\", angleSpan: \"angleSpan\", activeEntries: \"activeEntries\", axisTickFormatting: \"axisTickFormatting\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", showText: \"showText\", margin: \"margin\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: [\"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"valueFormatting\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: [\"bigSegments\", \"smallSegments\", \"min\", \"max\", \"angleSpan\", \"startAngle\", \"radius\", \"valueScale\", \"tickFormatting\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-gauge', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], textValue: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], showAxis: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], axisTickFormatting: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], showText: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl']\n            }] } });\n\nclass GaugeModule {\n}\nGaugeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGaugeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent], imports: [ChartCommonModule, PieChartModule, BarChartModule], exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent] });\nGaugeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, imports: [[ChartCommonModule, PieChartModule, BarChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, BarChartModule],\n                    declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n                    exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n                }]\n        }] });\n\n// The export is needed here to generate a valid polyfills.metadata.json file\nfunction ngxChartsPolyfills() {\n    // IE11 fix\n    // Ref: https://github.com/swimlane/ngx-charts/issues/386\n    if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n        SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n    }\n}\n\nclass SankeyComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showLabels = true;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n        this.scaleType = ScaleType.Ordinal;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            legendType: this.scaleType\n        });\n        const linkDefs = this.results;\n        const nodeDefs = Array.from(new Set(linkDefs.flatMap(l => [l.source, l.target])), (name) => ({\n            name,\n            value: linkDefs.filter(l => l.source === name).reduce((acc, l) => acc + l.value, 0)\n        }));\n        // Configure generator\n        const sankeyGenerator = sankey()\n            .nodeId(d => d.name)\n            .nodeAlign(sankeyLeft)\n            .nodeWidth(15)\n            .nodePadding(10)\n            .extent([\n            [1, 5],\n            [this.dims.width - 1, this.dims.height - 5]\n        ]);\n        // Generate links and nodes\n        const data = sankeyGenerator({\n            nodes: nodeDefs.map(d => Object.assign({}, d)),\n            links: linkDefs.map(d => Object.assign({}, d))\n        });\n        this.valueDomain = this.getValueDomain(data.nodes);\n        this.setColors();\n        this.nodeRects = data.nodes.map(node => {\n            const rect = {\n                x: node.x0,\n                y: node.y0,\n                height: node.y1 - node.y0,\n                width: node.x1 - node.x0,\n                fill: this.colors.getColor(node.name),\n                tooltip: this.getNodeTooltipText(node),\n                rx: 5,\n                data: {\n                    name: node.name,\n                    value: node.value\n                },\n                transform: '',\n                label: this.labelFormatting ? this.labelFormatting(node.name) : node.name,\n                labelAnchor: TextAnchor.Start\n            };\n            rect.labelAnchor = this.getTextAnchor(node);\n            rect.transform = `translate(${rect.x},${rect.y})`;\n            return rect;\n        });\n        this.linkPaths = data.links.map(link => {\n            const gradientId = 'mask' + id().toString();\n            const linkPath = {\n                path: sankeyLinkHorizontal()(link),\n                strokeWidth: Math.max(1, link.width),\n                tooltip: this.getLinkTooltipText(link.source, link.target, link.value),\n                id: gradientId,\n                gradientFill: `url(#${gradientId})`,\n                source: link.source,\n                target: link.target,\n                startColor: this.colors.getColor(link.source.name),\n                endColor: this.colors.getColor(link.target.name),\n                data: {\n                    source: link.source.name,\n                    target: link.target.name,\n                    value: link.value\n                }\n            };\n            return linkPath;\n        });\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getNodeTooltipText(node) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(node.name)}</span>\n      <span class=\"tooltip-val\">${node.value.toLocaleString()}</span>\n    `;\n    }\n    getLinkTooltipText(sourceNode, targetNode, value) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(sourceNode.name)} • ${escapeLabel(targetNode.name)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()} (${(value / sourceNode.value).toLocaleString(undefined, {\n            style: 'percent',\n            maximumFractionDigits: 2\n        })})</span>\n    `;\n    }\n    getTextAnchor(node) {\n        if (node.layer === 0) {\n            return TextAnchor.Start;\n        }\n        else {\n            return TextAnchor.End;\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getValueDomain(nodes) {\n        return nodes.map(n => n.name);\n    }\n}\nSankeyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nSankeyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SankeyComponent, selector: \"ngx-charts-sankey\", inputs: { showLabels: \"showLabels\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"sankey chart\">\n        <svg:g\n          *ngFor=\"let link of linkPaths\"\n          class=\"link\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : link.tooltip\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"link.data\"\n        >\n          <svg:defs>\n            <svg:linearGradient\n              [attr.id]=\"link.id\"\n              gradientUnits=\"userSpaceOnUse\"\n              [attr.x1]=\"link.source.x1\"\n              [attr.x2]=\"link.target.x0\"\n            >\n              <svg:stop offset=\"0%\" [attr.stop-color]=\"link.startColor\"></svg:stop>\n              <svg:stop offset=\"100%\" [attr.stop-color]=\"link.endColor\"></svg:stop>\n            </svg:linearGradient>\n          </svg:defs>\n          <svg:path\n            [attr.d]=\"link.path\"\n            [attr.stroke]=\"link.gradientFill\"\n            [attr.stroke-width]=\"link.strokeWidth\"\n            stroke-opacity=\"0.5\"\n            fill=\"none\"\n            (click)=\"select.emit(link.data)\"\n            (mouseenter)=\"activate.emit(link.data)\"\n          ></svg:path>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\" class=\"node\">\n          <svg:rect\n            [attr.x]=\"0\"\n            [attr.y]=\"0\"\n            [attr.width]=\"rect.width\"\n            [attr.height]=\"rect.height\"\n            [attr.fill]=\"rect.fill\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : rect.tooltip\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"rect.data\"\n            (click)=\"select.emit(rect.data)\"\n            (mouseenter)=\"activate.emit(rect.data)\"\n          ></svg:rect>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\">\n          <svg:text\n            *ngIf=\"showLabels && rect.height > 15\"\n            class=\"label\"\n            [attr.x]=\"rect.width + 5\"\n            [attr.y]=\"rect.height / 2\"\n            [attr.text-anchor]=\"rect.labelAnchor\"\n            dy=\"0.35em\"\n            [attr.dx]=\"rect.labelAnchor === 'end' ? -25 : 0\"\n          >\n            {{ rect.label }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-sankey', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"sankey chart\">\n        <svg:g\n          *ngFor=\"let link of linkPaths\"\n          class=\"link\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : link.tooltip\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"link.data\"\n        >\n          <svg:defs>\n            <svg:linearGradient\n              [attr.id]=\"link.id\"\n              gradientUnits=\"userSpaceOnUse\"\n              [attr.x1]=\"link.source.x1\"\n              [attr.x2]=\"link.target.x0\"\n            >\n              <svg:stop offset=\"0%\" [attr.stop-color]=\"link.startColor\"></svg:stop>\n              <svg:stop offset=\"100%\" [attr.stop-color]=\"link.endColor\"></svg:stop>\n            </svg:linearGradient>\n          </svg:defs>\n          <svg:path\n            [attr.d]=\"link.path\"\n            [attr.stroke]=\"link.gradientFill\"\n            [attr.stroke-width]=\"link.strokeWidth\"\n            stroke-opacity=\"0.5\"\n            fill=\"none\"\n            (click)=\"select.emit(link.data)\"\n            (mouseenter)=\"activate.emit(link.data)\"\n          ></svg:path>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\" class=\"node\">\n          <svg:rect\n            [attr.x]=\"0\"\n            [attr.y]=\"0\"\n            [attr.width]=\"rect.width\"\n            [attr.height]=\"rect.height\"\n            [attr.fill]=\"rect.fill\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : rect.tooltip\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"rect.data\"\n            (click)=\"select.emit(rect.data)\"\n            (mouseenter)=\"activate.emit(rect.data)\"\n          ></svg:rect>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\">\n          <svg:text\n            *ngIf=\"showLabels && rect.height > 15\"\n            class=\"label\"\n            [attr.x]=\"rect.width + 5\"\n            [attr.y]=\"rect.height / 2\"\n            [attr.text-anchor]=\"rect.labelAnchor\"\n            dy=\"0.35em\"\n            [attr.dx]=\"rect.labelAnchor === 'end' ? -25 : 0\"\n          >\n            {{ rect.label }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SankeyModule {\n}\nSankeyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSankeyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, declarations: [SankeyComponent], imports: [ChartCommonModule], exports: [SankeyComponent] });\nSankeyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [SankeyComponent],\n                    exports: [SankeyComponent]\n                }]\n        }] });\n\nclass NgxChartsModule {\n    constructor() {\n        ngxChartsPolyfills();\n    }\n}\nNgxChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, exports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        SankeyModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\nNgxChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, imports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        SankeyModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [\n                        ChartCommonModule,\n                        AreaChartModule,\n                        BarChartModule,\n                        BoxChartModule,\n                        BubbleChartModule,\n                        HeatMapModule,\n                        SankeyModule,\n                        LineChartModule,\n                        PolarChartModule,\n                        NumberCardModule,\n                        PieChartModule,\n                        TreeMapModule,\n                        GaugeModule\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nfunction tickFormat(fieldType, groupByType) {\n    return function (label) {\n        if (label === 'No Value' || label === 'Other') {\n            return label;\n        }\n        if (fieldType === 'date' && groupByType === 'groupBy') {\n            const formatter = timeFormat('MM/DD/YYYY');\n            return formatter(label);\n        }\n        return label.toString();\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, SankeyComponent, SankeyModule, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getTickLines, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };\n"],"mappings":"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ArlM0GA,EA0oMtE,aArDpC;MArlM0GA,EA0oMtE,gEArDpC;MArlM0GA,EA0pMxF,aArElB;MArlM0GA,EA0pMxF,yCArElB;MArlM0GA,EA+rMjG,aA1GT;MArlM0GA,EA+rMjG,+DA1GT;IAAA;EAAA;EAAA,eAqIs6DuS,cArIt6D,EAqI2oE4K,cArI3oE,EAqI+6EsD,cArI/6E,EAqIuvF4T,mBArIvvF,EAqIy+FpI,WArIz+F,EAqIurGlG,qBArIvrG,EAqI47GoI,QArI57G,EAqI8oHntB,EAAE,CAACyI,IArIjpH,EAqI+tHzI,EAAE,CAACsR,OArIluH;EAAA;EAAA;EAAA;AAAA;;AAsIA;EAAA,mDA3tM0GtS,EA2tM1G,mBAA2F24B,yBAA3F,EAAkI,CAAC;IACvHrwB,IAAI,EAAEpI,SADiH;IAEvH8D,IAAI,EAAE,CAAC;MAAE4F,QAAQ,EAAE,+BAAZ;MAA6CC,QAAQ,EAAG;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GArImB;MAqId8F,eA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A;EAAA;EAAA;IAAA,WAiHu8G,CAC/7G7Q,OAAO,CAAC,gBAAD,EAAmB,CACtBC,UAAU,CAAC,QAAD,EAAW,CACjBC,KAAK,CAAC;MACFwlB,OAAO,EAAE,CADP;MAEF9P,SAAS,EAAE;IAFT,CAAD,CADY,EAKjBzV,OAAO,CAAC,GAAD,EAAMD,KAAK,CAAC;MAAEwlB,OAAO,EAAE,CAAX;MAAc9P,SAAS,EAAE;IAAzB,CAAD,CAAX,CALU,CAAX,CADY,CAAnB,CADw7G;EAjHv8G;EAAA;AAAA;;AA4HA;EAAA,mDAhzP0GrX,EAgzP1G,mBAA2Fo8B,wBAA3F,EAAiI,CAAC;IACtH9zB,IAAI,EAAEpI,SADgH;IAEtH8D,IAAI,EAAE,CAAC;MAAE4F,QAAQ,EAAE,8BAAZ;MAA4CC,QAAQ,EAAG;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAjHmB;MAiHd8F,eAAe,EAAEjP,uBAAuB,CAACkP,MAjH3B;MAiHmC9F,aAAa,EAAE3J,iBAAiB,CAAC4J,IAjHpE;MAiH0E0I,UAAU,EAAE,CACjFhR,OAAO,CAAC,gBAAD,EAAmB,CACtBC,UAAU,CAAC,QAAD,EAAW,CACjBC,KAAK,CAAC;QACFwl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"},"metadata":{},"sourceType":"module"}