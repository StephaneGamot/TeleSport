{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/core/services/olympic.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@swimlane/ngx-charts\";\n\nfunction DetailsComponent_div_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nexport class DetailsComponent {\n  constructor(activatedRoute, olympicService, router) {\n    this.activatedRoute = activatedRoute;\n    this.olympicService = olympicService;\n    this.router = router;\n    this.countryName = '';\n    this.numberOfEntries = 0;\n    this.totalNumberMedals = 0;\n    this.totalNumberOfAthletes = 0;\n    this.countryData = null;\n    this.chartData = [];\n  }\n\n  ngOnInit() {\n    // Récupérez le nom du pays à partir des paramètres d'URL\n    this.activatedRoute.params.subscribe(params => {\n      const countryName = params['countryName'];\n      this.countryName = countryName;\n    });\n  }\n\n  navigateBackHome() {\n    this.router.navigate([\"/\"]); // Utilisez le service Router pour naviguer vers la page d'accueil\n  }\n\n  ngAfterViewInit() {\n    // Chargez les données olympiques initiales au démarrage de l'application\n    this.olympicService.loadInitialData().subscribe(() => {\n      // Vous pouvez ajouter des actions supplémentaires après le chargement des données ici\n      // Après le chargement des données, appelez loadCountryData\n      this.loadCountryData();\n    });\n  }\n\n  loadCountryData() {\n    this.olympicService.getCountryData(this.countryName).subscribe(data => {\n      console.log('Data for', this.countryName, data); // Assurez-vous que countryName est correctement initialisé ici\n\n      console.log('countryName:', this.countryName);\n\n      if (data) {\n        // Vérifiez si data n'est pas null\n        // Mettez à jour les propriétés avec les données spécifiques au pays.\n        this.numberOfEntries = data.numberOfEntries || 0;\n        this.totalNumberMedals = 0; // Initialisez la valeur totale des médailles à 0\n\n        this.totalNumberOfAthletes = 0; // Initialisez le nombre total d'athlètes à 0\n        // Vérifiez si data.participations est défini et a au moins un élément\n\n        if (data.participations && data.participations.length > 0) {\n          // Parcourez les participations et additionnez les valeurs de medalsCount et athleteCount\n          data.participations.forEach(participation => {\n            this.numberOfEntries = data.participations.length;\n            this.totalNumberMedals += participation.medalsCount;\n            this.totalNumberOfAthletes += participation.athleteCount;\n          });\n        } // Vous pouvez également mettre à jour d'autres propriétés ou calculer les données du graphique ici.\n\n\n        this.calculateChartData();\n      }\n    });\n  }\n\n  calculateChartData() {\n    // Vérifiez d'abord si countryData contient des données valides\n    if (this.countryData && this.countryData.participations) {\n      // Utilisez map pour transformer les données de participation en un tableau d'objets avec 'name' et 'value'\n      this.chartData = this.countryData.participations.map(participation => ({\n        name: participation.year.toString(),\n        value: participation.medalsCount // Utilisez medalsCount comme valeur sur l'axe Y\n\n      }));\n    } else {\n      // Si les données ne sont pas valides, initialisez chartData avec un tableau vide\n      this.chartData = [];\n    }\n  }\n\n}\n\nDetailsComponent.ɵfac = function DetailsComponent_Factory(t) {\n  return new (t || DetailsComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.OlympicService), i0.ɵɵdirectiveInject(i1.Router));\n};\n\nDetailsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DetailsComponent,\n  selectors: [[\"app-details\"]],\n  decls: 26,\n  vars: 14,\n  consts: [[1, \"detailsPage\"], [1, \"pageTitle\"], [1, \"pageAllSubtitles\"], [1, \"pageSubtitle\"], [1, \"numberOfSubtitle\"], [4, \"ngFor\", \"ngForOf\"], [\"xAxisLabel\", \"Year\", 3, \"results\", \"legend\", \"showXAxisLabel\", \"xAxis\", \"yAxis\", \"animations\", \"autoScale\"], [1, \"backHome\", 3, \"click\"]],\n  template: function DetailsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"div\");\n      i0.ɵɵtext(7, \"Number of entries\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 4);\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 3)(11, \"div\");\n      i0.ɵɵtext(12, \"Total number of medals\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 4);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 3)(16, \"div\");\n      i0.ɵɵtext(17, \"Total numbers of athletes\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 4);\n      i0.ɵɵtext(19);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(20, DetailsComponent_div_20_Template, 1, 0, \"div\", 5);\n      i0.ɵɵpipe(21, \"async\");\n      i0.ɵɵelementStart(22, \"div\");\n      i0.ɵɵelement(23, \"ngx-charts-line-chart\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"button\", 7);\n      i0.ɵɵlistener(\"click\", function DetailsComponent_Template_button_click_24_listener() {\n        return ctx.navigateBackHome();\n      });\n      i0.ɵɵtext(25, \"Back Home\");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.countryName);\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate(ctx.numberOfEntries);\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.totalNumberMedals);\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.totalNumberOfAthletes);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(21, 12, ctx.olympics$));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"results\", ctx.chartData)(\"legend\", false)(\"showXAxisLabel\", true)(\"xAxis\", true)(\"yAxis\", true)(\"animations\", false)(\"autoScale\", true);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.LineChartComponent, i3.AsyncPipe],\n  styles: [\"@charset \\\"UTF-8\\\";\\n.detailsPage[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.backHome[_ngcontent-%COMP%] {\\n  background-color: #0d6e76; \\n  width: 100px;\\n  height: 60px;\\n  color: #fff; \\n  padding: 10px 20px; \\n  border: none;\\n  border-radius: 5px;\\n  cursor: pointer;\\n  font-size: 16px;\\n}\\n\\n.backHome[_ngcontent-%COMP%]:hover {\\n  background-color: #03838f; \\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRldGFpbHMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FBQWhCO0VBQ0MsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQUVEO0FBQ0EsZUFBQTtBQUNBO0VBQ0kseUJBQUEsRUFBQSw4QkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQSxFQUFBLCtCQUFBO0VBQ0Esa0JBQUEsRUFBQSwrREFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLGVBQUE7RUFDQSxlQUFBO0FBRUo7QUFDRSw4QkFBQTtBQUNBO0VBQ0UseUJBQUEsRUFBQSxvQ0FBQTtBQUVKIiwiZmlsZSI6ImRldGFpbHMuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZGV0YWlsc1BhZ2Uge1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLyogc3R5bGVzLmNzcyAqL1xuLmJhY2tIb21lIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMGQ2ZTc2OyAvKiBDb3VsZXVyIGRlIGZvbmQgZHUgYm91dG9uICovXG4gICAgd2lkdGg6IDEwMHB4O1xuICAgIGhlaWdodDogNjBweDtcbiAgICBjb2xvcjogI2ZmZjsgLyogQ291bGV1ciBkdSB0ZXh0ZSBkdSBib3V0b24gKi9cbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7IC8qIEVzcGFjZW1lbnQgaW50w6lyaWV1ciBkdSBib3V0b24gKGhhdXQvYmFzIGV0IGdhdWNoZS9kcm9pdGUpICovXG4gICAgYm9yZGVyOiBub25lOyBcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7IFxuICAgIGN1cnNvcjogcG9pbnRlcjsgXG4gICAgZm9udC1zaXplOiAxNnB4OyBcbiAgfVxuICBcbiAgLyogU3R5bGUgYXUgc3Vydm9sIGR1IGJvdXRvbiAqL1xuICAuYmFja0hvbWU6aG92ZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMzgzOGY7IC8qIENoYW5nZW1lbnQgZGUgY291bGV1ciBhdSBzdXJ2b2wgKi9cbiAgfVxuICAiXX0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","DetailsComponent","constructor","activatedRoute","olympicService","router","ngOnInit","params","subscribe","countryName","navigateBackHome","navigate","ngAfterViewInit","loadInitialData","loadCountryData","getCountryData","data","console","log","numberOfEntries","totalNumberMedals","totalNumberOfAthletes","participations","length","forEach","participation","medalsCount","athleteCount","calculateChartData","countryData","chartData","map","name","year","toString","value","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/details/details.component.html","/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/details/details.component.ts"],"sourcesContent":["<div class=\"detailsPage\">\n\t<div class=\"pageTitle\">\n\t\t<h1>{{ countryName }}</h1>\n\t</div>\n\t<div class=\"pageAllSubtitles\">\n\t\t<div class=\"pageSubtitle\">\n\t\t\t<div>Number of entries</div>\n\t\t\t<div class=\"numberOfSubtitle\">{{ numberOfEntries }}</div>\n\t\t</div>\n\n\t\t<div class=\"pageSubtitle\">\n\t\t\t<div>Total number of medals</div>\n\t\t\t<div class=\"numberOfSubtitle\">{{ totalNumberMedals }}</div>\n\t\t</div>\n\t\t<div class=\"pageSubtitle\">\n\t\t\t<div>Total numbers of athletes</div>\n\t\t\t<div class=\"numberOfSubtitle\">{{ totalNumberOfAthletes }}</div>\n\t\t</div>\n        <div *ngFor=\"let country of olympics$ | async\"></div>\n\t\t<div>\n\t\t\t<ngx-charts-line-chart \n            [results]=\"chartData\"\n            [legend]=\"false\" \n            [showXAxisLabel]=\"true\" \n            xAxisLabel=\"Year\" \n            [xAxis]=\"true\" \n            [yAxis]=\"true\" \n            [animations]=\"false\" \n            [autoScale]=\"true\">\n\t\t\t</ngx-charts-line-chart>\n\t\t</div>\n\t</div>\n\t<button (click)=\"navigateBackHome()\" class=\"backHome\">Back Home</button>\n</div>\n","import { Component, OnInit } from \"@angular/core\";\nimport { OlympicService } from \"src/app/core/services/olympic.service\";\nimport { OlympicCountry } from 'src/app/core/models/Olympic';  \nimport { ActivatedRoute } from \"@angular/router\";\nimport { Router } from \"@angular/router\";\nimport { Observable } from \"rxjs\"; // Importez Observable\n\n\n@Component({\n  selector: \"app-details\",\n  templateUrl: \"./details.component.html\",\n  styleUrls: [\"./details.component.scss\"],\n})\nexport class DetailsComponent implements OnInit {\n  public countryName: string = '';\n  public numberOfEntries: number = 0;\n  public totalNumberMedals: number = 0;\n  public totalNumberOfAthletes: number = 0;\n  public countryData: any = null;\n  public chartData: any[] = [];\n  public olympics$: Observable<OlympicCountry[] | null> | undefined; \n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private olympicService: OlympicService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    // Récupérez le nom du pays à partir des paramètres d'URL\n    this.activatedRoute.params.subscribe((params) => {\n      const countryName = params['countryName'];\n      this.countryName = countryName;\n    });\n  }\n\n  navigateBackHome(): void {\n    this.router.navigate([\"/\"]); // Utilisez le service Router pour naviguer vers la page d'accueil\n  }\n\n  ngAfterViewInit(): void {\n    // Chargez les données olympiques initiales au démarrage de l'application\n    this.olympicService.loadInitialData().subscribe(() => {\n      // Vous pouvez ajouter des actions supplémentaires après le chargement des données ici\n\n      // Après le chargement des données, appelez loadCountryData\n      this.loadCountryData();\n    });\n  }\n\n  private loadCountryData(): void {\n    this.olympicService.getCountryData(this.countryName).subscribe((data: any) => {\n      console.log('Data for', this.countryName, data);\n  \n      // Assurez-vous que countryName est correctement initialisé ici\n      console.log('countryName:', this.countryName);\n  \n      if (data) { // Vérifiez si data n'est pas null\n        // Mettez à jour les propriétés avec les données spécifiques au pays.\n        this.numberOfEntries = data.numberOfEntries || 0;\n        this.totalNumberMedals = 0; // Initialisez la valeur totale des médailles à 0\n        this.totalNumberOfAthletes = 0; // Initialisez le nombre total d'athlètes à 0\n  \n        // Vérifiez si data.participations est défini et a au moins un élément\n        if (data.participations && data.participations.length > 0) {\n          // Parcourez les participations et additionnez les valeurs de medalsCount et athleteCount\n          data.participations.forEach((participation: any) => {\n            this.numberOfEntries = data.participations.length;\n            this.totalNumberMedals += participation.medalsCount;\n            this.totalNumberOfAthletes += participation.athleteCount;\n          });\n        }\n\n      \n  \n        // Vous pouvez également mettre à jour d'autres propriétés ou calculer les données du graphique ici.\n        this.calculateChartData();\n      }\n    });\n  }\n  \n\n  private calculateChartData(): void {\n    // Vérifiez d'abord si countryData contient des données valides\n    if (this.countryData && this.countryData.participations) {\n      // Utilisez map pour transformer les données de participation en un tableau d'objets avec 'name' et 'value'\n      this.chartData = this.countryData.participations.map((participation: any) => ({\n        name: participation.year.toString(), // Utilisez l'année comme libellé sur l'axe X\n        value: participation.medalsCount, // Utilisez medalsCount comme valeur sur l'axe Y\n      }));\n    } else {\n      // Si les données ne sont pas valides, initialisez chartData avec un tableau vide\n      this.chartData = [];\n    }\n  }\n  \n}\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}