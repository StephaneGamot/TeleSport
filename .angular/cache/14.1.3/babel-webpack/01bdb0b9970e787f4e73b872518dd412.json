{"ast":null,"code":"import { map, finalize } from \"rxjs/operators\"; // Importe map et finalize de RxJS pour transformer et finaliser les Observables.\n\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/olympic.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@swimlane/ngx-charts\";\nimport * as i5 from \"../../loader/loader.component\";\n\nfunction HomeComponent_app_loader_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-loader\");\n  }\n}\n\nfunction HomeComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.errorMessage, \" \");\n  }\n}\n\nfunction HomeComponent_div_3_div_4_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nfunction HomeComponent_div_3_div_4_ngx_charts_pie_chart_15_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 14);\n    i0.ɵɵelement(4, \"img\", 15);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const model_r9 = ctx.model;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(model_r9.name);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\" \", model_r9.value, \" \");\n  }\n}\n\nfunction HomeComponent_div_3_div_4_ngx_charts_pie_chart_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ngx-charts-pie-chart\", 11);\n    i0.ɵɵlistener(\"select\", function HomeComponent_div_3_div_4_ngx_charts_pie_chart_15_Template_ngx_charts_pie_chart_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r10.onChartClick($event));\n    });\n    i0.ɵɵtemplate(1, HomeComponent_div_3_div_4_ngx_charts_pie_chart_15_ng_template_1_Template, 6, 2, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r7 = i0.ɵɵreference(2);\n\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"results\", ctx_r5.chartData)(\"view\", ctx_r5.chartView)(\"legend\", false)(\"labels\", true)(\"trimLabels\", false)(\"animations\", false)(\"autoScale\", true)(\"tooltipTemplate\", _r7)(\"tooltipText\", ctx_r5.tooltipText);\n  }\n}\n\nfunction HomeComponent_div_3_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 5)(2, \"div\", 6)(3, \"div\");\n    i0.ɵɵtext(4, \"Number of JOs\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 7);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 6)(8, \"div\");\n    i0.ɵɵtext(9, \"Number of countries\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"div\", 7);\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵtemplate(12, HomeComponent_div_3_div_4_div_12_Template, 1, 0, \"div\", 8);\n    i0.ɵɵpipe(13, \"async\");\n    i0.ɵɵelementStart(14, \"div\", 9);\n    i0.ɵɵtemplate(15, HomeComponent_div_3_div_4_ngx_charts_pie_chart_15_Template, 3, 9, \"ngx-charts-pie-chart\", 10);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r3.numberOfJOs);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r3.numberOfCountries);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(13, 4, ctx_r3.olympics$));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.chartData.length > 0);\n  }\n}\n\nfunction HomeComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 4)(2, \"h1\");\n    i0.ɵɵtext(3, \"Medals per Country\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(4, HomeComponent_div_3_div_4_Template, 16, 6, \"div\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.isLoading && !ctx_r2.errorMessage);\n  }\n}\n\nexport class HomeComponent {\n  constructor(olympicService, router) {\n    this.olympicService = olympicService;\n    this.router = router;\n    this.chartData = []; // Tableau pour stocker les données formatées pour le graphique.\n\n    this.numberOfJOs = 0; // Variable pour stocker le nombre total de Jeux Olympiques.\n\n    this.numberOfCountries = 0; // Variable pour stocker le nombre total de pays participants.\n\n    this.isLoading = false; // Drapeau pour indiquer l'état de chargement.\n\n    this.errorMessage = null; // Variable pour stocker les messages d'erreur.\n\n    this.chartView = [700, 400]; // Dimensions du graphique.\n\n    this.tooltipText = item => {\n      const label = item.name; // Récupère le nom du pays (label).\n\n      const val = item.value; // Récupère la valeur (nombre de médailles).\n\n      return `${label} ${val}`; // Formate et retourne le texte de l'infobulle.\n    };\n  } // Constructeur pour injecter OlympicService et Router.\n\n\n  ngOnInit() {\n    this.isLoading = true; // Active l'indicateur de chargement.\n\n    this.updateChartSize(); // Appelle la méthode pour ajuster la taille du graphique.\n\n    window.onresize = () => this.updateChartSize(); // Gère le redimensionnement de la fenêtre pour ajuster la taille du graphique.\n\n\n    this.olympicService // Utilise OlympicService pour charger les données initiales.\n    .loadInitialData() // Appelle la méthode pour charger les données.\n    .pipe( // Utilise les opérateurs RxJS pour transformer et finaliser les données.\n    map(countries => countries), // Utilise map pour transformer les données reçues.\n    finalize(() => this.isLoading = false) // Utilise finalize pour désactiver l'indicateur de chargement une fois le traitement terminé.\n    ).subscribe({\n      next: countries => {\n        if (countries) {\n          // Vérifie si les données des pays sont présentes.\n          this.numberOfJOs = this.calculateNumberOfJOs(countries); // Calcule le nombre de Jeux Olympiques.\n\n          this.numberOfCountries = countries.length; // Calcule le nombre de pays participants.\n\n          this.chartData = countries.map(country => ({\n            name: country.country,\n            value: country.participations.reduce((total, participation) => total + participation.medalsCount, 0) // Calcule le nombre total de médailles pour chaque pays.\n\n          }));\n        }\n      },\n      error: error => {\n        console.error(\"Error loading data:\", error); // Affiche l'erreur dans la console.\n\n        this.isLoading = false; // Désactive l'indicateur de chargement en cas d'erreur.\n\n        this.errorMessage = \"Failed to load data: \" + (error.message || \"Unknown error\"); // Met à jour le message d'erreur.\n      }\n    });\n  }\n\n  updateChartSize() {\n    const maxWidth = 700; //\n\n    const widthRatio = 0.9; // 90% de la largeur de la fenêtre\n\n    const aspectRatio = 0.5; // Ratio hauteur / largeur (par exemple, 0.5 pour un ratio de 2:1)\n\n    const width = Math.min(window.innerWidth * widthRatio, maxWidth); //\n\n    const height = width * aspectRatio; // Calcule la hauteur en fonction du ratio\n\n    this.chartView = [width, height]; //\n  }\n\n  calculateNumberOfJOs(countries) {\n    const yearsOfJOs = []; //\n\n    countries.forEach(olympic => {\n      olympic.participations.forEach(participation => {\n        if (!yearsOfJOs.includes(participation.year)) {\n          //\n          yearsOfJOs.push(participation.year); //\n        }\n      });\n    });\n    return yearsOfJOs.length; //\n  }\n\n  onChartClick(event) {\n    if (event && event.name) {\n      // Vérifie si l'événement et le nom de l'événement sont présents.\n      this.router.navigate([`/details/${event.name}`]); // Navigue vers la page de détails du pays sélectionné.\n    }\n  }\n\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.OlympicService), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 4,\n  vars: 3,\n  consts: [[1, \"homePage\"], [4, \"ngIf\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"error-message\"], [1, \"pageTitle\"], [1, \"pageAllSubtitles\"], [1, \"pageSubtitle\"], [1, \"numberOfSubtitle\"], [4, \"ngFor\", \"ngForOf\"], [1, \"pieChart\"], [3, \"results\", \"view\", \"legend\", \"labels\", \"trimLabels\", \"animations\", \"autoScale\", \"tooltipTemplate\", \"tooltipText\", \"select\", 4, \"ngIf\"], [3, \"results\", \"view\", \"legend\", \"labels\", \"trimLabels\", \"animations\", \"autoScale\", \"tooltipTemplate\", \"tooltipText\", \"select\"], [\"tooltipTemplate\", \"\"], [1, \"tooltip\"], [1, \"tooltipCenter\"], [\"src\", \"/assets/img/award-solid-white.svg\", \"alt\", \"award\", 1, \"white-icon\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, HomeComponent_app_loader_1_Template, 1, 0, \"app-loader\", 1);\n      i0.ɵɵtemplate(2, HomeComponent_div_2_Template, 2, 1, \"div\", 2);\n      i0.ɵɵtemplate(3, HomeComponent_div_3_Template, 5, 1, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoading && !ctx.errorMessage);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.PieChartComponent, i5.LoaderComponent, i3.AsyncPipe],\n  styles: [\".homePage[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  text-align: center;\\n}\\n\\n.tooltip[_ngcontent-%COMP%] {\\n  padding: 5px;\\n  font-family: Arial, Helvetica, sans-serif;\\n  border-radius: 10px;\\n  font-size: 1rem;\\n  text-align: center;\\n}\\n\\n.tooltipCenter[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n}\\n\\n.white-icon[_ngcontent-%COMP%] {\\n  width: 9px;\\n  height: 16px;\\n  margin-right: 5px;\\n}\\n\\n  .ngx-charts-tooltip-content.type-tooltip {\\n  background-color: #2D909F !important;\\n  color: white !important;\\n}\\n\\n  .ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top {\\n  color: white !important;\\n  border-top: 7px solid #2D909F !important;\\n}\\n\\n  .pie-label {\\n  font-size: 16px !important;\\n}\\n\\n  .pie-label-line {\\n  fill: none;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDQyxhQUFBO0VBQ0Esc0JBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0VBQ0Esa0JBQUE7QUFDRDs7QUFFQTtFQUNDLFlBQUE7RUFDQSx5Q0FBQTtFQUNBLG1CQUFBO0VBQ0EsZUFBQTtFQUNBLGtCQUFBO0FBQ0Q7O0FBRUE7RUFDQyxhQUFBO0VBQ0EsdUJBQUE7QUFDRDs7QUFFQTtFQUNDLFVBQUE7RUFDQSxZQUFBO0VBQ0EsaUJBQUE7QUFDRDs7QUFFQTtFQUNDLG9DQUFBO0VBQ0EsdUJBQUE7QUFDRDs7QUFBQztFQUNDLHVCQUFBO0VBQ0Esd0NBQUE7QUFFRjs7QUFFRTtFQUNELDBCQUFBO0FBQ0Q7O0FBRUU7RUFDRCxVQUFBO0FBQ0QiLCJmaWxlIjoiaG9tZS5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5ob21lUGFnZSB7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi50b29sdGlwIHtcblx0cGFkZGluZzogNXB4O1xuXHRmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcblx0Ym9yZGVyLXJhZGl1czogMTBweDtcblx0Zm9udC1zaXplOiAxcmVtO1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi50b29sdGlwQ2VudGVyIHtcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG59XG5cbi53aGl0ZS1pY29uIHtcblx0d2lkdGg6IDlweDtcblx0aGVpZ2h0OiAxNnB4O1xuXHRtYXJnaW4tcmlnaHQ6IDVweDtcbn1cblxuOjpuZy1kZWVwIC5uZ3gtY2hhcnRzLXRvb2x0aXAtY29udGVudC50eXBlLXRvb2x0aXAge1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjMkQ5MDlGICFpbXBvcnRhbnQ7IFxuXHRjb2xvcjogd2hpdGUgIWltcG9ydGFudDsgXG5cdC50b29sdGlwLWNhcmV0LnBvc2l0aW9uLXRvcCB7IFxuXHRcdGNvbG9yOiB3aGl0ZSAhaW1wb3J0YW50O1xuXHRcdGJvcmRlci10b3A6IDdweCBzb2xpZCAjMkQ5MDlGICFpbXBvcnRhbnQ7XG5cdCAgfVxuICB9XG5cbiAgOjpuZy1kZWVwIC5waWUtbGFiZWwge1xuXHRmb250LXNpemU6IDE2cHggIWltcG9ydGFudDsgXG4gIH1cbiAgXG4gIDo6bmctZGVlcCAucGllLWxhYmVsLWxpbmUge1xuXHRmaWxsOiBub25lO1xuICB9XG4gICJdfQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["map","finalize","i0","ctx_r5","_r7","HomeComponent","constructor","olympicService","router","item","label","name","val","value","ngOnInit","isLoading","updateChartSize","window","onresize","loadInitialData","pipe","countries","subscribe","next","numberOfJOs","calculateNumberOfJOs","numberOfCountries","length","chartData","country","participations","reduce","total","participation","medalsCount","error","console","errorMessage","message","maxWidth","widthRatio","aspectRatio","width","Math","min","innerWidth","height","chartView","yearsOfJOs","forEach","olympic","includes","year","push","onChartClick","event","navigate","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.ts","/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";                      // Importe les décorateurs Component et OnInit d'Angular.\nimport { Observable } from \"rxjs\";                                      // Importe Observable de RxJS pour la programmation réactive.\nimport { OlympicService } from \"src/app/core/services/olympic.service\"; // Importe OlympicService pour accéder aux données et méthodes liées aux Jeux Olympiques.\nimport { OlympicCountry } from \"src/app/core/models/Olympic\";           // Importe le modèle OlympicCountry pour structurer les données olympiques.\nimport { map, finalize } from \"rxjs/operators\";                         // Importe map et finalize de RxJS pour transformer et finaliser les Observables.\nimport { Router } from \"@angular/router\";                               // Importe Router pour la navigation entre les routes.\nimport { ChartData } from \"src/app/core/models/chart-data.interface\";   // Importe l'interface ChartData pour structurer les données des graphiques.\n\n@Component({                                                            // Décorateur Component qui définit les métadonnées du composant HomeComponent.\n\tselector: \"app-home\",                                               // Sélecteur CSS du composant.\n\ttemplateUrl: \"./home.component.html\",                               // Chemin vers le template HTML du composant.\n\tstyleUrls: [\"./home.component.scss\"],                               // Chemins vers les fichiers de style SCSS du composant.\n})\n\nexport class HomeComponent implements OnInit {                          // Déclare la classe HomeComponent et implémente OnInit pour le hook de cycle de vie.\n\tpublic olympics$: Observable<OlympicCountry[]> | undefined;         // Observable pour stocker les données des pays olympiques.\n\tpublic chartData: ChartData[] = [];                                 // Tableau pour stocker les données formatées pour le graphique.\n\tpublic numberOfJOs: number = 0;                                     // Variable pour stocker le nombre total de Jeux Olympiques.\n\tpublic numberOfCountries: number = 0;                               // Variable pour stocker le nombre total de pays participants.\n\tpublic isLoading: boolean = false;                                  // Drapeau pour indiquer l'état de chargement.\n\tpublic errorMessage: string | null = null;                          // Variable pour stocker les messages d'erreur.\n\tpublic chartView: [number, number] = [700, 400];                    // Dimensions du graphique.\n\n\tconstructor(private olympicService: OlympicService, private router: Router) {} // Constructeur pour injecter OlympicService et Router.\n\n\tngOnInit(): void {                                                  // Méthode ngOnInit pour initialiser le composant.\n\t\tthis.isLoading = true;                                          // Active l'indicateur de chargement.\n\t\tthis.updateChartSize();                                         // Appelle la méthode pour ajuster la taille du graphique.\n\t\twindow.onresize = () => this.updateChartSize();                 // Gère le redimensionnement de la fenêtre pour ajuster la taille du graphique.\n\n\t\tthis.olympicService                                             // Utilise OlympicService pour charger les données initiales.\n\t\t\t.loadInitialData()                                          // Appelle la méthode pour charger les données.\n\t\t\t.pipe(                                                      // Utilise les opérateurs RxJS pour transformer et finaliser les données.\n\t\t\t\tmap((countries: OlympicCountry[]) => countries),        // Utilise map pour transformer les données reçues.\n\t\t\t\tfinalize(() => (this.isLoading = false))                // Utilise finalize pour désactiver l'indicateur de chargement une fois le traitement terminé.\n\t\t\t)\n\t\t\t.subscribe({                                                // Souscrit à l'Observable pour recevoir les données.\n\t\t\t\tnext: (countries) => {                                  // Fonction next pour traiter les données reçues.\n\t\t\t\t\tif (countries) {                                    // Vérifie si les données des pays sont présentes.\n\t\t\t\t\t\tthis.numberOfJOs = this.calculateNumberOfJOs(countries);  // Calcule le nombre de Jeux Olympiques.\n\t\t\t\t\t\tthis.numberOfCountries = countries.length;                // Calcule le nombre de pays participants.\n\t\t\t\t\t\tthis.chartData = countries.map((country) => ({            // Transforme les données des pays pour le graphique.\n\t\t\t\t\t\t\tname: country.country,                                // Nom du pays pour l'étiquette.\n\t\t\t\t\t\t\tvalue: country.participations.reduce((total, participation) => total + participation.medalsCount, 0), // Calcule le nombre total de médailles pour chaque pays.\n\t\t\t\t\t\t}));                             \n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: (error) => {                                     // Fonction error pour gérer les erreurs de chargement des données.\n\t\t\t\t\tconsole.error(\"Error loading data:\", error);        // Affiche l'erreur dans la console.\n\t\t\t\t\tthis.isLoading = false;                             // Désactive l'indicateur de chargement en cas d'erreur.\n\t\t\t\t\tthis.errorMessage = \"Failed to load data: \" + (error.message || \"Unknown error\"); // Met à jour le message d'erreur.\n\t\t\t\t},\n\t\t\t});\n\t}\n\n\n\tprivate updateChartSize() {                                         //\n\t\tconst maxWidth = 700;                                           //\n\t\tconst widthRatio = 0.9;                                         // 90% de la largeur de la fenêtre\n\t\tconst aspectRatio = 0.5;                                        // Ratio hauteur / largeur (par exemple, 0.5 pour un ratio de 2:1)\n\t\tconst width = Math.min(window.innerWidth * widthRatio, maxWidth); //\n\t\tconst height = width * aspectRatio;                             // Calcule la hauteur en fonction du ratio\n\t\tthis.chartView = [width, height];                               //\n\t}\n\n\tprivate calculateNumberOfJOs(countries: OlympicCountry[]): number { //\n\t\tconst yearsOfJOs: number[] = [];                                //\n\t\tcountries.forEach((olympic) => {                                //\n\t\t\tolympic.participations.forEach((participation) => {         //\n\t\t\t\tif (!yearsOfJOs.includes(participation.year)) {         //\n\t\t\t\t\tyearsOfJOs.push(participation.year);                //\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn yearsOfJOs.length;                                        //\n\t}\n\n\tonChartClick(event: ChartData): void {                              // Gère les clics sur le graphique.\n\t\tif (event && event.name) {                                        // Vérifie si l'événement et le nom de l'événement sont présents.\n\t\t\tthis.router.navigate([`/details/${event.name}`]);               // Navigue vers la page de détails du pays sélectionné.\n\t\t}\n\t}\n\n\ttooltipText = (item: ChartData): string => {                        // Fonction pour générer le texte de l'infobulle sur le graphique.\n\t\tconst label = item.name;                                          // Récupère le nom du pays (label).\n\t\tconst val = item.value;                                           // Récupère la valeur (nombre de médailles).\n\t\treturn `${label} ${val}`;                                         // Formate et retourne le texte de l'infobulle.\n\t};\n}\n\t/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\n* Le symbole $ après le nom olympics dans olympics$ est une convention de nommage couramment utilisée dans la communauté Angular et RxJS pour indiquer qu'une variable est un Observable.\n\n* \nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/\n","<div class=\"homePage\">\n\t<app-loader *ngIf=\"isLoading\"></app-loader>\n\n\t<div *ngIf=\"errorMessage\" class=\"error-message\">\n\t\t{{ errorMessage }}\n\t</div>\n\n\t<div *ngIf=\"!isLoading && !errorMessage\">\n\t\t<div class=\"pageTitle\"><h1>Medals per Country</h1></div>\n\t\t<div *ngIf=\"!isLoading && !errorMessage\">\n\t\t\t<div class=\"pageAllSubtitles\">\n\t\t\t\t<div class=\"pageSubtitle\">\n\t\t\t\t\t<div>Number of JOs</div>\n\t\t\t\t\t<div class=\"numberOfSubtitle\">{{ numberOfJOs }}</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"pageSubtitle\">\n\t\t\t\t\t<div>Number of countries</div>\n\t\t\t\t\t<div class=\"numberOfSubtitle\">{{ numberOfCountries }}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div *ngFor=\"let country of olympics$ | async\"></div>\n\t\t\t<div class=\"pieChart\">\n\t\t\t\t<ngx-charts-pie-chart\n\t\t\t\t\t*ngIf=\"chartData.length > 0\"\n\t\t\t\t\t[results]=\"chartData\"\n\t\t\t\t\t[view]=\"chartView\"\n\t\t\t\t\t[legend]=\"false\"\n\t\t\t\t\t[labels]=\"true\"\n\t\t\t\t\t[trimLabels]=\"false\"\n\t\t\t\t\t[animations]=\"false\"\n\t\t\t\t\t[autoScale]=\"true\"\n\t\t\t\t\t[tooltipTemplate]=\"tooltipTemplate\"\n\t\t\t\t\t[tooltipText]=\"tooltipText\"\n\t\t\t\t\t(select)=\"onChartClick($event)\">\n\t\t\t\t\t<ng-template #tooltipTemplate let-model=\"model\">\n\t\t\t\t\t\t<div class=\"tooltip\">\n\t\t\t\t\t\t\t<div>{{ model.name }}</div>\n\n\t\t\t\t\t\t\t<div class=\"tooltipCenter\">\n\t\t\t\t\t\t\t\t<img src=\"/assets/img/award-solid-white.svg\" alt=\"award\" class=\"white-icon\" />\n\t\t\t\t\t\t\t\t{{ model.value }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</ngx-charts-pie-chart>\n\t\t\t</div>\n\n\t\t\t<!--L'expression let country of (olympics$ | async) crée une variable locale country pour chaque itération, \n    qui représente l'objet courant du tableau olympics$.-->\n\t\t</div>\n\t</div>\n</div>\n"]},"metadata":{},"sourceType":"module"}