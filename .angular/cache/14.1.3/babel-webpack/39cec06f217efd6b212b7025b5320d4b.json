{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\"; // Importe les décorateurs Component et OnInit d'Angular.\n\nimport { map, finalize } from \"rxjs/operators\"; // Importe map et finalize de RxJS pour transformer et finaliser les Observables.\n\nlet HomeComponent = class HomeComponent {\n  constructor(olympicService, router) {\n    this.olympicService = olympicService;\n    this.router = router;\n    this.chartData = []; // Tableau pour stocker les données formatées pour le graphique.\n\n    this.numberOfJOs = 0; // Variable pour stocker le nombre total de Jeux Olympiques.\n\n    this.numberOfCountries = 0; // Variable pour stocker le nombre total de pays participants.\n\n    this.isLoading = false; // Drapeau pour indiquer l'état de chargement.\n\n    this.errorMessage = null; // Variable pour stocker les messages d'erreur.\n\n    this.chartView = [700, 400]; // Dimensions du graphique.\n\n    this.tooltipText = item => {\n      const label = item.name; // Récupère le nom du pays (label).\n\n      const val = item.value; // Récupère la valeur (nombre de médailles).\n\n      return `${label} ${val}`; // Formate et retourne le texte de l'infobulle.\n    };\n  } // Constructeur pour injecter OlympicService et Router.\n\n\n  ngOnInit() {\n    this.isLoading = true; // Active l'indicateur de chargement.\n\n    this.updateChartSize(); // Appelle la méthode pour ajuster la taille du graphique.\n\n    window.onresize = () => this.updateChartSize(); // Gère le redimensionnement de la fenêtre pour ajuster la taille du graphique.\n\n\n    this.olympicService // Utilise OlympicService pour charger les données initiales.\n    .loadInitialData() // Appelle la méthode pour charger les données.\n    .pipe( // Utilise les opérateurs RxJS pour transformer et finaliser les données.\n    map(countries => countries), // Utilise map pour transformer les données reçues.\n    finalize(() => this.isLoading = false) // Utilise finalize pour désactiver l'indicateur de chargement une fois le traitement terminé.\n    ).subscribe({\n      next: countries => {\n        if (countries) {\n          // Vérifie si les données des pays sont présentes.\n          this.numberOfJOs = this.calculateNumberOfJOs(countries); // Calcule le nombre de Jeux Olympiques.\n\n          this.numberOfCountries = countries.length; // Calcule le nombre de pays participants.\n\n          this.chartData = countries.map(country => ({\n            name: country.country,\n            value: country.participations.reduce((total, participation) => total + participation.medalsCount, 0) // Calcule le nombre total de médailles pour chaque pays.\n\n          }));\n        }\n      },\n      error: error => {\n        console.error(\"Error loading data:\", error); // Affiche l'erreur dans la console.\n\n        this.isLoading = false; // Désactive l'indicateur de chargement en cas d'erreur.\n\n        this.errorMessage = \"Failed to load data: \" + (error.message || \"Unknown error\"); // Met à jour le message d'erreur.\n      }\n    });\n  }\n\n  updateChartSize() {\n    const maxWidth = 700; // Définit la largeur maximale du graphique à 700 pixels.\n\n    const widthRatio = 0.9; // 90% de la largeur de la fenêtre\n\n    const aspectRatio = 0.5; // Ratio hauteur / largeur (par exemple, 0.5 pour un ratio de 2:1)\n\n    const width = Math.min(window.innerWidth * widthRatio, maxWidth); // Calcule la largeur du graphique comme étant le plus petit entre 90% de la largeur de la fenêtre et 700 pixels.\n\n    const height = width * aspectRatio; // Calcule la hauteur du graphique en utilisant le ratio hauteur/largeur défini précédemment.\n\n    this.chartView = [width, height]; // Met à jour la propriété chartView avec les nouvelles dimensions du graphique.\n  }\n\n  calculateNumberOfJOs(countries) {\n    const yearsOfJOs = []; // Initialise un tableau vide pour stocker les années distinctes des Jeux Olympiques.\n\n    countries.forEach(olympic => {\n      olympic.participations.forEach(participation => {\n        if (!yearsOfJOs.includes(participation.year)) {\n          // Vérifie si l'année de la participation n'est pas déjà dans le tableau 'yearsOfJOs'.\n          yearsOfJOs.push(participation.year); // Si l'année n'est pas présente, l'ajoute au tableau.\n        }\n      });\n    });\n    return yearsOfJOs.length; // Retourne la longueur du tableau 'yearsOfJOs', qui représente le nombre total d'années distinctes des Jeux Olympiques.\n  }\n\n  onChartClick(event) {\n    if (event && event.name) {\n      // Vérifie si l'événement et le nom de l'événement sont présents.\n      this.router.navigate([`/details/${event.name}`]); // Navigue vers la page de détails du pays sélectionné.\n    }\n  }\n\n};\nHomeComponent = __decorate([Component({\n  selector: \"app-home\",\n  templateUrl: \"./home.component.html\",\n  styleUrls: [\"./home.component.scss\"] // Chemins vers les fichiers de style SCSS du composant.\n\n})], HomeComponent);\nexport { HomeComponent };\n/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\n* Le symbole $ après le nom olympics dans olympics$ est une convention de nommage couramment utilisée dans la communauté Angular et RxJS pour indiquer qu'une variable est un Observable.\n\n*\nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/","map":{"version":3,"mappings":"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","names":["Component","map","finalize","HomeComponent","constructor","olympicService","router","item","label","name","val","value","ngOnInit","isLoading","updateChartSize","window","onresize","loadInitialData","pipe","countries","subscribe","next","numberOfJOs","calculateNumberOfJOs","numberOfCountries","length","chartData","country","participations","reduce","total","participation","medalsCount","error","console","errorMessage","message","maxWidth","widthRatio","aspectRatio","width","Math","min","innerWidth","height","chartView","yearsOfJOs","forEach","olympic","includes","year","push","onChartClick","event","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";                      // Importe les décorateurs Component et OnInit d'Angular.\nimport { Observable } from \"rxjs\";                                      // Importe Observable de RxJS pour la programmation réactive.\nimport { OlympicService } from \"src/app/core/services/olympic.service\"; // Importe OlympicService pour accéder aux données et méthodes liées aux Jeux Olympiques.\nimport { OlympicCountry } from \"src/app/core/models/Olympic\";           // Importe le modèle OlympicCountry pour structurer les données olympiques.\nimport { map, finalize } from \"rxjs/operators\";                         // Importe map et finalize de RxJS pour transformer et finaliser les Observables.\nimport { Router } from \"@angular/router\";                               // Importe Router pour la navigation entre les routes.\nimport { ChartData } from \"src/app/core/models/chart-data.interface\";   // Importe l'interface ChartData pour structurer les données des graphiques.\n\n@Component({                                                            // Décorateur Component qui définit les métadonnées du composant HomeComponent.\n\tselector: \"app-home\",                                               // Sélecteur CSS du composant.\n\ttemplateUrl: \"./home.component.html\",                               // Chemin vers le template HTML du composant.\n\tstyleUrls: [\"./home.component.scss\"],                               // Chemins vers les fichiers de style SCSS du composant.\n})\n\nexport class HomeComponent implements OnInit {                          // Déclare la classe HomeComponent et implémente OnInit pour le hook de cycle de vie.\n\tpublic olympics$: Observable<OlympicCountry[]> | undefined;         // Observable pour stocker les données des pays olympiques.\n\tpublic chartData: ChartData[] = [];                                 // Tableau pour stocker les données formatées pour le graphique.\n\tpublic numberOfJOs: number = 0;                                     // Variable pour stocker le nombre total de Jeux Olympiques.\n\tpublic numberOfCountries: number = 0;                               // Variable pour stocker le nombre total de pays participants.\n\tpublic isLoading: boolean = false;                                  // Drapeau pour indiquer l'état de chargement.\n\tpublic errorMessage: string | null = null;                          // Variable pour stocker les messages d'erreur.\n\tpublic chartView: [number, number] = [700, 400];                    // Dimensions du graphique.\n\n\tconstructor(private olympicService: OlympicService, private router: Router) {} // Constructeur pour injecter OlympicService et Router.\n\n\tngOnInit(): void {                                                  // Méthode ngOnInit pour initialiser le composant.\n\t\tthis.isLoading = true;                                          // Active l'indicateur de chargement.\n\t\tthis.updateChartSize();                                         // Appelle la méthode pour ajuster la taille du graphique.\n\t\twindow.onresize = () => this.updateChartSize();                 // Gère le redimensionnement de la fenêtre pour ajuster la taille du graphique.\n\n\t\tthis.olympicService                                             // Utilise OlympicService pour charger les données initiales.\n\t\t\t.loadInitialData()                                          // Appelle la méthode pour charger les données.\n\t\t\t.pipe(                                                      // Utilise les opérateurs RxJS pour transformer et finaliser les données.\n\t\t\t\tmap((countries: OlympicCountry[]) => countries),        // Utilise map pour transformer les données reçues.\n\t\t\t\tfinalize(() => (this.isLoading = false))                // Utilise finalize pour désactiver l'indicateur de chargement une fois le traitement terminé.\n\t\t\t)\n\t\t\t.subscribe({                                                // Souscrit à l'Observable pour recevoir les données.\n\t\t\t\tnext: (countries) => {                                  // Fonction next pour traiter les données reçues.\n\t\t\t\t\tif (countries) {                                    // Vérifie si les données des pays sont présentes.\n\t\t\t\t\t\tthis.numberOfJOs = this.calculateNumberOfJOs(countries);  // Calcule le nombre de Jeux Olympiques.\n\t\t\t\t\t\tthis.numberOfCountries = countries.length;                // Calcule le nombre de pays participants.\n\t\t\t\t\t\tthis.chartData = countries.map((country) => ({            // Transforme les données des pays pour le graphique.\n\t\t\t\t\t\t\tname: country.country,                                // Nom du pays pour l'étiquette.\n\t\t\t\t\t\t\tvalue: country.participations.reduce((total, participation) => total + participation.medalsCount, 0), // Calcule le nombre total de médailles pour chaque pays.\n\t\t\t\t\t\t}));                             \n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\terror: (error) => {                                     // Fonction error pour gérer les erreurs de chargement des données.\n\t\t\t\t\tconsole.error(\"Error loading data:\", error);        // Affiche l'erreur dans la console.\n\t\t\t\t\tthis.isLoading = false;                             // Désactive l'indicateur de chargement en cas d'erreur.\n\t\t\t\t\tthis.errorMessage = \"Failed to load data: \" + (error.message || \"Unknown error\"); // Met à jour le message d'erreur.\n\t\t\t\t},\n\t\t\t});\n\t}\n\n\n\tprivate updateChartSize() {                                         //\n\t\tconst maxWidth = 700;                                           // Définit la largeur maximale du graphique à 700 pixels.\n\t\tconst widthRatio = 0.9;                                         // 90% de la largeur de la fenêtre\n\t\tconst aspectRatio = 0.5;                                        // Ratio hauteur / largeur (par exemple, 0.5 pour un ratio de 2:1)\n\t\tconst width = Math.min(window.innerWidth * widthRatio, maxWidth); // Calcule la largeur du graphique comme étant le plus petit entre 90% de la largeur de la fenêtre et 700 pixels.\n\t\tconst height = width * aspectRatio;                             // Calcule la hauteur du graphique en utilisant le ratio hauteur/largeur défini précédemment.\n\t\tthis.chartView = [width, height];                               // Met à jour la propriété chartView avec les nouvelles dimensions du graphique.\n\t}\n\n\tprivate calculateNumberOfJOs(countries: OlympicCountry[]): number { // Cette méthode calcule le nombre total d'années distinctes des Jeux Olympiques à partir des données des pays.\n\t\tconst yearsOfJOs: number[] = [];                                // Initialise un tableau vide pour stocker les années distinctes des Jeux Olympiques.\n\t\n\t\tcountries.forEach((olympic) => {                                // Parcourt chaque pays dans la liste des pays olympiques.\n\t\t\tolympic.participations.forEach((participation) => {         // Parcourt chaque participation olympique du pays.\n\t\t\t\tif (!yearsOfJOs.includes(participation.year)) {         // Vérifie si l'année de la participation n'est pas déjà dans le tableau 'yearsOfJOs'.\n\t\t\t\t\tyearsOfJOs.push(participation.year);                // Si l'année n'est pas présente, l'ajoute au tableau.\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\n\t\treturn yearsOfJOs.length;                                       // Retourne la longueur du tableau 'yearsOfJOs', qui représente le nombre total d'années distinctes des Jeux Olympiques.\n\t}\t\n\n\tonChartClick(event: ChartData): void {                              // Gère les clics sur le graphique.\n\t\tif (event && event.name) {                                      // Vérifie si l'événement et le nom de l'événement sont présents.\n\t\t\tthis.router.navigate([`/details/${event.name}`]);           // Navigue vers la page de détails du pays sélectionné.\n\t\t}\n\t}\n\n\ttooltipText = (item: ChartData): string => {                        // Fonction pour générer le texte de l'infobulle sur le graphique.\n\t\tconst label = item.name;                                        // Récupère le nom du pays (label).\n\t\tconst val = item.value;                                         // Récupère la valeur (nombre de médailles).\n\t\treturn `${label} ${val}`;                                       // Formate et retourne le texte de l'infobulle.\n\t};\n}\n\t/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\n* Le symbole $ après le nom olympics dans olympics$ est une convention de nommage couramment utilisée dans la communauté Angular et RxJS pour indiquer qu'une variable est un Observable.\n\n* \nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/\n"]},"metadata":{},"sourceType":"module"}