{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core'; // Importe les décorateurs Component et OnInit d'Angular\n\nimport { Subscription } from 'rxjs';\nlet DetailsComponent = class DetailsComponent {\n  constructor( // Constructeur de la classe DetailsComponent\n  activatedRoute, // On injecte ActivatedRoute pour accéder aux paramètres de l'itinéraire\n  olympicService, // On injecte OlympicService pour accéder aux données et aux méthodes liées aux Jeux Olympiques\n  router) {\n    this.activatedRoute = activatedRoute;\n    this.olympicService = olympicService;\n    this.router = router; // On déclare les propriétés publiques de la classe avec des valeurs initiales\n\n    this.subscriptions = new Subscription();\n    this.countryName = \"\"; // Je déclare, initialise à 0, stocke le nom du pays sélectionné\n\n    this.numberOfEntries = 0; // Je déclare, initialise à 0, stocke le compte du nombre de participations olympiques\n\n    this.totalNumberMedals = 0; // Je déclare, initialise à 0, stocke le compte du nombre total de médailles gagnées\n\n    this.totalNumberOfAthletes = 0; // Je déclare, initialise, stocke le compte du le nombre total d'athlètes\n\n    this.countryData = null; // On stocke les données détaillées du pays\n\n    this.chartData = []; // On stocke les données pour le graphique ngx-charts\n\n    this.xAxisLabels = []; // Labels pour l'axe X du graphique\n\n    this.allCountryNames = [];\n    this.isLoading = false;\n    this.errorMessage = null;\n  } // On injecte Router pour la navigation entre les différentes routes/pages de l'application\n\n\n  ngOnInit() {\n    this.isLoading = true;\n    this.subscriptions.add(this.olympicService.getOlympics().subscribe(countries => {\n      if (countries) {\n        this.allCountryNames = countries.map(country => country.country);\n      }\n    }));\n    this.subscriptions.add(this.activatedRoute.params.subscribe(params => {\n      this.countryName = params['countryName'];\n      setTimeout(() => {\n        if (!this.isValidCountry(this.countryName)) {\n          this.router.navigate(['/404']);\n        } else {\n          this.loadCountryData();\n        }\n      });\n    }));\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n\n  isValidCountry(countryName) {\n    return this.allCountryNames.includes(countryName);\n  }\n\n  navigateBackHome() {\n    this.router.navigate([\"/\"]); // J'utilise le service router pour naviguer vers la racine (\"/\")\n  }\n\n  ngAfterViewInit() {\n    this.olympicService.loadInitialData().subscribe(() => {\n      this.loadCountryData(); // On appelle loadCountryData pour charger et traiter les données du pays\n    });\n  }\n\n  loadCountryData() {\n    // Début du chargement\n    this.isLoading = true; // Appel du service pour obtenir les données du pays\n\n    this.olympicService.getCountryData(this.countryName).subscribe({\n      next: data => {\n        if (data && data.participations && data.participations.length > 0) {\n          // Traitement des données reçues\n          this.countryData = data;\n          this.numberOfEntries = data.participations.length;\n          this.totalNumberMedals = data.participations.reduce((total, participation) => total + participation.medalsCount, 0);\n          this.totalNumberOfAthletes = data.participations.reduce((total, participation) => total + participation.athleteCount, 0); // Calcul des données pour le graphique\n\n          this.calculateChartData();\n        } else {\n          // Si aucune donnée ou participation n'est trouvée\n          this.errorMessage = 'No data or participations found for ' + this.countryName;\n        } // Fin du chargement\n\n\n        this.isLoading = false;\n      },\n      error: error => {\n        // En cas d'erreur\n        console.error('Error loading country data:', error);\n        this.errorMessage = 'Failed to load data: ' + (error.message || 'Unknown error'); // Fin du chargement\n\n        this.isLoading = false;\n      }\n    });\n  }\n  /*\n      private loadCountryData(): void {\n          this.isLoading = true;\n          this.olympicService.getCountryData(this.countryName)                // Appelle getCountryData sur olympicService du pays choisi\n      .subscribe((data: OlympicCountry | null) => {                       // Cette méthode est utilisée pour s'abonner à un Observable ???\n              console.log(\"Data for\", this.countryName, data);                  // Affiche les données reçues pour le pays sélectionné\n  \n              if (data) {                                                       // On vérifie si les données (data) du pays sont disponibles\n                  this.countryData = data;                                        // Je stocke les données du pays dans countryData\n                  this.numberOfEntries =  0;                                      // Initialisation du nombre de participations du pays à 0\n                  this.totalNumberMedals = 0;                                     // Initialisation du total des médailles à 0\n                  this.totalNumberOfAthletes = 0;                                 // Initialisation du total des athlètes à 0\n  \n                  if (data.participations && data.participations.length > 0) {    // On vérifie si le pays a des participations\n                      data.participations.forEach((participation: any) => {         // Si oui je parcours chaque participation du pays\n                          this.numberOfEntries = data.participations.length;          // Mise à jour du nombre total d'entrées (participations)\n                          this.totalNumberMedals += participation.medalsCount;        // Mise à jour du nombre total de médailles en les additionnant\n                          this.totalNumberOfAthletes += participation.athleteCount;   // Mise à jour du nombre total d'athletes en les additionnant\n                          console.log(\"Participation Data:\", participation);          // J'affiche les données de chaque participation dans la console\n                      });\n                  }\n  \n                  this.calculateChartData();                                      // J'appelle calculateChartData pour mettre à jour le graphique avec les nouvelles données\n              }\n          });\n      }\n  */\n\n\n  calculateChartData() {\n    if (this.countryData && this.countryData.participations) {\n      // Vérifie si countryData et ses participations sont définies  \n      const medalsByYear = {}; // Création d'un objet pour stocker le nombre de médailles par année\n\n      this.countryData.participations.forEach(participation => {\n        const year = participation.year.toString(); // Convertion de l'année en lettres (string)\n\n        const medalsCount = participation.medalsCount; // Je récupère le nombre de médailles de la participation\n\n        if (!medalsByYear[year]) {\n          // Si l'année n'est pas encore dans \"medalsByYear\", je l'ajoute avec le nombre de médailles\n          medalsByYear[year] = medalsCount;\n        } else {\n          // Si l'année existe déjà, j'ajoute le nombre de médailles à l'entrée existante\n          medalsByYear[year] += medalsCount;\n        }\n\n        console.log(\"Medals By Year (Current Iteration):\", medalsByYear);\n      });\n      let series = Object.keys(medalsByYear).map(year => {\n        return {\n          name: year,\n          value: medalsByYear[year]\n        }; // Création d'un objet pour chaque année avec son nom et le nombre de médailles pour ngx-charts !!\n      });\n      this.chartData = [{\n        name: \"Médailles\",\n        series: series\n      }]; // Mise à jour pour le format attendu par ngx-charts!! - Un tableau avec un objet contenant le nom de la série et le tableau des séries\n\n      this.xAxisLabels = series.map(dataPoint => dataPoint.name); // Mise à jour xAxisLabels avec les noms (années) des points de données\n\n      console.log(\"Chart Data:\", this.chartData); // Affiche chartData dans la console\n\n      console.log(\"X-Axis Labels:\", this.xAxisLabels); // Affiche xAxisLabels dans la console\n    } else {\n      this.chartData = []; // Si countryData ou ses participations ne sont pas définis, alors on initialise chartData à un tableau vide\n    }\n  }\n\n};\nDetailsComponent = __decorate([Component({\n  selector: \"app-details\",\n  templateUrl: \"./details.component.html\",\n  styleUrls: [\"./details.component.scss\"] // Chemin(s) vers le(s) fichier(s) de styles pour ce composant\n\n})], DetailsComponent);\nexport { DetailsComponent };\n/*\n* Component, OnInit : Permettent d'utiliser les fonctionnalités de base des composants Angular et le hook de cycle de vie ngOnInit.\n* OlympicService : Service personnalisé pour gérer les opérations liées aux données olympiques.\n* OlympicCountry : Modèle de données définissant la structure d'un objet pays olympique.\n* ActivatedRoute, Router : Fournissent des fonctionnalités pour interagir avec les routes de l'application (par exemple, lire les paramètres d'URL ou naviguer vers une autre page).\n* Observable : Fait partie de RxJS, utilisé pour gérer des données asynchrones, comme les réponses des appels HTTP.\n* Décorateur @Component : Indique à Angular que la classe qui suit est un composant Angular.\n    Il fournit des métadonnées de configuration pour le composant, telles que son sélecteur, le fichier de template et les fichiers de style.\n\n* Constructeur : C'est une méthode spéciale qui est exécutée automatiquement lors de la création d'une instance de la classe. Dans Angular, il est couramment utilisé pour l'injection de dépendances.\n* .subscribe() : Cette méthode est utilisée pour s'abonner à un Observable. Les Observable sont au cœur de la programmation réactive et sont utilisés pour gérer des flux de données asynchrones, comme les réponses des requêtes HTTP dans Angular.\n* ngOnInit: Utilisé pour initialiser le composant. Ici, il récupère le nom du pays à partir des paramètres de l'URL et le stocke dans une propriété.\n* ngAfterViewInit: S'assure que les données initiales sont chargées après que la vue du composant soit complètement initialisée.\n\n* Utilisation de setTimeout : Dans ngOnInit, j'ai utilisé setTimeout pour retarder la vérification jusqu'à ce que les données des pays soient chargées. Cela est nécessaire car getOlympics() est asynchrone et peut ne pas avoir terminé de charger les données au moment où isValidCountry est appelée.\n*/","map":{"version":3,"mappings":"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","names":["Component","Subscription","DetailsComponent","constructor","activatedRoute","olympicService","router","ngOnInit","isLoading","subscriptions","add","getOlympics","subscribe","countries","allCountryNames","map","country","params","countryName","setTimeout","isValidCountry","navigate","loadCountryData","ngOnDestroy","unsubscribe","includes","navigateBackHome","ngAfterViewInit","loadInitialData","getCountryData","next","data","participations","length","countryData","numberOfEntries","totalNumberMedals","reduce","total","participation","medalsCount","totalNumberOfAthletes","athleteCount","calculateChartData","errorMessage","error","console","message","medalsByYear","forEach","year","toString","log","series","Object","keys","name","value","chartData","xAxisLabels","dataPoint","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/details/details.component.ts"],"sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';           // Importe les décorateurs Component et OnInit d'Angular\nimport { Subscription } from 'rxjs';                    \nimport { OlympicService } from \"src/app/core/services/olympic.service\"; // Importe OlympicService de vos services\nimport { OlympicCountry } from \"src/app/core/models/Olympic\";           // Importe le modèle OlympicCountry\nimport { ActivatedRoute, Router } from \"@angular/router\";               // Importe ActivatedRoute et Router pour la gestion des routes\nimport { Observable } from \"rxjs\";                                      // Importe Observable de RxJS\n\n@Component({                                     // Décorateur Component qui définit les métadonnées pour le composant DetailsComponent\n\tselector: \"app-details\",                       // Sélecteur CSS utilisé pour identifier ce composant dans le template HTML\n\ttemplateUrl: \"./details.component.html\",       // Chemin vers le fichier de template HTML pour ce composant\n\tstyleUrls: [\"./details.component.scss\"],       // Chemin(s) vers le(s) fichier(s) de styles pour ce composant\n})\nexport class DetailsComponent implements OnInit, OnDestroy {                    // On va implémenter l'interface OnInit d'Angular\n\t                                                                   // On déclare les propriétés publiques de la classe avec des valeurs initiales\n  private subscriptions = new Subscription();\n  public countryName: string = \"\";                                   // Je déclare, initialise à 0, stocke le nom du pays sélectionné\n\tpublic numberOfEntries: number = 0;                                // Je déclare, initialise à 0, stocke le compte du nombre de participations olympiques\n\tpublic totalNumberMedals: number = 0;                              // Je déclare, initialise à 0, stocke le compte du nombre total de médailles gagnées\n\tpublic totalNumberOfAthletes: number = 0;                          // Je déclare, initialise, stocke le compte du le nombre total d'athlètes\n\tpublic countryData: any = null;                                    // On stocke les données détaillées du pays\n\tpublic chartData: any[] = [];                                      // On stocke les données pour le graphique ngx-charts\n\tpublic olympics$: Observable<OlympicCountry[] | null> | undefined; // Observable pour les données olympiques\n\tpublic xAxisLabels: string[] = [];                                 // Labels pour l'axe X du graphique\n\tpublic olympicCountry?: OlympicCountry;                            // Type facultatif pour les données du pays olympique\n    public allCountryNames: string[] = [];\n\tisLoading: boolean = false;\n\terrorMessage: string | null = null;\n\n\tconstructor(                                   // Constructeur de la classe DetailsComponent\n    private activatedRoute: ActivatedRoute,      // On injecte ActivatedRoute pour accéder aux paramètres de l'itinéraire\n    private olympicService: OlympicService,      // On injecte OlympicService pour accéder aux données et aux méthodes liées aux Jeux Olympiques\n    private router: Router) {}                   // On injecte Router pour la navigation entre les différentes routes/pages de l'application\n\n    ngOnInit(): void {\n     this.isLoading = true;\n      this.subscriptions.add(\n          this.olympicService.getOlympics().subscribe(countries => {\n              if (countries) {\n                  this.allCountryNames = countries.map(country => country.country);\n              }\n          })\n      );\n\n      this.subscriptions.add(\n          this.activatedRoute.params.subscribe(params => {\n              this.countryName = params['countryName'];\n              setTimeout(() => {\n                  if (!this.isValidCountry(this.countryName)) {\n                      this.router.navigate(['/404']);\n                  } else {\n                      this.loadCountryData();\n                  }\n              });\n          })\n      );\n  }\n\n  ngOnDestroy(): void {\n     \n      this.subscriptions.unsubscribe();\n  }\n\nprivate isValidCountry(countryName: string): boolean {\n  return this.allCountryNames.includes(countryName);\n}\n\n\tnavigateBackHome(): void {                                // Méthode d'un bouton pour naviguer vers la page d'accueil\n\t\tthis.router.navigate([\"/\"]);                            // J'utilise le service router pour naviguer vers la racine (\"/\")\n\t}\n\n\tngAfterViewInit(): void {                                 // ngAfterViewInit est un hook du cycle de vie appelé après l'initialisation de la vue du composant\n\t\tthis.olympicService.loadInitialData().subscribe(() => { // Souscrit à la méthode loadInitialData de olympicService ???\n\t\t\tthis.loadCountryData();                               // On appelle loadCountryData pour charger et traiter les données du pays\n\t\t});\n\t}\n\n\tprivate loadCountryData(): void {\n\t\t// Début du chargement\n\t\tthis.isLoading = true;\n\t  \n\t\t// Appel du service pour obtenir les données du pays\n\t\tthis.olympicService.getCountryData(this.countryName)\n\t\t  .subscribe({\n\t\t\tnext: (data: OlympicCountry | null) => {\n\t\t\t  if (data && data.participations && data.participations.length > 0) {\n\t\t\t\t// Traitement des données reçues\n\t\t\t\tthis.countryData = data;\n\t\t\t\tthis.numberOfEntries = data.participations.length;\n\t\t\t\tthis.totalNumberMedals = data.participations.reduce((total, participation) => total + participation.medalsCount, 0);\n\t\t\t\tthis.totalNumberOfAthletes = data.participations.reduce((total, participation) => total + participation.athleteCount, 0);\n\t  \n\t\t\t\t// Calcul des données pour le graphique\n\t\t\t\tthis.calculateChartData();\n\t\t\t  } else {\n\t\t\t\t// Si aucune donnée ou participation n'est trouvée\n\t\t\t\tthis.errorMessage = 'No data or participations found for ' + this.countryName;\n\t\t\t  }\n\t\t\t  // Fin du chargement\n\t\t\t  this.isLoading = false;\n\t\t\t},\n\t\t\terror: (error) => {\n\t\t\t  // En cas d'erreur\n\t\t\t  console.error('Error loading country data:', error);\n\t\t\t  this.errorMessage = 'Failed to load data: ' + (error.message || 'Unknown error');\n\t\t\t  // Fin du chargement\n\t\t\t  this.isLoading = false;\n\t\t\t}\n\t\t  });\n\t  }\n\t  \n\n/*\n\tprivate loadCountryData(): void {\n\t\tthis.isLoading = true;\n\t\tthis.olympicService.getCountryData(this.countryName)                // Appelle getCountryData sur olympicService du pays choisi\n    .subscribe((data: OlympicCountry | null) => {                       // Cette méthode est utilisée pour s'abonner à un Observable ???\n\t\t\tconsole.log(\"Data for\", this.countryName, data);                  // Affiche les données reçues pour le pays sélectionné\n\n\t\t\tif (data) {                                                       // On vérifie si les données (data) du pays sont disponibles\n\t\t\t\tthis.countryData = data;                                        // Je stocke les données du pays dans countryData\n\t\t\t\tthis.numberOfEntries =  0;                                      // Initialisation du nombre de participations du pays à 0\n\t\t\t\tthis.totalNumberMedals = 0;                                     // Initialisation du total des médailles à 0\n\t\t\t\tthis.totalNumberOfAthletes = 0;                                 // Initialisation du total des athlètes à 0\n\n\t\t\t\tif (data.participations && data.participations.length > 0) {    // On vérifie si le pays a des participations\n\t\t\t\t\tdata.participations.forEach((participation: any) => {         // Si oui je parcours chaque participation du pays\n\t\t\t\t\t\tthis.numberOfEntries = data.participations.length;          // Mise à jour du nombre total d'entrées (participations)\n\t\t\t\t\t\tthis.totalNumberMedals += participation.medalsCount;        // Mise à jour du nombre total de médailles en les additionnant\n\t\t\t\t\t\tthis.totalNumberOfAthletes += participation.athleteCount;   // Mise à jour du nombre total d'athletes en les additionnant\n\t\t\t\t\t\tconsole.log(\"Participation Data:\", participation);          // J'affiche les données de chaque participation dans la console\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.calculateChartData();                                      // J'appelle calculateChartData pour mettre à jour le graphique avec les nouvelles données\n\t\t\t}\n\t\t});\n\t}\n*/\n\tprivate calculateChartData(): void {                                  // Définit la méthode utilisé pour le graphique\n\t\tif (this.countryData && this.countryData.participations) {          // Vérifie si countryData et ses participations sont définies  \n\t\t\tconst medalsByYear: { [year: string]: number } = {};              // Création d'un objet pour stocker le nombre de médailles par année\n\n\t\t\tthis.countryData.participations.forEach((participation: any) => { // Je parcours chaque participation dans countryData\n\t\t\t\tconst year = participation.year.toString();                     // Convertion de l'année en lettres (string)\n\t\t\t\tconst medalsCount = participation.medalsCount;                  // Je récupère le nombre de médailles de la participation\n\n\t\t\t\tif (!medalsByYear[year]) {                                      // Si l'année n'est pas encore dans \"medalsByYear\", je l'ajoute avec le nombre de médailles\n\t\t\t\t\tmedalsByYear[year] = medalsCount;\n\t\t\t\t} else {                                                        // Si l'année existe déjà, j'ajoute le nombre de médailles à l'entrée existante\n\t\t\t\t\tmedalsByYear[year] += medalsCount;\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Medals By Year (Current Iteration):\", medalsByYear);\n\t\t\t});\n\n\t\t\tlet series = Object.keys(medalsByYear).map((year) => {            // Convertion de medalsByYear en un tableau de séries pour ngx-charts !!\n\t\t\t\treturn { name: year, value: medalsByYear[year] };               // Création d'un objet pour chaque année avec son nom et le nombre de médailles pour ngx-charts !!\n\t\t\t});\n\n\t\t\tthis.chartData = [{ name: \"Médailles\", series: series }];         // Mise à jour pour le format attendu par ngx-charts!! - Un tableau avec un objet contenant le nom de la série et le tableau des séries\n\n\t\t\tthis.xAxisLabels = series.map((dataPoint) => dataPoint.name);     // Mise à jour xAxisLabels avec les noms (années) des points de données\n\n\t\t\tconsole.log(\"Chart Data:\", this.chartData);                       // Affiche chartData dans la console\n\t\t\tconsole.log(\"X-Axis Labels:\", this.xAxisLabels);                  // Affiche xAxisLabels dans la console\n\t\t} else {\n\t\t\tthis.chartData = [];                                              // Si countryData ou ses participations ne sont pas définis, alors on initialise chartData à un tableau vide\n\t\t}\n\t}\n}\n\n/*\n* Component, OnInit : Permettent d'utiliser les fonctionnalités de base des composants Angular et le hook de cycle de vie ngOnInit.\n* OlympicService : Service personnalisé pour gérer les opérations liées aux données olympiques.\n* OlympicCountry : Modèle de données définissant la structure d'un objet pays olympique.\n* ActivatedRoute, Router : Fournissent des fonctionnalités pour interagir avec les routes de l'application (par exemple, lire les paramètres d'URL ou naviguer vers une autre page).\n* Observable : Fait partie de RxJS, utilisé pour gérer des données asynchrones, comme les réponses des appels HTTP.\n* Décorateur @Component : Indique à Angular que la classe qui suit est un composant Angular.\n    Il fournit des métadonnées de configuration pour le composant, telles que son sélecteur, le fichier de template et les fichiers de style.\n\n* Constructeur : C'est une méthode spéciale qui est exécutée automatiquement lors de la création d'une instance de la classe. Dans Angular, il est couramment utilisé pour l'injection de dépendances.\n* .subscribe() : Cette méthode est utilisée pour s'abonner à un Observable. Les Observable sont au cœur de la programmation réactive et sont utilisés pour gérer des flux de données asynchrones, comme les réponses des requêtes HTTP dans Angular.\n* ngOnInit: Utilisé pour initialiser le composant. Ici, il récupère le nom du pays à partir des paramètres de l'URL et le stocke dans une propriété.\n* ngAfterViewInit: S'assure que les données initiales sont chargées après que la vue du composant soit complètement initialisée.\n\n* Utilisation de setTimeout : Dans ngOnInit, j'ai utilisé setTimeout pour retarder la vérification jusqu'à ce que les données des pays soient chargées. Cela est nécessaire car getOlympics() est asynchrone et peut ne pas avoir terminé de charger les données au moment où isValidCountry est appelée.\n*/"]},"metadata":{},"sourceType":"module"}