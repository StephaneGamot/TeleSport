{"ast":null,"code":"import { Observable } from 'rxjs'; // Importe 'Observable' de la bibliothèque RxJS pour la gestion des données asynchrones.\n\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/olympic.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@swimlane/ngx-charts\";\n\nfunction HomeComponent_li_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const country_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", country_r2.country, \" \");\n  }\n}\n\nconst _c0 = function () {\n  return [700, 400];\n};\n\nfunction HomeComponent_ngx_charts_pie_chart_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ngx-charts-pie-chart\", 2);\n  }\n\n  if (rf & 2) {\n    const olympicsData_r3 = ctx.ngIf;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", olympicsData_r3)(\"view\", i0.ɵɵpureFunction0(7, _c0))(\"legend\", true)(\"labels\", true)(\"scheme\", ctx_r1.colorScheme)(\"animations\", ctx_r1.animations)(\"doughnut\", ctx_r1.doughnut);\n  }\n}\n\nexport class HomeComponent {\n  constructor(olympicService) {\n    this.olympicService = olympicService;\n  } // Le constructeur est utilisé pour l'injection de dépendances.\n\n\n  ngOnInit() {\n    this.olympics$ = this.olympicService.getOlympics(); // Lors de l'initialisation, s'abonner aux données olympiques fournies par 'olympicService'.\n  } // Assignation de l'Observable retourné par 'getOlympics()' à la propriété 'olympics$'.\n\n\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.OlympicService));\n};\n\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 11,\n  vars: 9,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"results\", \"view\", \"legend\", \"labels\", \"scheme\", \"animations\", \"doughnut\", 4, \"ngIf\"], [3, \"results\", \"view\", \"legend\", \"labels\", \"scheme\", \"animations\", \"doughnut\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Olympic games app\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"hr\");\n      i0.ɵɵelementStart(3, \"p\");\n      i0.ɵɵtext(4);\n      i0.ɵɵpipe(5, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"ul\");\n      i0.ɵɵtemplate(7, HomeComponent_li_7_Template, 2, 1, \"li\", 0);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, HomeComponent_ngx_charts_pie_chart_9_Template, 1, 8, \"ngx-charts-pie-chart\", 1);\n      i0.ɵɵpipe(10, \"async\");\n    }\n\n    if (rf & 2) {\n      let tmp_0_0;\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\"\", (tmp_0_0 = i0.ɵɵpipeBind1(5, 3, ctx.olympics$)) == null ? null : tmp_0_0.length, \" data loaded\");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 5, ctx.olympics$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 7, ctx.olympics$));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.PieChartComponent, i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJob21lLmNvbXBvbmVudC5zY3NzIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA+B,MAA/B,C,CAAgE;;;;;;;;;ICG5DC;IACEA;IACFA;;;;;IADEA;IAAAA;;;;;;;;;;IAGJA;;;;;;IAEAA,0CAAwB,MAAxB,EAAwBA,0BAAxB,EAAwB,QAAxB,EAAwB,IAAxB,EAAwB,QAAxB,EAAwB,IAAxB,EAAwB,QAAxB,EAAwBC,kBAAxB,EAAwB,YAAxB,EAAwBA,iBAAxB,EAAwB,UAAxB,EAAwBA,eAAxB;;;;ADCF,OAAM,MAAOC,aAAP,CAAoB;EAKxBC,YAAoBC,cAApB,EAAkD;IAA9B;EAAkC,CAL9B,CAKsC;;;EAE9DC,QAAQ;IACN,KAAKC,SAAL,GAAiB,KAAKF,cAAL,CAAoBG,WAApB,EAAjB,CADM,CACsD;EAC7D,CATuB,CASsC;;;AATtC;;;mBAAbL,eAAaF;AAAA;;;QAAbE;EAAaM;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX1BZ;MAAIA;MAAiBA;MACrBA;MACAA;MAAGA;;MAA6CA;MAChDA;MACIA;;MAGFA;MACAA;;;;;;MANCA;MAAAA;MAEyBA;MAAAA;MAKzBA;MAAAA","names":["Observable","i0","ctx_r1","HomeComponent","constructor","olympicService","ngOnInit","olympics$","getOlympics","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.ts","/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';              // Importe les décorateurs 'Component' et 'OnInit' d'Angular Core.\nimport { Observable, of } from 'rxjs';                          // Importe 'Observable' de la bibliothèque RxJS pour la gestion des données asynchrones.\nimport { OlympicService } from 'src/app/core/services/olympic.service';\nimport { OlympicCountry } from 'src/app/core/models/Olympic';   // Importe l'interface 'OlympicCountry' pour définir la structure des données olympiques.\n\n@Component({\n  selector: 'app-home',                                         // Sélecteur CSS pour utiliser ce composant.   Utilisé dans le HTML comme <app-home></app-home>.\n  templateUrl: './home.component.html',                         // Chemin vers le fichier de template HTML de ce composant\n  styleUrls: ['./home.component.scss'],                         // Chemin(s) vers le(s) fichier(s) de style CSS/SCSS de ce composant.\n})\n\nexport class HomeComponent implements OnInit {                  // Déclaration de la classe du composant 'HomeComponent'.\n  public olympics$: Observable<OlympicCountry[] | null> | undefined;  // Déclaration d'une propriété publique 'olympics$'. C'est un Observable qui émettra soit un tableau de 'OlympicCountry', soit 'null'. Peut être 'undefined' initialement.\n\n\n\n  constructor(private olympicService: OlympicService) {}        // Le constructeur est utilisé pour l'injection de dépendances.\n\n  ngOnInit(): void {                                            // La méthode 'ngOnInit' est un hook de cycle de vie d'Angular exécuté après la création du composant.\n    this.olympics$ = this.olympicService.getOlympics();         // Lors de l'initialisation, s'abonner aux données olympiques fournies par 'olympicService'.\n  }                                                             // Assignation de l'Observable retourné par 'getOlympics()' à la propriété 'olympics$'.\n}\n\n/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\n* Le symbole $ après le nom olympics dans olympics$ est une convention de nommage couramment utilisée dans la communauté Angular et RxJS pour indiquer qu'une variable est un Observable.\n\nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/","<h2>Olympic games app</h2>\n<hr />\n<p>{{ (olympics$ | async)?.length }} data loaded</p>\n<ul>\n    <li *ngFor=\"let country of (olympics$ | async)\">  <!--la directive *ngFor est utilisée pour itérer sur chaque élément du tableau émis par olympics$.-->\n      {{ country.country }}\n    </li>\n  </ul>\n  <ngx-charts-pie-chart\n  *ngIf=\"olympics$ | async as olympicsData\"\n  [results]=\"olympicsData\"\n  [view]=\"[700, 400]\"\n  [legend]=\"true\"\n  [labels]=\"true\"\n  [scheme]=\"colorScheme\"\n  [animations]=\"animations\"\n  [doughnut]=\"doughnut\">\n</ngx-charts-pie-chart>\n\n\n  <!--L'expression let country of (olympics$ | async) crée une variable locale country pour chaque itération, \n    qui représente l'objet courant du tableau olympics$.-->"]},"metadata":{},"sourceType":"module"}