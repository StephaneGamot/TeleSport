{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core'; // Importe les décorateurs 'Component' et 'OnInit' d'Angular Core.\n\nimport { finalize, map } from 'rxjs/operators';\nimport { Subscription } from 'rxjs';\nlet HomeComponent = class HomeComponent {\n  constructor(olympicService, router) {\n    this.olympicService = olympicService;\n    this.router = router;\n    this.isLoading = true; // Ajout de l'indicateur de chargement\n\n    this.subscriptions = new Subscription();\n    this.chartData = []; // Stocke les données transformées pour le diagramme\n\n    this.numberOfJOs = 0;\n    this.numberOfCountries = 0;\n\n    this.tooltipText = item => {\n      const label = item.data.name;\n      const val = item.data.value;\n      return `${label} ${val}`;\n    };\n  } // Le constructeur est utilisé pour l'injection de dépendances.\n\n\n  ngOnInit() {\n    this.olympics$ = this.olympicService.getOlympics().pipe(map(countries => {\n      if (countries) {\n        this.numberOfJOs = this.calculateNumberOfJOs(countries);\n        this.numberOfCountries = countries.length;\n        this.chartData = countries.map(country => ({\n          name: country.country,\n          value: country.participations.reduce((total, participation) => total + participation.medalsCount, 0)\n        }));\n      }\n\n      return countries || [];\n    }), finalize(() => this.isLoading = false) // Désactive l'indicateur de chargement à la fin du processus\n    ).subscribe();\n  }\n\n  calculateNumberOfJOs(countries) {\n    const yearsOfJOs = [];\n    countries.forEach(olympic => {\n      olympic.participations.forEach(participation => {\n        if (!yearsOfJOs.includes(participation.year)) {\n          yearsOfJOs.push(participation.year);\n        }\n      });\n    });\n    return yearsOfJOs.length;\n  }\n\n  onChartClick(event) {\n    if (event && event.name) {\n      this.router.navigate([`/details/${event.name}`]);\n    }\n  }\n\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'] // Chemin(s) vers le(s) fichier(s) de style CSS/SCSS de ce composant.\n\n})], HomeComponent);\nexport { HomeComponent };\n/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\n* Le symbole $ après le nom olympics dans olympics$ est une convention de nommage couramment utilisée dans la communauté Angular et RxJS pour indiquer qu'une variable est un Observable.\n\n* HomeComponent, l'ajout de la gestion ngOnDestroy n'est pas nécessaire si vous n'avez pas de souscriptions manuelles à des observables.\n  En effet, l'utilisation de l'observable olympics$ directement dans le template avec l'opérateur async dans Angular gère automatiquement les souscriptions et désabonnements pour vous.\n\nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,QAAiC,eAAjC,C,CAA+D;;AAI/D,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,SAASC,YAAT,QAA6B,MAA7B;AAQA,IAAaC,aAAa,GAA1B,MAAaA,aAAb,CAA0B;EASxBC,YAAoBC,cAApB,EAA4DC,MAA5D,EAA0E;IAAtD;IAAwC;IARrD,iBAAqB,IAArB,CAQmE,CAR5B;;IAEtC,qBAAgB,IAAIJ,YAAJ,EAAhB;IACD,iBAAmB,EAAnB,CAKmE,CAL3C;;IAE/B,mBAAsB,CAAtB;IACA,yBAA4B,CAA5B;;IAwCA,mBAAeK,IAAD,IAAsB;MAClC,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAL,CAAUC,IAAxB;MACA,MAAMC,GAAG,GAAGJ,IAAI,CAACE,IAAL,CAAUG,KAAtB;MACA,OAAO,GAAGJ,KAAK,IAAIG,GAAG,EAAtB;IACD,CAJD;EAtC8E,CATtD,CAS8D;;;EAEtFE,QAAQ;IACN,KAAKC,SAAL,GAAiB,KAAKT,cAAL,CAAoBU,WAApB,GAAkCC,IAAlC,CACff,GAAG,CAAEgB,SAAD,IAAuC;MACzC,IAAIA,SAAJ,EAAe;QACb,KAAKC,WAAL,GAAmB,KAAKC,oBAAL,CAA0BF,SAA1B,CAAnB;QACA,KAAKG,iBAAL,GAAyBH,SAAS,CAACI,MAAnC;QACA,KAAKC,SAAL,GAAiBL,SAAS,CAAChB,GAAV,CAAesB,OAAD,KAAc;UAC3Cb,IAAI,EAAEa,OAAO,CAACA,OAD6B;UAE3CX,KAAK,EAAEW,OAAO,CAACC,cAAR,CAAuBC,MAAvB,CAA8B,CAACC,KAAD,EAAQC,aAAR,KAA0BD,KAAK,GAAGC,aAAa,CAACC,WAA9E,EAA2F,CAA3F;QAFoC,CAAd,CAAd,CAAjB;MAID;;MACD,OAAOX,SAAS,IAAI,EAApB;IACD,CAVE,CADY,EAYfjB,QAAQ,CAAC,MAAM,KAAK6B,SAAL,GAAiB,KAAxB,CAZO,CAYwB;IAZxB,EAaXC,SAbW,EAAjB;EAeD;;EAEOX,oBAAoB,CAACF,SAAD,EAA4B;IACtD,MAAMc,UAAU,GAAa,EAA7B;IACAd,SAAS,CAACe,OAAV,CAAmBC,OAAD,IAAY;MAC5BA,OAAO,CAACT,cAAR,CAAuBQ,OAAvB,CAAgCL,aAAD,IAAkB;QAC/C,IAAI,CAACI,UAAU,CAACG,QAAX,CAAoBP,aAAa,CAACQ,IAAlC,CAAL,EAA8C;UAC5CJ,UAAU,CAACK,IAAX,CAAgBT,aAAa,CAACQ,IAA9B;QACD;MACF,CAJD;IAKD,CAND;IAOA,OAAOJ,UAAU,CAACV,MAAlB;EACD;;EAEDgB,YAAY,CAACC,KAAD,EAAW;IACrB,IAAIA,KAAK,IAAIA,KAAK,CAAC5B,IAAnB,EAAyB;MACvB,KAAKJ,MAAL,CAAYiC,QAAZ,CAAqB,CAAC,YAAYD,KAAK,CAAC5B,IAAI,EAAvB,CAArB;IACD;EACF;;AA7CuB,CAA1B;AAAaP,aAAa,eANzBJ,SAAS,CAAC;EACTyC,QAAQ,EAAE,UADD;EAETC,WAAW,EAAE,uBAFJ;EAGTC,SAAS,EAAE,CAAC,uBAAD,CAHF,CAGqD;;AAHrD,CAAD,CAMgB,GAAbvC,aAAa,CAAb;SAAAA;AAsDb","names":["Component","finalize","map","Subscription","HomeComponent","constructor","olympicService","router","item","label","data","name","val","value","ngOnInit","olympics$","getOlympics","pipe","countries","numberOfJOs","calculateNumberOfJOs","numberOfCountries","length","chartData","country","participations","reduce","total","participation","medalsCount","isLoading","subscribe","yearsOfJOs","forEach","olympic","includes","year","push","onChartClick","event","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.ts"],"sourcesContent":["import { Component, OnInit} from '@angular/core';              // Importe les décorateurs 'Component' et 'OnInit' d'Angular Core.\nimport { Observable } from 'rxjs';                          // Importe 'Observable' de la bibliothèque RxJS pour la gestion des données asynchrones.\nimport { OlympicService } from 'src/app/core/services/olympic.service';\nimport { OlympicCountry } from 'src/app/core/models/Olympic';   // Importe l'interface 'OlympicCountry' pour définir la structure des données olympiques.\nimport { finalize, map } from 'rxjs/operators';\nimport { Router } from '@angular/router'; \nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-home',                                         // Sélecteur CSS pour utiliser ce composant.   Utilisé dans le HTML comme <app-home></app-home>.\n  templateUrl: './home.component.html',                         // Chemin vers le fichier de template HTML de ce composant\n  styleUrls: ['./home.component.scss'],                         // Chemin(s) vers le(s) fichier(s) de style CSS/SCSS de ce composant.\n})\n\nexport class HomeComponent implements OnInit {                  // Déclaration de la classe du composant 'HomeComponent'.\n  public isLoading: boolean = true;             // Ajout de l'indicateur de chargement\n  public olympics$: Observable<OlympicCountry[] | undefined>;  // Déclaration d'une propriété publique 'olympics$'. C'est un Observable qui émettra soit un tableau de 'OlympicCountry', soit 'null'. Peut être 'undefined' initialement.\n  private subscriptions = new Subscription();\n  public chartData: any[] = [];  // Stocke les données transformées pour le diagramme\n  public tooltipTemplate: any; // Assurez-vous de déclarer la propriété tooltipTemplate.\n  numberOfJOs: number = 0;\n  numberOfCountries: number = 0;\n\n  constructor(private olympicService: OlympicService, private router: Router) {}        // Le constructeur est utilisé pour l'injection de dépendances.\n\n  ngOnInit(): void {\n    this.olympics$ = this.olympicService.getOlympics().pipe(\n      map((countries: OlympicCountry[] | null) => {\n        if (countries) {\n          this.numberOfJOs = this.calculateNumberOfJOs(countries);\n          this.numberOfCountries = countries.length;\n          this.chartData = countries.map((country) => ({\n            name: country.country,\n            value: country.participations.reduce((total, participation) => total + participation.medalsCount, 0),\n          }));\n        }\n        return countries || [];\n      }),\n      finalize(() => this.isLoading = false) // Désactive l'indicateur de chargement à la fin du processus\n        ).subscribe();\n    \n  }\n\n  private calculateNumberOfJOs(countries: OlympicCountry[]): number {\n    const yearsOfJOs: number[] = [];\n    countries.forEach((olympic) => {\n      olympic.participations.forEach((participation) => {\n        if (!yearsOfJOs.includes(participation.year)) {\n          yearsOfJOs.push(participation.year);\n        }\n      });\n    });\n    return yearsOfJOs.length;\n  }\n  \n  onChartClick(event: any): void {\n    if (event && event.name) {\n      this.router.navigate([`/details/${event.name}`]);\n    }\n  }\n\n  tooltipText = (item: any): string => {\n    const label = item.data.name;\n    const val = item.data.value;\n    return `${label} ${val}`;\n  };\n}\n\n/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\n* Le symbole $ après le nom olympics dans olympics$ est une convention de nommage couramment utilisée dans la communauté Angular et RxJS pour indiquer qu'une variable est un Observable.\n\n* HomeComponent, l'ajout de la gestion ngOnDestroy n'est pas nécessaire si vous n'avez pas de souscriptions manuelles à des observables. \n  En effet, l'utilisation de l'observable olympics$ directement dans le template avec l'opérateur async dans Angular gère automatiquement les souscriptions et désabonnements pour vous.\n\nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/"]},"metadata":{},"sourceType":"module"}