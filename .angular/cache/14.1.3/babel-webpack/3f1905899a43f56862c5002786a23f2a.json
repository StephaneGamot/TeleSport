{"ast":null,"code":"import { Observable } from 'rxjs'; // Importe 'Observable' de la bibliothèque RxJS pour la gestion des données asynchrones.\n\nimport { map } from 'rxjs/operators';\nimport { faAward } from '@fortawesome/free-solid-svg-icons';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/olympic.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@swimlane/ngx-charts\";\n\nfunction HomeComponent_li_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const country_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", country_r2.country, \" \");\n  }\n}\n\nfunction HomeComponent_ngx_charts_pie_chart_18_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"div\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵelement(4, \"fa-icon\", 9);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const model_r5 = ctx.model;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(model_r5.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"icon\", ctx_r4.faAward);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", model_r5.value, \"\");\n  }\n}\n\nconst _c0 = function () {\n  return [1050, 600];\n};\n\nfunction HomeComponent_ngx_charts_pie_chart_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"ngx-charts-pie-chart\", 6);\n    i0.ɵɵlistener(\"select\", function HomeComponent_ngx_charts_pie_chart_18_Template_ngx_charts_pie_chart_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onChartClick($event));\n    });\n    i0.ɵɵtemplate(1, HomeComponent_ngx_charts_pie_chart_18_ng_template_1_Template, 6, 3, \"ng-template\", null, 7, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r3 = i0.ɵɵreference(2);\n\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r1.chartData)(\"view\", i0.ɵɵpureFunction0(7, _c0))(\"legend\", false)(\"labels\", true)(\"trimLabels\", true)(\"tooltipTemplate\", _r3)(\"tooltipText\", ctx_r1.tooltipText);\n  }\n}\n\nexport class HomeComponent {\n  constructor(olympicService, router) {\n    this.olympicService = olympicService;\n    this.router = router;\n    this.chartData = []; // Stocke les données transformées pour le diagramme\n\n    this.faAward = faAward;\n\n    this.tooltipText = item => {\n      const label = item.data.name;\n      const val = item.data.value;\n      return `${label} ${val}`;\n    };\n  } // Le constructeur est utilisé pour l'injection de dépendances.\n\n\n  ngOnInit() {\n    this.olympicService.getOlympics().pipe(map(countries => countries ? countries.map(country => ({\n      name: country.country,\n      value: country.participations.reduce((total, participation) => total + participation.medalsCount, 0)\n    })) : [])).subscribe(transformedData => {\n      this.chartData = transformedData;\n    });\n  }\n\n  onPieChartClick(event) {\n    // Récupérez le nom du pays à partir de l'événement (ou d'où vous le stockez)\n    const countryName = event.data.name; // Utilisez le Router pour naviguer vers la page de détail avec le nom du pays en tant que paramètre\n\n    this.router.navigate(['/details', countryName]);\n  }\n\n  onChartClick(event) {\n    if (event && event.name) {\n      // Utilisez le Router pour naviguer vers la page concernée en fonction de l'événement ou des données du clic.\n      this.router.navigate([`/details/${event.name}`]); // Assurez-vous d'ajuster le chemin de la route selon votre structure.\n    }\n  }\n\n}\n\nHomeComponent.ɵfac = function HomeComponent_Factory(t) {\n  return new (t || HomeComponent)(i0.ɵɵdirectiveInject(i1.OlympicService), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nHomeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: HomeComponent,\n  selectors: [[\"app-home\"]],\n  decls: 19,\n  vars: 6,\n  consts: [[1, \"homePage\"], [1, \"homePageTitle\"], [1, \"homePageAllSubtitles\"], [1, \"homePageSubtitle\"], [4, \"ngFor\", \"ngForOf\"], [3, \"results\", \"view\", \"legend\", \"labels\", \"trimLabels\", \"tooltipTemplate\", \"tooltipText\", \"select\", 4, \"ngIf\"], [3, \"results\", \"view\", \"legend\", \"labels\", \"trimLabels\", \"tooltipTemplate\", \"tooltipText\", \"select\"], [\"tooltipTemplate\", \"\"], [1, \"tooltip\"], [2, \"color\", \"white\", 3, \"icon\"]],\n  template: function HomeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h1\");\n      i0.ɵɵtext(3, \"Medals per Country\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"span\");\n      i0.ɵɵtext(7, \"Number of JOs\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"span\");\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 3)(11, \"span\");\n      i0.ɵɵtext(12, \"Number of countries\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"span\");\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"ul\");\n      i0.ɵɵtemplate(16, HomeComponent_li_16_Template, 2, 1, \"li\", 4);\n      i0.ɵɵpipe(17, \"async\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(18, HomeComponent_ngx_charts_pie_chart_18_Template, 3, 8, \"ngx-charts-pie-chart\", 5);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵtextInterpolate(ctx.numberOfJOs);\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.numberOfCountries);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(17, 4, ctx.olympics$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.chartData);\n    }\n  },\n  dependencies: [i3.NgForOf, i3.NgIf, i4.PieChartComponent, i3.AsyncPipe],\n  styles: [\"@charset \\\"UTF-8\\\";\\n.homePage[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n}\\nh1[_ngcontent-%COMP%] {\\n  font-weight: 300;\\n  font-size: 4rem;\\n  font-family: \\\"Courier New\\\", Courier, monospace;\\n  color: white;\\n}\\n.homePageTitle[_ngcontent-%COMP%] {\\n  background-color: #03838f;\\n  border-radius: 10px;\\n  padding: 10px 20px;\\n  margin: 10px 0;\\n  font-size: 3rem;\\n}\\n.homePageAllSubtitles[_ngcontent-%COMP%] {\\n  display: flex;\\n}\\n.homePageSubtitle[_ngcontent-%COMP%] {\\n  border: 2px solid #03838f;\\n  border-radius: 10px;\\n  padding: 10px;\\n  margin: 10px;\\n  color: darkgray;\\n  font-size: 1.7rem;\\n}\\n.tooltip[_ngcontent-%COMP%] {\\n  background-color: #03838f;\\n  padding: 5px;\\n  font-family: Arial, Helvetica, sans-serif;\\n  border-radius: 10px;\\n  font-size: 1rem;\\n}\\n\\n\\n.custom-tooltip[_ngcontent-%COMP%] {\\n  background-color: #ff0000 !important; \\n  color: #ffffff !important; \\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhvbWUuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0JBQWdCO0FBQWhCO0VBQ0MsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQUVEO0FBQ0E7RUFDQyxnQkFBQTtFQUNBLGVBQUE7RUFDQSw4Q0FBQTtFQUNBLFlBQUE7QUFFRDtBQUNBO0VBQ0MseUJBQUE7RUFDQSxtQkFBQTtFQUNBLGtCQUFBO0VBQ0EsY0FBQTtFQUNBLGVBQUE7QUFFRDtBQUFBO0VBQ0MsYUFBQTtBQUdEO0FBREE7RUFDQyx5QkFBQTtFQUNBLG1CQUFBO0VBQ0EsYUFBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0EsaUJBQUE7QUFJRDtBQURBO0VBQ0MseUJBQUE7RUFDRyxZQUFBO0VBQ0EseUNBQUE7RUFDSCxtQkFBQTtFQUNBLGVBQUE7QUFJRDtBQUFBOzs7Ozs7Ozs7OztDQUFBO0FBYUEscUNBQUE7QUFDQTtFQUNJLG9DQUFBLEVBQUEsZUFBQTtFQUNBLHlCQUFBLEVBQUEsZ0JBQUE7QUFFSiIsImZpbGUiOiJob21lLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmhvbWVQYWdlIHtcblx0ZGlzcGxheTogZmxleDtcblx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG5cbmgxIHtcblx0Zm9udC13ZWlnaHQ6IDMwMDtcblx0Zm9udC1zaXplOiA0cmVtO1xuXHRmb250LWZhbWlseTogXCJDb3VyaWVyIE5ld1wiLCBDb3VyaWVyLCBtb25vc3BhY2U7XG5cdGNvbG9yOiB3aGl0ZTtcbn1cblxuLmhvbWVQYWdlVGl0bGUge1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjMDM4MzhmO1xuXHRib3JkZXItcmFkaXVzOiAxMHB4O1xuXHRwYWRkaW5nOiAxMHB4IDIwcHg7XG5cdG1hcmdpbjogMTBweCAwO1xuXHRmb250LXNpemU6IDNyZW07XG59XG4uaG9tZVBhZ2VBbGxTdWJ0aXRsZXMge1xuXHRkaXNwbGF5OiBmbGV4O1xufVxuLmhvbWVQYWdlU3VidGl0bGUge1xuXHRib3JkZXI6IDJweCBzb2xpZCAjMDM4MzhmO1xuXHRib3JkZXItcmFkaXVzOiAxMHB4O1xuXHRwYWRkaW5nOiAxMHB4O1xuXHRtYXJnaW46IDEwcHg7XG5cdGNvbG9yOiBkYXJrZ3JheTtcblx0Zm9udC1zaXplOiAxLjdyZW07XG59XG5cbi50b29sdGlwIHtcblx0YmFja2dyb3VuZC1jb2xvcjogIzAzODM4ZjtcbiAgICBwYWRkaW5nOiA1cHg7XG4gICAgZm9udC1mYW1pbHk6QXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjtcblx0Ym9yZGVyLXJhZGl1czogMTBweDtcblx0Zm9udC1zaXplOiAxcmVtO1xuXG59XG5cbi8qXG5uZ3gtdG9vbHRpcC1jb250ZW50Lm5neC1jaGFydHMtdG9vbHRpcC1jb250ZW50LnR5cGUtdG9vbHRpcCB7XG4gICAgLnRvb2x0aXAtY2FyZXQucG9zaXRpb24tdG9wIHtcbiAgICAgIGJvcmRlci10b3AtY29sb3I6IHdoaXRlO1xuICAgICAgYm94LXNoYWRvdzogMCA2cHggMjBweCAwIHJnYmEoMCwgMCwgMCwgMC4yKTtcbiAgICB9XG4gIFxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlIDtcbiAgICBib3gtc2hhZG93OiAwIDZweCAyMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpO1xuICB9XG5cbiovXG5cbi8qIENTUyBwZXJzb25uYWxpc8OpIHBvdXIgbGUgdG9vbHRpcCAqL1xuLmN1c3RvbS10b29sdGlwIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwICFpbXBvcnRhbnQ7IC8qIEZvbmQgcm91Z2UgKi9cbiAgICBjb2xvcjogI2ZmZmZmZiAhaW1wb3J0YW50OyAvKiBUZXh0ZSBibGFuYyAqL1xuICB9XG4gICJdfQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA+B,MAA/B,C,CAAgE;;AAGhE,SAASC,GAAT,QAAoB,gBAApB;AAEA,SAASC,OAAT,QAAwB,mCAAxB;;;;;;;;;ICKIC;IACEA;IACFA;;;;;IADEA;IAAAA;;;;;;IAoBAA,+BAAqB,CAArB,EAAqB,KAArB;IACMA;IAAgBA;IACtBA;IAAKA;IACFA;IAAiBA;;;;;;IAFdA;IAAAA;IACQA;IAAAA;IACXA;IAAAA;;;;;;;;;;;;IAjBPA;IASEA;MAAAA;MAAA;MAAA,OAAUA,2CAAV;IAA8B,CAA9B;IAIAA;IAOJA;;;;;;;IAlBEA,2CAAqB,MAArB,EAAqBA,0BAArB,EAAqB,QAArB,EAAqB,KAArB,EAAqB,QAArB,EAAqB,IAArB,EAAqB,YAArB,EAAqB,IAArB,EAAqB,iBAArB,EAAqBC,GAArB,EAAqB,aAArB,EAAqBC,kBAArB;;;;ADPF,OAAM,MAAOC,aAAP,CAAoB;EAKxBC,YAAoBC,cAApB,EAA4DC,MAA5D,EAA0E;IAAtD;IAAwC;IAHrD,iBAAmB,EAAnB,CAGmE,CAH3C;;IAE/B,eAAUP,OAAV;;IA+BF,mBAAeQ,IAAD,IAAsB;MAClC,MAAMC,KAAK,GAAGD,IAAI,CAACE,IAAL,CAAUC,IAAxB;MACA,MAAMC,GAAG,GAAGJ,IAAI,CAACE,IAAL,CAAUG,KAAtB;MACC,OAAO,GAAGJ,KAAK,IAAIG,GAAG,EAAtB;IACF,CAJD;EA9BgF,CALtD,CAK8D;;;EAEvFE,QAAQ;IACP,KAAKR,cAAL,CAAoBS,WAApB,GAAkCC,IAAlC,CACEjB,GAAG,CAAEkB,SAAD,IACFA,SAAS,GAAGA,SAAS,CAAClB,GAAV,CAAcmB,OAAO,KAAK;MACpCP,IAAI,EAAEO,OAAO,CAACA,OADsB;MAEpCL,KAAK,EAAEK,OAAO,CAACC,cAAR,CAAuBC,MAAvB,CAA8B,CAACC,KAAD,EAAQC,aAAR,KAA0BD,KAAK,GAAGC,aAAa,CAACC,WAA9E,EAA2F,CAA3F;IAF6B,CAAL,CAArB,CAAH,GAGH,EAJL,CADL,EAOEC,SAPF,CAOYC,eAAe,IAAG;MAC5B,KAAKC,SAAL,GAAiBD,eAAjB;IACD,CATD;EAUD;;EACDE,eAAe,CAACC,KAAD,EAAW;IACxB;IACA,MAAMC,WAAW,GAAGD,KAAK,CAAClB,IAAN,CAAWC,IAA/B,CAFwB,CAIxB;;IACA,KAAKJ,MAAL,CAAYuB,QAAZ,CAAqB,CAAC,UAAD,EAAaD,WAAb,CAArB;EACD;;EAEDE,YAAY,CAACH,KAAD,EAAW;IACrB,IAAIA,KAAK,IAAIA,KAAK,CAACjB,IAAnB,EAAyB;MACvB;MACA,KAAKJ,MAAL,CAAYuB,QAAZ,CAAqB,CAAC,YAAYF,KAAK,CAACjB,IAAI,EAAvB,CAArB,EAFuB,CAE2B;IACnD;EACF;;AAhCyB;;;mBAAbP,eAAaH;AAAA;;;QAAbG;EAAa4B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb1BnC,+BAAsB,CAAtB,EAAsB,KAAtB,EAAsB,CAAtB,EAAsB,CAAtB,EAAsB,IAAtB;MACiCA;MAAkBA;MAEjDA,+BAAkC,CAAlC,EAAkC,KAAlC,EAAkC,CAAlC,EAAkC,CAAlC,EAAkC,MAAlC;MACqCA;MAAaA;MAChDA;MAAMA;MAAiBA;MAEzBA,gCAA8B,EAA9B,EAA8B,MAA9B;MAAqCA;MAAmBA;MACtDA;MAAMA;MAAuBA;MAEjCA;MACIA;;MAGFA;MAIAA;MAqBFA;;;;MAlCUA;MAAAA;MAGAA;MAAAA;MAGkBA;MAAAA;MAQzBA;MAAAA","names":["Observable","map","faAward","i0","_r3","ctx_r1","HomeComponent","constructor","olympicService","router","item","label","data","name","val","value","ngOnInit","getOlympics","pipe","countries","country","participations","reduce","total","participation","medalsCount","subscribe","transformedData","chartData","onPieChartClick","event","countryName","navigate","onChartClick","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.ts","/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.html"],"sourcesContent":["import { Component, OnInit} from '@angular/core';              // Importe les décorateurs 'Component' et 'OnInit' d'Angular Core.\nimport { Observable, of } from 'rxjs';                          // Importe 'Observable' de la bibliothèque RxJS pour la gestion des données asynchrones.\nimport { OlympicService } from 'src/app/core/services/olympic.service';\nimport { OlympicCountry } from 'src/app/core/models/Olympic';   // Importe l'interface 'OlympicCountry' pour définir la structure des données olympiques.\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router'; \nimport { faAward } from '@fortawesome/free-solid-svg-icons';\n@Component({\n  selector: 'app-home',                                         // Sélecteur CSS pour utiliser ce composant.   Utilisé dans le HTML comme <app-home></app-home>.\n  templateUrl: './home.component.html',                         // Chemin vers le fichier de template HTML de ce composant\n  styleUrls: ['./home.component.scss'],                         // Chemin(s) vers le(s) fichier(s) de style CSS/SCSS de ce composant.\n})\n\nexport class HomeComponent implements OnInit {                  // Déclaration de la classe du composant 'HomeComponent'.\n  public olympics$: Observable<OlympicCountry[] | null> | undefined;  // Déclaration d'une propriété publique 'olympics$'. C'est un Observable qui émettra soit un tableau de 'OlympicCountry', soit 'null'. Peut être 'undefined' initialement.\n  public chartData: any[] = [];  // Stocke les données transformées pour le diagramme\n  public tooltipTemplate: any; // Assurez-vous de déclarer la propriété tooltipTemplate.\n  faAward = faAward;\n  constructor(private olympicService: OlympicService, private router: Router) {}        // Le constructeur est utilisé pour l'injection de dépendances.\n\n ngOnInit(): void {\n  this.olympicService.getOlympics().pipe(\n    map((countries: OlympicCountry[] | null) => \n      countries ? countries.map(country => ({\n        name: country.country,\n        value: country.participations.reduce((total, participation) => total + participation.medalsCount, 0)\n      })) : []\n    )\n  ).subscribe(transformedData => {\n    this.chartData = transformedData;\n  });\n}\nonPieChartClick(event: any): void {\n  // Récupérez le nom du pays à partir de l'événement (ou d'où vous le stockez)\n  const countryName = event.data.name;\n\n  // Utilisez le Router pour naviguer vers la page de détail avec le nom du pays en tant que paramètre\n  this.router.navigate(['/details', countryName]);\n}\n\nonChartClick(event: any): void {\n  if (event && event.name) {\n    // Utilisez le Router pour naviguer vers la page concernée en fonction de l'événement ou des données du clic.\n    this.router.navigate([`/details/${event.name}`]); // Assurez-vous d'ajuster le chemin de la route selon votre structure.\n  }\n}\n\n\ntooltipText = (item: any): string => {\n  const label = item.data.name;\n  const val = item.data.value;\n   return `${label} ${val}`;\n};\n}\n\n\n/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\n* Le symbole $ après le nom olympics dans olympics$ est une convention de nommage couramment utilisée dans la communauté Angular et RxJS pour indiquer qu'une variable est un Observable.\n\nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/","<div class=\"homePage\">\n  <div class=\"homePageTitle\"><h1>Medals per Country</h1></div>\n\n  <div class=\"homePageAllSubtitles\">\n  <div class=\"homePageSubtitle\"> <span>Number of JOs</span>\n    <span>{{ numberOfJOs }}</span></div>\n  \n  <div class=\"homePageSubtitle\"> <span>Number of countries</span>\n    <span>{{ numberOfCountries }}</span></div>\n</div>\n<ul>\n    <li *ngFor=\"let country of (olympics$ | async)\">  <!--la directive *ngFor est utilisée pour itérer sur chaque élément du tableau émis par olympics$.-->\n      {{ country.country }}\n    </li>\n  </ul>\n\n\n  \n  <ngx-charts-pie-chart\n  *ngIf=\"chartData\"\n  [results]=\"chartData\"\n    [view]=\"[1050, 600]\"\n    [legend]=\"false\"\n    [labels]=\"true\"\n    [trimLabels]=\"true\"\n    [tooltipTemplate]=\"tooltipTemplate\"\n    [tooltipText]=\"tooltipText\"\n    (select)=\"onChartClick($event)\"\n    >\n  \n  \n    <ng-template #tooltipTemplate let-model=\"model\" >\n      <div class=\"tooltip\">\n      <div >{{ model.name }}</div> \n      <div><fa-icon [icon]=\"faAward\" style=\"color: white;\"></fa-icon>\n         {{ model.value }}</div>\n    </div>\n    </ng-template>\n</ngx-charts-pie-chart>\n</div>\n\n  <!--L'expression let country of (olympics$ | async) crée une variable locale country pour chaque itération, \n    qui représente l'objet courant du tableau olympics$.-->\n\n "]},"metadata":{},"sourceType":"module"}