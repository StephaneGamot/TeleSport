{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core'; // Importe les décorateurs 'Component' et 'OnInit' d'Angular Core.\n\nlet HomeComponent = class HomeComponent {\n  constructor(olympicService) {\n    this.olympicService = olympicService;\n  } // Le constructeur est utilisé pour l'injection de dépendances.\n\n\n  ngOnInit() {\n    this.olympics$ = this.olympicService.getOlympics(); // Lors de l'initialisation, s'abonner aux données olympiques fournies par 'olympicService'.\n  } // Assignation de l'Observable retourné par 'getOlympics()' à la propriété 'olympics$'.\n\n\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss'] // Chemin(s) vers le(s) fichier(s) de style CSS/SCSS de ce composant.\n\n})], HomeComponent);\nexport { HomeComponent };\n/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,QAAkC,eAAlC,C,CAAgE;;AAWhE,IAAaC,aAAa,GAA1B,MAAaA,aAAb,CAA0B;EAKxBC,YAAoBC,cAApB,EAAkD;IAA9B;EAAkC,CAL9B,CAKsC;;;EAE9DC,QAAQ;IACN,KAAKC,SAAL,GAAiB,KAAKF,cAAL,CAAoBG,WAApB,EAAjB,CADM,CACsD;EAC7D,CATuB,CASsC;;;AATtC,CAA1B;AAAaL,aAAa,eANzBD,SAAS,CAAC;EACTO,QAAQ,EAAE,UADD;EAETC,WAAW,EAAE,uBAFJ;EAGTC,SAAS,EAAE,CAAC,uBAAD,CAHF,CAGqD;;AAHrD,CAAD,CAMgB,GAAbR,aAAa,CAAb;SAAAA;AAYb","names":["Component","HomeComponent","constructor","olympicService","ngOnInit","olympics$","getOlympics","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/papa/Desktop/WhiteWolfWeb/PROJET-OCR-JAVA-ANGULAR/OCR-JAVA-ANGULAR-P2/TeleSport/src/app/pages/home/home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';              // Importe les décorateurs 'Component' et 'OnInit' d'Angular Core.\nimport { Observable, of } from 'rxjs';                          // Importe 'Observable' de la bibliothèque RxJS pour la gestion des données asynchrones.\nimport { OlympicService } from 'src/app/core/services/olympic.service';\nimport { OlympicCountry } from 'src/app/core/models/Olympic';   // Importe l'interface 'OlympicCountry' pour définir la structure des données olympiques.\n\n@Component({\n  selector: 'app-home',                                         // Sélecteur CSS pour utiliser ce composant.   Utilisé dans le HTML comme <app-home></app-home>.\n  templateUrl: './home.component.html',                         // Chemin vers le fichier de template HTML de ce composant\n  styleUrls: ['./home.component.scss'],                         // Chemin(s) vers le(s) fichier(s) de style CSS/SCSS de ce composant.\n})\n\nexport class HomeComponent implements OnInit {                  // Déclaration de la classe du composant 'HomeComponent'.\n  public olympics$: Observable<OlympicCountry[] | null> | undefined;  // Déclaration d'une propriété publique 'olympics$'. C'est un Observable qui émettra soit un tableau de 'OlympicCountry', soit 'null'. Peut être 'undefined' initialement.\n\n\n\n  constructor(private olympicService: OlympicService) {}        // Le constructeur est utilisé pour l'injection de dépendances.\n\n  ngOnInit(): void {                                            // La méthode 'ngOnInit' est un hook de cycle de vie d'Angular exécuté après la création du composant.\n    this.olympics$ = this.olympicService.getOlympics();         // Lors de l'initialisation, s'abonner aux données olympiques fournies par 'olympicService'.\n  }                                                             // Assignation de l'Observable retourné par 'getOlympics()' à la propriété 'olympics$'.\n}\n\n/*\n\n* Décorateur @Component : Définit les métadonnées du composant, telles que le template HTML, le style, et le sélecteur.\n* Classe du Composant : Définit le comportement du composant, incluant les propriétés et les méthodes.\n*\tObservable olympics$ : Gère les données asynchrones des pays olympiques.\n*\tInjection de OlympicService : Fournit les données nécessaires au composant\n* ngOnInit : Initialise le composant en s'abonnant aux données olympiques\n\nCe composant, en résumé, est conçu pour afficher des données olympiques en s'abonnant à un service qui les fournit via un Observable.\n\n*/"]},"metadata":{},"sourceType":"module"}